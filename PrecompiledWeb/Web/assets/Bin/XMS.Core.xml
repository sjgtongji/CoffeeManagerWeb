<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XMS.Core</name>
    </assembly>
    <members>
        <member name="T:XMS.Core.Web.WebRequestHelper">
            <summary>
            Web 请求帮助类。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.WebRequestHelper.GetWebDataString(System.String,System.Int32,System.Boolean,System.Net.CookieContainer)">
            <summary>
            
            </summary>
            <param name="sUrl"></param>
            <param name="nTimeOut"></param>
            <param name="bIsUseGzip"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.Web.WebRequestHelper.GetWebData(System.String,System.Int32,System.Boolean,System.Net.CookieContainer)" -->
        <member name="T:XMS.Core.Resource.IResourceService">
            <summary>
            定义一组可用于访问资源系统的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Resource.IResourceService.GetImageUrl(System.String,System.String,System.String)">
            <summary>
            获取指定名称和尺寸规格的图片的 Url，该方法需要在 app.config 或者默认配置文件（如web.config) 的 appsettings 节中添加键值为 RES_ImageServerUrl 的自定义项，用于配置图片服务器的格式化地址，如："http://upload{0}.xiaomishu.com"。
            </summary>
            <param name="rootPath">相对于 RES_ImageServerUrl 的根路径。</param>
            <param name="fileName">图片名称。</param>
            <param name="sizeSpeci">尺寸规格。</param>
            <returns>指定名称和尺寸规格的图片的 Url。</returns>
        </member>
        <member name="T:XMS.Core.WCF.ManageableServiceHost">
            <summary>
            一个 ServiceHost 派生类，支持配置服务，通过配置服务获取服务配置文件并加载服务说明信息。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.ApplyConfiguration">
            <summary>
            重载自 <see cref="T:System.ServiceModel.ServiceHostBase"/> 类，通过配置服务获取服务配置文件并加载服务说明信息，并将其应用于正在构造的运行库。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.EnableDiscovery(System.Boolean,System.Boolean)">
            <summary>
            为当前宿主中承载的服务启用自动发现机制。
            </summary>
            <param name="enableMEX">是否启用元数据交换服务，默认为 <c>true</c>。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的新实例。
            </summary>
            <remarks>
            有两个构造函数可用于创建 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的实例。 
            多数情况下，均使用将服务类型作为输入参数的 <see cref="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Type,System.Uri[])"/> 构造函数。
            根据需要，主机还可以使用此函数创建新服务。仅在您希望服务主机使用特定的服务单一实例时才使用 <see cref="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Object,System.Uri[])"/> 构造函数。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            使用服务的类型及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的新实例。 
            </summary>
            <param name="type">承载服务的类型。</param>
            <param name="baseAddresses">Uri 类型的数组，包含承载服务的基址。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            使用服务的实例及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 类的新实例。
            </summary>
            <param name="singleton">承载的服务的实例。</param>
            <param name="baseAddresses">Uri 类型的 Array，包含承载服务的基址。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHost.GetAvailableLocalIPV4">
            <summary>
            获取一个本地可用的 IP V4 地址。
            不能使用	 System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName())[0].ToString() 来获取 IP，因为，
            在 windows server 2008 下，通过这种方式获取的 IP 为类似 fe80::8c11:dc56:65b6:d43d%19 这种格式（目前不知原因）
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasUdpDiscoveryEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint"/> （UDP 发现终结点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasDiscoveryBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryBehavior"/> （服务发现行为）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasMetadataExchangeEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.IMetadataExchange"/> （元数据交换服务端点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.HasMetadataBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior"/> （元数据交换服务行为）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHost.ServiceType">
            <summary>
            获取服务的类型。
            </summary>
        </member>
        <member name="T:XMS.Core.RunMode">
            <summary>
            定义运行模式。
            </summary>
        </member>
        <member name="F:XMS.Core.RunMode.Demo">
            <summary>
            表示以 Demo 模式运行。
            </summary>
        </member>
        <member name="F:XMS.Core.RunMode.Release">
            <summary>
            表示以 Release 模式运行。
            </summary>
        </member>
        <member name="T:XMS.Core.RunContext">
            <summary>
            运行上下文，提供当前应用程序所处的运行环境。
            </summary>
        </member>
        <member name="M:XMS.Core.RunContext.InitCurrent">
            <summary>
            从请求中初始化 Current 属性，这可将 RunContext 当前实例初始化化，后续对 Current 属性的访问不再依赖于具体的请求上下文，可避免访问已经释放的 OperationContext.Current 时发生错误，
            并可提高后续访问的性能，但必须在执行结束时成对调用 ResetCurrent 方法，以防止在线程被复用时误用之前的上下文实例。
            </summary>
        </member>
        <member name="M:XMS.Core.RunContext.ResetCurrent">
            <summary>
            将 RunContext 的当前实例重设为 null，该方法一般与 InitCurrent 成对使用。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.contextRunMode">
            <summary>
            上下文中的运行模式
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.AppName">
            <summary>
            获取当前运行环境应用程序的名称，该字段不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.AppVersion">
            <summary>
            获取当前运行环境应用程序的版本，该字段不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="F:XMS.Core.RunContext.IsWebEnvironment">
            <summary>
            获取一个值，该值指示当前应用程序是否Web环境，该字段不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.Current">
            <summary>
            获取当前运行上下文，可通过该对象得到线程相关的当前运行模式。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.RunMode">
            <summary>
            获取一个值，该值指示当前业务上下文的运行模式。
            运行模式优先级：
            	1.在 RunContextScope 作用域中，优先使用 RunContextScope 的 RunMode，其优先级高于 Web 上下文 和 Service 上下文。
            	2.在 Service 上下文 中，如果服务请求中包含 DemoHeader 标头，则返回 demo 运行模式，否则忽略 Service 上下文。Service 上下文 优先级高于 Web 上下文。
            	3.在 Web 上下文 中，如果请求的 URI 以 demo. 打头，则返回 demo 运行模式，否则忽略 Web 上下文。Web 上下文 优先级高于配置。
            	4.其它情况，如果 AppSettings.config 中包含 runMode 配置项，则返回配置的运行模式，否则返回 release 运行模式。配置的优先级最低。
            </summary>
        </member>
        <member name="P:XMS.Core.RunContext.Machine">
            <summary>
            获取当前运行环境所处的机器名，该属性不需要容器初始化就可直接访问。
            </summary>
        </member>
        <member name="T:XMS.Core.RunScope">
            <summary>
            业务块
            </summary>
        </member>
        <member name="F:XMS.Core.RunScope.current">
            <summary>
            线程相关的当前业务作用域对象。
            </summary>
        </member>
        <member name="M:XMS.Core.RunScope.CreateRunContextScopeForDemo">
            <summary>
            不管当前运行模式是 demo 还是 release，总是创建一个适用于 demo 场景的业务块。
            调用这个方法之前，必须先判断是否支持 demo 模式。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.RunScope.CreateRunContextScopeForRelease">
            <summary>
            不管当前运行模式是 demo 还是 release，总是创建一个适用于 release 场景的 实体业务块。
            调用这个方法之前，必须先判断是否支持 release 模式。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.RunScope.RunMode">
            <summary>
            获取一个值，该值指示当前业务上下文的运行模式。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceListener.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.MillisecondsFrom1970L">
            <summary>
            序列化时，日期被序列化成1970年以来的毫秒数,TimeSpan 也被序列化成毫秒数
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.StringNoneMilliseconds">
            <summary>
            序列化时，日期被序列化成字符串，但没有毫秒数
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.StringWithMilliseconds">
            <summary>
            序列化时日期被序列化成字符串并有毫秒数。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.SerializationFormat.Custom">
            <summary>
            序列化时日期按照指定的格式自定义。
            </summary>
        </member>
        <member name="T:XMS.Core.Dictionary.ItemValueDataType">
            <summary>
            表示字典中存储的字典项的数据类型，其枚举值与 .Net、Sql Server 中的数据类型对应如下：
            	枚举值		.Net类型		SqlServer类型	范围				说明
            	Boolean		Boolean		bit				0 或 1  		取值为 1、0 或 NULL 的整数数据类型 
            	Byte		Byte		tinyint			0 到 255 		无符号8位整数 
            	Int16		Int16		smallint		-2^15 到 2^15	有符号16位整数
            	Int			Int32		int				-2^31 到 2^31 	有符号32位整数
            	Int64		Int64		bigint			-2^63 到 2^63 	有符号64位整数
            </summary>
        </member>
        <member name="T:XMS.Core.Dictionary.Dictionary">
            <summary>
            表示一个字典对象。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Name">
            <summary>
            获取字典的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Caption">
            <summary>
            获取字典的标题
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.RaiseBitwise">
            <summary>
            获取一个值，该值指示当前字典中存储的项的值是否支持位运算，默认为 false。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.ItemValueDataType">
            <summary>
            获取字典中存储的字典项的值的类型，默认为 Int32。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Description">
            <summary>
            获取当前字典的说明。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.Items">
            <summary>
            获取当前字典直接包含的字典项的集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.All">
            <summary>
            获取当前字典中包含的所有字典项的集合。
            集合中的元素按照 SortNo 属性指定的顺序有小到大逐级排放，最终如下所示：
            	第一级序号	第二级序号
            	1
            				1
            				2
            				3
            	2
            				1
            				2
            	3
            				1
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.Dictionary.LevelsCount">
            <summary>
            获取当前字典支持的层级数量。
            </summary>
        </member>
        <member name="T:XMS.Core.Dictionary.DefaultDictionaryService">
            <summary>
            字典服务的默认实现。
            </summary>
        </member>
        <member name="T:XMS.Core.Dictionary.IDictionaryService">
            <summary>
            定义一组可用于访问字典数据的接口。
            </summary>
            <remarks>
            定义字典注意事项：
            	1.字典项的值必须在其 ItemValueDataType 对应的数据类型限定的范围之内（参见 ItemValueDataType 中的说明）；
            	2.字典项对应的实体模型的类型必须与 ItemValueDataType 保持一致。
            </remarks>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.GetDictionary(System.Int32,System.String)">
            <summary>
            根据指定的字典名称获取一个字典。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">要获取的字典的名称。</param>
            <returns>一个包含字典数据的字典对象。</returns>
            <exception cref="T:System.ArgumentException">dictionaryName 为空字符串或者为 null。</exception>
            <exception cref="T:System.ArgumentException">未找到指定名称的字典。</exception>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateDictionaryData(System.Int32,System.String)">
            <summary>
            使用指定的字典名称创建字典数据对象。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateSingleSelectDictionaryData(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、选定值创建并返回字典数据对象，支持字典单选的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、位运算值创建并返回字典数据对象，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称创建并返回字典数据对象，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveSingleSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的数据字典对象并输出其选定的值，支持字典单选的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的字典名称、位运算值创建并输出其位运算后的，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称，输出其位运算后的值并返回明细项集合，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>明细项集合</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称，输出其位运算后的值并返回明细项集合，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.IDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.GetDictionary(System.Int32,System.String)">
            <summary>
            根据指定的字典名称获取一个字典。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">要获取的字典的名称。</param>
            <returns>一个包含字典数据的字典对象。</returns>
            <exception cref="T:System.ArgumentException">dictionaryName 为空字符串或者为 null。</exception>
            <exception cref="T:System.ArgumentException">未找到指定名称的字典。</exception>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.GetRemoteDictionary(System.Int32,System.String)">
            <summary>
            获取远程字典对象
            </summary>
            <param name="cityId"></param>
            <param name="dictionaryName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateDictionaryData(System.Int32,System.String)">
            <summary>
            使用指定的字典名称创建一个字典数据对象，该字典数据对象中的数据项的选中状态为默认状态。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateSingleSelectDictionaryData(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、选定值创建并返回字典数据对象，支持字典单选的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64)">
            <summary>
            解析指定的字典名称、位运算值创建并返回字典数据对象，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryDataWithBitwise(System.Int32,System.String,System.Int64,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称创建并返回字典数据对象，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.CreateMultieSelectDictionaryData(System.Int32,System.String,System.Collections.Generic.List{System.Object},System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="cityId">字典关联的城市Id，系统根据此参数值为特定城市返回适用于该城市的字典。</param>
            <param name="dictionaryName">字典名称</param>
            <param name="dataItems">数据项集合</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveSingleSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的数据字典对象并输出其选定的值，支持字典单选的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="selectedValue">选定值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@)">
            <summary>
            解析指定的字典名称、位运算值创建并输出其位运算后的，支持通过位运算的复选但不需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算后的值</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryDataWithBitwise(XMS.Core.Dictionary.DataModel.DictionaryData,System.Int64@,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、位运算值、数据项集合、值字段名称、备注字段名称，输出其位运算后的值并返回明细项集合，支持字典通过位运算的复选且需要明细项（如其它备注信息）的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="bitwiseValue">位运算值</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>明细项集合</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称，输出其位运算后的值并返回明细项集合，支持普通（非位运算）的复选且备注信息（如果需要的话）在不选中的状态下不进行持久化的情况。
            这种情况下，dataItems 集合中的每一项对应的字典数据项都被认为是选中状态。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DefaultDictionaryService.ResolveMultieSelectDictionaryData(XMS.Core.Dictionary.DataModel.DictionaryData,System.Type,System.String,System.String,System.String)">
            <summary>
            解析指定的字典名称、数据项集合、值字段名称、备注字段、选中字段名称创建并返回字典数据对象，支持非位运算的复选且备注信息（如果需要的话）在不选中的状态下仍然能够持久化的情况。
            </summary>
            <param name="data">要解析的目标数据字典对象</param>
            <param name="modelType">字典数据明细项对应的实体模型的类型</param>
            <param name="valueFieldName">值字段名称</param>
            <param name="descriptionFieldName">备注字段名称</param>
            <param name="selectedFieldName">选中字段名称</param>
            <returns>字典数据对象</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.DefaultDictionaryService.ConfigService">
            <summary>
            基础配置服务
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.Dictionary">
            <summary>
            获取当前字典数据相关的字典。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.BitwiseValue">
            <summary>
            获取当前字典中所有选中的字典项的位运算值。
            </summary>
            <remarks>
            只有当相关字典支持位运算时才返回位运算值，否则永远返回 0；
            </remarks>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.DataItems">
            <summary>
            获取当前字典直接包含的字典数据项的集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryData.All">
            <summary>
            获取当前字典中包含的所有字典数据项的集合。
            集合中的元素按照字典项的 SortNo 属性指定的顺序有小到大逐级排放，最终如下所示：
            	第一级序号	第二级序号
            	1
            				1
            				2
            				3
            	2
            				1
            				2
            	3
            				1
            </summary>
        </member>
        <member name="M:XMS.Core.Container.HasComponent(System.Type)">
            <summary>
            判断容器中是否存在指定类型的服务。
            </summary>
            <param name="service">要判断的服务的类型。</param>
            <returns>如果容器中存在指定类型的服务，返回<c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Container.HasComponent(System.String)">
            <summary>
            判断容器中是否存在指定键的服务。
            </summary>
            <param name="key">要判断的服务的键。</param>
            <returns>如果容器中存在指定键的服务，返回<c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Container.Resolve``1">
            <summary>
            从容器中获取一个指定类型服务的实例，该类型以强类型的方式返回。
            </summary>
            <typeparam name="T">要获取服务实例的类型。</typeparam>
            <returns></returns>
            <example>
            ILogService log = Container.Instance.GetService&lt;ILogService&gt;();
            </example>
        </member>
        <member name="M:XMS.Core.Container.Resolve``1(System.String)">
            <summary>
            从容器中获取一个指定类型服务的实例，该类型以强类型的方式返回。
            </summary>
            <param name="key">键</param>
            <typeparam name="T">要获取服务实例的类型。</typeparam>
            <returns></returns>
            <example>
            ILogService log = Container.Instance.GetService&lt;ILogService&gt;();
            </example>
        </member>
        <member name="M:XMS.Core.Container.Resolve(System.Type)">
            <summary>
            
            </summary>
            <param name="service">要获取服务实例的类型。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Container.Register(System.Type)">
            <summary>
            向容器中注册服务
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:XMS.Core.Container.Register(System.Type,System.Type)">
            <summary>
            向容器中注册服务
            </summary>
            <param name="serviceType"></param>
            <param name="implementionType"></param>
        </member>
        <member name="M:XMS.Core.Container.Close">
            <summary>
            关闭容器
            </summary>
        </member>
        <member name="P:XMS.Core.Container.CacheService">
            <summary>
            获取容器中注入的缓存服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.LogService">
            <summary>
            获取容器中注入的日志服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.ConfigService">
            <summary>
            获取容器中注入的配置服务的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Container.ResourceService">
            <summary>
            获取容器中注入的资源服务的实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.IDistributeCache.RemoveItem(System.String)">
            <summary>
            从 Cache 对象中移除指定的缓存项。
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>
            移除成功，返回 <c>true</c>；移除失败，返回 <c>false</c>。
            </returns>
        </member>
        <member name="M:XMS.Core.Caching.IDistributeCache.Clear">
            <summary>
            清空当前缓存对象中缓存的全部缓存项。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.ManageableWebServiceHostFactory">
            <summary>
            在可动态创建主机实例以响应传入消息的 IIS 托管宿主环境中提供支持配置服务且具有高可管理性的 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 的实例的工厂。 
            </summary>
            <remarks>
            <para>
            此工厂提供一种支持集中配置的 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/>，以便在托管宿主环境为 Internet Information Services (IIS) 中启用集中配置服务并提升服务的可管理性。
            ManageableWebServiceHostFactory 创建一个继承自 WebServiceHost 的宿主的实例，该实例禁用 HTTP 帮助页和 Web 服务描述语言 (WSDL) GET 功能，以使元数据终结点不干扰默认 HTTP 终结点。
            </para>
            <para>
            集中配置注意：当某应用程序在中心配置服务器上的服务配置（Services.config）发生变化时，应用程序会响应该变化并应用新的配置，新的配置生效前的大部分正在执行的请求可以正常执行完成，
            但仍然会有少数请求（例如执行时间过长的请求）被强制关闭，可以通过将同一服务部署到多台备份机器上并利用客户端应用程序通过轮询实现的可靠性机制来将这一部分请求转移到备份机器上重新执行，
            从而可有效避免错误的出现。最后，为了尽可能的减少因配置变化引发的错误，请尽量在访问量最小的时候更新配置。
            </para>
            </remarks>
            <example>
            <para>
            可以在 .SVC 文件中声明支持集中配置的服务，示例如下：<br/>
            <code>
            &lt;%@ServiceHost Language="c#" Service="XMS.Samples.SampleService" Factory="XMS.Core.WCF.ManageableWebServiceHostFactory"%&gt;
            </code>
            .SVC 文件中使用 <see cref="T:XMS.Core.WCF.ManageableWebServiceHostFactory"/> 需要特别注意：<br/>
                当服务宿主为 普通 IIS 宿主 或 IIS7 中的WAS宿主时，不需要也无法为其指定基址和为其 EndPoint 指定 Address，系统自动使用 Svc文件的地址为作为服务的地址。<br/>
                另外，当服务宿主为普通 IIS 宿主时，仅支持 Http 协议，当服务宿主为 IIS7 中的WAS宿主时，支持所有可用的传输协议。<br/>
            </para>
            <para>
            也可以在 Web.config 配置文件中声明支持集中配置的服务，示例如下：
            <code>
              &lt;serviceHostingEnvironment multipleSiteBindingsEnabled="true"&gt;
                 &lt;serviceActivations&gt;
                   &lt;add factory="XMS.Core.WCF.ManageableWebServiceHostFactory" service="WebApplication1.Service1" relativeAddress="test.svc"/&gt;
                 &lt;/serviceActivations&gt;
               &lt;/serviceHostingEnvironment&gt;
             </code>
            </para>
            <para>
            上述任何一种声明服务的方式都需要相应的服务配置信息（参考集中配置机制，按如下顺序查找：conf/Services.config &gt; Services.config &gt; Web.config ），如下所示：
             <code>
               &lt;services&gt;
            	 &lt;service name="WebApplication1.Service1" behaviorConfiguration="IOCBehavior"&gt;
            		&lt;endpoint binding="wsHttpBinding" contract="WebApplication1.IService1" bindingConfiguration="WSBindingConfig"/&gt;
            	 &lt;/service&gt;
               &lt;/services&gt;
            </code>
            </para>
            </example>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            使用指定的服务类型和基址创建 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的实例。
            </summary>
            <param name="serviceType">要创建的服务主机的类型。</param>
            <param name="baseAddresses">该服务的基址的数组。</param>
            <returns>从 <see cref="T:System.ServiceModel.Web.WebServiceHost"/> 派生的 <see cref="T:XMS.Core.WCF.ManageableWebServiceHostFactory"/> 类的实例。</returns>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHostFactory.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="T:XMS.Core.Formatter.PlainObjectFormatter">
            <summary>
            简单对象格式化器的实现。
            </summary>
        </member>
        <member name="T:XMS.Core.Formatter.ObjectFormatter">
            <summary>
            为 IObjectFormatter 接口提供一个基本实现。
            </summary>
        </member>
        <member name="T:XMS.Core.Formatter.IObjectFormatter">
            <summary>
            定义一组方法，用于格式化指定的对象。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.IObjectFormatter.Format(System.Object)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.IObjectFormatter.Format(System.Object,System.Text.StringBuilder)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.#ctor">
            <summary>
            初始化 ObjectFormatter 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            使用指定的深度、最大字符串长度、最大集合数量初始化 PlainObjectFormatter 类的新实例。
            </summary>
            <param name="maximumDepth">深度</param>
            <param name="maximumStringLength">最大字符串长度</param>
            <param name="maximumCollectionLength">最大集合数量</param>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.AddTypeFormatter(XMS.Core.Formatter.TypeFormatter)">
            <summary>
            添加一个类型格式化器。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.GetTypeFormatter(System.Type)">
            <summary>
            为指定的类型获取自定义的类型格式化器。
            </summary>
            <param name="dataType">要为其获取类型格式化器的类型。</param>
            <returns>如果存在，则返回该类型的格式化器，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.Format(System.Object)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.ObjectFormatter.Format(System.Object,System.Text.StringBuilder)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.MaximumDepth">
            <summary>
            获取或设置复杂对象在其对象图中可格式化的层深，默认值为 8，超过该深度，将使用省略号代替。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.MaximumStringLength">
            <summary>
            获取或设置字符串类型的数据格式化后的最大长度，默认值为 1024，超过该长度，将使用省略号代替。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.MaximumCollectionLength">
            <summary>
            获取或设置集合类型的数据格式化后的最大长度，默认值为 32，超过该长度，将使用省略号代替。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.DecimalFormat">
             <summary>
            获取或设置 decimal 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.DoubleFormat">
             <summary>
            获取或设置 double 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.FloatFormat">
             <summary>
            获取或设置 float 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.IntegerFormat">
             <summary>
            获取或设置 integer 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.LongFormat">
             <summary>
            获取或设置 long 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.DateTimeFormat">
             <summary>
            获取或设置 DateTime 类型数据的格式化格式。
             </summary>
        </member>
        <member name="P:XMS.Core.Formatter.ObjectFormatter.TimeSpanFormat">
             <summary>
            获取或设置 TimeSpan 类型数据的格式化格式。
             </summary>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.EscapeString(System.String)">
            <summary>
            替换字符串中的反斜杠、双引号、换行符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            使用指定的深度、最大字符串长度、最大集合数量初始化 PlainObjectFormatter 类的新实例。
            </summary>
            <param name="maximumDepth">深度</param>
            <param name="maximumStringLength">最大字符串长度</param>
            <param name="maximumCollectionLength">最大集合数量</param>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.#ctor">
            <summary>
            初始化 PlainObjectFormatter 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.Format(System.Object)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.PlainObjectFormatter.Format(System.Object,System.Text.StringBuilder)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="P:XMS.Core.Formatter.PlainObjectFormatter.Full">
            <summary>
            获取完整版对象格式化器，该对象格式化器完整格式化对象，不限制对象的深度、字符串的长度、集合的长度。
            </summary>
        </member>
        <member name="P:XMS.Core.Formatter.PlainObjectFormatter.Simplified">
            <summary>
            获取简化版对象格式化器，如果对象超过深度、字符串长度、集合长度限制，那么将部分格式化该对象，超过的部分使用省略号代替。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.UserIPHeader">
            <summary>
            表示用户IP标头
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.UserIPHeader.Name">
            <summary>
            app-agent 标头的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.UserIPHeader.NameSpace">
            <summary>
            app-agent 标头的名称空间。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactories.ConcentratedConfigServiceClient.RegisterServices(XMS.Core.Container)">
            <summary>
            向指定的容器中注册服务
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactories.ConcentratedConfigServiceClient.IsNotWebApplication">
            <summary>
            判断当前应用程序是否非Web应用程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactories.ConcentratedConfigServiceClient.RegisterService(XMS.Core.Container,System.Type,XMS.Core.WCF.Client.ClientChannelCacheMode)">
            <summary>
            注册一个服务类型，以便服务工厂进行管理。
            该方法将指定的服务类型放入IOC容器，任何服务类型必须在注册后才能够通过IOC容器进行访问。
            该服务类型的实例是通过服务工厂对象创建的，其生命周期由为其定义的 ClientChannelCacheModeAttribute 决定。
            </summary>
            <param name="container">要在其中注册服务的容器。</param>
            <param name="serviceType">要注册的服务类型。</param>
            <param name="cacheModel">要注册的服务在客户端的缓存模式。</param>
        </member>
        <member name="T:XMS.Core.Messaging.MessageContext">
            <summary>
            消息上下文。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageContext">
            <summary>
            表示一个消息上下文，该上下文对象的实例与一个消息关联。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageContext.Persistence">
            <summary>
            将消息持久化并通过消息总线客户端立即通知消息代理服务消息接收并处理成功。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageContext.Complete">
            <summary>
            如果之前调用过 Persistence 方法，则通知消息总线客户端消息处理成功并从消息持久化存储中删除消息，否则，将通过消息总线客户端通知消息代理服务器消息处理成功。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.MessageInfo">
            <summary>
            获取一个值，该值提供消息相关的信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.IsPersistenced">
            <summary>
            获取一个值，该值指示消息是否已经持久化。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageContext.IsCompleted">
            <summary>
            获取一个值，该值指示消息是否已经处理完成。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.#ctor(XMS.Core.Messaging.MessageInfo)">
            <summary>
            初始化 MessageContext 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.Persistence">
            <summary>
            将消息持久化并通过消息总线客户端立即通知消息代理服务消息接收并处理成功。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.Complete">
            <summary>
            如果之前调用过 Persistence 方法，则通知消息总线客户端消息处理成功并从消息持久化存储中删除消息，否则，将通过消息总线客户端通知消息代理服务器消息处理成功。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.OnHandleError(System.Exception)">
            <summary>
            当使用消息上下文和其相关的消息在消息处理程序上调用 Handle 方法的过程中发生错误时触发此事件。
            </summary>
            <param name="err">原始错误。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.CreateFrom(XMS.Core.Pipes.DataReceivedEventArgs,XMS.Core.Messaging.MessageInfo)">
            <summary>
            从指定的 DataReceivedEventArgs 和 Message 创建 IMessageContext 的实例。
            </summary>
            <param name="eventArgs">要从其创建 IMessageContext 实例的 DataReceivedEventArgs 对象。</param>
            <param name="messageInfo">要从其创建 IMessageContext 实例的 MessageInfo 对象。</param>
            <returns>MessageContext 实例。</returns>
        </member>
        <member name="M:XMS.Core.Messaging.MessageContext.CreateFrom(System.String,XMS.Core.Messaging.MessageInfo)">
            <summary>
            从指定的消息文件创建 IMessageContext 的实例。
            </summary>
            <param name="fileName">要从其创建 IMessageContext 实例的消息文件的路径。</param>
            <param name="messageInfo">要从其创建 IMessageContext 实例的 MessageInfo 对象。</param>
            <returns>MessageContext 实例。</returns>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.MessageInfo">
            <summary>
            获取一个值，该值提供消息相关的信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.IsPersistenced">
            <summary>
            获取一个值，该值指示消息是否已经持久化。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageContext.IsCompleted">
            <summary>
            获取一个值，该值指示消息是否已经处理完成。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.ICustomLog">
            <summary>
            自动以日志接口
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.ICustomLog.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="T:XMS.Core.Json.JsonIgnoreAttribute">
            <summary>
            在 json 序列化过程中忽略指定的属性或字段。
            </summary>
        </member>
        <member name="T:XMS.Core.Json.JsonPropertyAttribute">
            <summary>
            定义属性在序列化为 json 时的行为。
            </summary>
        </member>
        <member name="M:XMS.Core.Json.JsonPropertyAttribute.#ctor">
            <summary>
            初始化 JsonMemberAttribute 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Json.JsonPropertyAttribute.Name">
            <summary>
            获取或设置一个值，该值指示 json 序列化的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.IP">
            <summary>
            应用所在的 IP。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.AppName">
            <summary>
            应用名。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.AppVersion">
            <summary>
            应用版本。
            </summary>
        </member>
        <member name="P:XMS.Core.ServiceInvokeChainNode.Method">
            <summary>
            方法名。
            </summary>
        </member>
        <member name="T:XMS.Core.ServiceInvokeChain">
            <summary>
            表示服务调用链。
            </summary>
        </member>
        <member name="M:XMS.Core.ServiceInvokeChain.GetFromRequest(System.Web.HttpContext,System.ServiceModel.OperationContext)">
            <summary>
            从请求中获取并生成ServiceInvokeChain调用链对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Configuration.ServiceModel.RemoteConfigFile">
            <summary>
            表示一个远程配置服务器上定义的配置文件。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.FileName">
            <summary>
            获取或设置远程配置文件的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.Content">
            <summary>
            获取或设置远程配置文件的内容。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.Description">
            <summary>
            获取或设置远程配置文件的说明。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.CreateTime">
            <summary>
            获取或设置远程配置文件的创建时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ServiceModel.RemoteConfigFile.LastUpdateTime">
            <summary>
            获取或设置远程配置文件的最近更新时间。
            </summary>
        </member>
        <member name="T:XMS.Core.Security.BaseAuthorizationService">
            <summary>
            IAuthorizationService 接口的基础实现。
            </summary>
        </member>
        <member name="T:XMS.Core.Security.IAuthorizationService">
            <summary>
            授权服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Security.IAuthorizationService.GetUserAuthorization(System.Int32,System.Int32)">
            <summary>
            根据用户 Id 和 组织 Id 获取 UserAuthorization 对象。
            </summary>
            <param name="userId">用户 Id。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserAuthorization 对象。</returns>
        </member>
        <member name="M:XMS.Core.Security.BaseAuthorizationService.#ctor">
            <summary>
            初始化 BaseAuthorizationService 的构造函数。
            </summary>
        </member>
        <member name="M:XMS.Core.Security.BaseAuthorizationService.GetUserAuthorization(System.Int32,System.Int32)">
            <summary>
            根据用户 Id 和 组织 Id 获取 UserAuthorization 对象。
            </summary>
            <param name="userId">用户 Id。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserAuthorization 对象。</returns>
        </member>
        <member name="M:XMS.Core.Security.BaseAuthorizationService.GetUserAuthorizationInternal(System.Int32,System.Int32)">
            <summary>
            根据用户 Id 和 组织 Id 获取 UserAuthorization 对象的内部实现。
            </summary>
            <param name="userId">用户 Id。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserAuthorization 对象。</returns>
        </member>
        <member name="T:XMS.Core.Caching.Memcached.CustomMemcachedClientSection">
            <summary>
            Configures the <see cref="T:MemcachedClient"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Servers">
            <summary>
            Returns a collection of Memcached servers which can be used by the client.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.SocketPool">
            <summary>
            Gets or sets the configuration of the socket pool.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Authentication">
            <summary>
            Gets or sets the configuration of the authenticator.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.NodeLocator">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.IMemcachedNodeLocator"/> which will be used to assign items to Memcached nodes.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.KeyTransformer">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.IMemcachedKeyTransformer"/> which will be used to convert item keys for Memcached.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Transcoder">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.ITranscoder"/> which will be used serialzie or deserialize items.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.PerformanceMonitor">
            <summary>
            Gets or sets the <see cref="T:Enyim.Caching.Memcached.IPerformanceMonitor"/> which will be used monitor the performance of the client.
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.CustomMemcachedClientSection.Protocol">
            <summary>
            Gets or sets the type of the communication between client and server.
            </summary>
        </member>
        <member name="T:XMS.Core.StringHelper">
            <summary>
            常用的String类的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.StringHelper.ToHtmlEncode(System.String)">
            <summary>
            返回对指定字符串进行 HtmlEncode 后的编码
            </summary>
            <param name="value">要编码的字符串。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToHtmlEncode(System.String,System.Boolean)">
            <summary>
            返回对指定字符串进行 HtmlEncode 后的编码
            </summary>
            <param name="value">要编码的字符串。</param>
            <param name="replaceNewline">是否将换行符替换成 br。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToHtmlAttributeEncode(System.String)">
            <summary>
            将当前字符串转换为 Html Attribute 编码格式，转换后的字符串可以出现在 Html 标签的属性或 JS 脚本的字符串中；
            该转换首先调用 HttpUtility.HtmlEncode 对字符串进行编码，然后，将未编码的转义字符 “\” 替换为 “\\”
            </summary>
            <param name="value">要编码的文本。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSafeHtml(System.String)">
            <summary>
            获取安全的Html字符串，过滤可能引起XSS注入的html代码
            用于保存富文本时使用
            </summary>
            <param name="value">要转换的文本。</param>
            <returns>转换后的文本。</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.StringHelper.ToDBText(System.String)" -->
        <member name="M:XMS.Core.StringHelper.ToEscapedSQLLike(System.String)">
            <summary>
            返回转义的 SQL Like 子句。
            </summary>
            <param name="value">要转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSafeSQLLike(System.String)">
            <summary>
            返回安全的 SQL Like 子句。
            </summary>
            <param name="value">要处理的字符串。</param>
            <returns>处理后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSafeSQLSortField(System.String)">
            <summary>
            返回安全的 SQL 排序字段。
            </summary>
            <param name="value">要转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToDBC(System.String)">
            <summary>
            全角转半角。
            </summary>
            <param name="value">要转换的字符串。</param>
            <returns>转换以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToSBC(System.String)">
            <summary>
            半角转全角。
            </summary>
            <param name="value">要转换的字符串。</param>
            <returns>转换以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.FastToUtf8Bytes(System.String)">
            <summary>
            Skip the encoding process for 'safe strings' 
            </summary>
            <param name="strVal"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GetFileNameWithoutExtension(System.String)">
            <summary>
            取得不带文件后缀的文件名
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GetParentDirectory(System.String)">
            <summary>
            取得父目录
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SplitOnFirst(System.String,System.String)">
            <summary>
            按照needle的位置，把字符串分成两截，从后面往前找needle的位置。找不到needle，返回原字符串.如原字符串是空白或空，返会长度为零的数组
            </summary>
            <param name="strVal"></param>
            <param name="needle"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SplitOnLast(System.String,System.Char)">
            <summary>
            按照needle的位置，把字符串分成两截，从前面往前找needle的位置。找不到needle，返回原字符串.如原字符串是空白或空，返会长度为零的数组
            </summary>
            <param name="strVal"></param>
            <param name="needle"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.StartWithIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写的StartWith
            </summary>
            <param name="text"></param>
            <param name="startsWith"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.EndWithIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写的EndWith
            </summary>
            <param name="text"></param>
            <param name="endsWith"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.CompareIgnoreCase(System.String,System.String)">
            <summary>
            Compares two specified System.String objects using the specified rules, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SafeSubstring(System.String,System.Int32)">
            <summary>
            安全返回子字符串。跨界不会爆掉
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            安全返回子字符串。跨界不会爆掉
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToEnum``1(System.String)">
            <summary>
            找不到枚举值会爆掉
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            是不是空值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.FormatWith(System.String,System.Object[])">
            <summary>
            调用String.Format
            </summary>
            <param name="text"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.WellFormatToHtml(System.String)">
            <summary>
            将指定文本转换为一个可在 Web 页面中安全显示的 Html。
            此转换中将 \r、\n 或 它们的组合替换为 br。
            </summary>
            <param name="value">要格式化的字符串。</param>
            <returns>格式化以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.WellFormatToText(System.String)">
            <summary>
            将指定文本转换为保持基本段落格式的纯文本。
            此转换中将 br p 替换为 \r\n ，忽略其它 html 标签。
            </summary>
            <param name="value">要格式化的字符串。</param>
            <returns>格式化以后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.CountOccurrencesOf(System.String,System.Char)">
            <summary>
            统计needle的个数
            </summary>
            <param name="text"></param>
            <param name="needle"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.AntiXSS(System.String)">
            <summary>
            移除字符串中所有危险的 HTML 代码，防止跨站脚本攻击。
            </summary>
            <param name="value">要进行反注入处理的字符串。</param>
            <returns>反注入处理后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.FilterSensitiveWords(System.String)">
            <summary>
            移除字符串中所有敏感词。
            </summary>
            <param name="value">要进行敏感词过滤的字符串。</param>
            <returns>敏感词过滤后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToBoolean(System.String,System.Boolean)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回指定的默认值或者 System.Boolean 类型的默认值 false。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableBoolean(System.String)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToEnum``1(System.String,``0)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回指定的默认值或者 System.Boolean 类型的默认值 false。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableEnum``1(System.String)">
            <summary>
            尝试将逻辑值的字符串表示形式转换为它的等效 System.Boolean，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的逻辑值的字符串。</param>
            <returns>与逻辑值的字符串表示形式等效的 System.Boolean,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToChar(System.String,System.Char)">
            <summary>
            尝试将字符串的值转换为它的等效 Unicode 字符，如果转换失败，则返回指定的默认值或者 System.Char 类型的默认值。
            </summary>
            <param name="value">包含要转换的 Unicode 字符的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与字符的字符串表示形式等效的 System.Char,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableChar(System.String)">
            <summary>
            尝试将字符串的值转换为它的等效 Unicode 字符，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的 Unicode 字符的字符串。</param>
            <returns>与字符的字符串表示形式等效的 System.Char,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDateTime(System.String,System.DateTime)">
            <summary>
            尝试将时间的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回指定的默认值或者 System.DateTime 类型的默认值。
            </summary>
            <param name="value">包含要转换的时间的字符串。该字符串使用 System.Globalization.DateTimeStyles.None 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider,System.DateTime)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回指定的默认值或者 System.DateTime 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.DateTimeStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.DateTimeStyles.None。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDateTime(System.String)">
            <summary>
            尝试将时间的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的时间的字符串。该字符串使用 System.Globalization.DateTimeStyles.None 样式来进行解释。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDateTime(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.DateTime，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.DateTimeStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.DateTimeStyles.None。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与时间的字符串表示形式等效的 System.DateTime,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToTimeSpan(System.String,System.TimeSpan)">
            <summary>
            尝试将时间间隔的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回指定的默认值或者 System.TimeSpan 类型的默认值。
            </summary>
            <param name="value">包含要转换的时间的字符串。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间间隔的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToTimeSpan(System.String,System.IFormatProvider,System.TimeSpan)">
            <summary>
            尝试将时间间隔的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回指定的默认值或者 System.TimeSpan 类型的默认值。
            </summary>
            <param name="value">包含要转换的时间的字符串。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与时间间隔的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableTimeSpan(System.String)">
            <summary>
            尝试将时间的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的时间的字符串。</param>
            <returns>与时间的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableTimeSpan(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.TimeSpan，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与时间的字符串表示形式等效的 System.TimeSpan,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDecimal(System.String,System.Decimal)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回指定的默认值或者 System.Decimal 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Number 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回指定的默认值或者 System.Decimal 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Number。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDecimal(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Number 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Decimal，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Number。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Decimal,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSingle(System.String,System.Single)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回指定的默认值或者 System.Single 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.float 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回指定的默认值或者 System.Single 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSingle(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.float 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Single，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Single,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDouble(System.String,System.Double)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回指定的默认值或者 System.Double 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Float 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回指定的默认值或者 System.Double 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDouble(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Float 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Double，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Float。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Double,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToByte(System.String,System.Byte)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回指定的默认值或者 System.Byte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回指定的默认值或者 System.Byte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableByte(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Byte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Byte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt16(System.String,System.Int16)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回指定的默认值或者 System.Int16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回指定的默认值或者 System.Int16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt16(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Int16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt32(System.String,System.Int32)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回指定的默认值或者 System.Int32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回指定的默认值或者 System.Int32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt32(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Int32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt64(System.String,System.Int64)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回指定的默认值或者 System.Int64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回指定的默认值或者 System.Int64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt64(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.Int64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.Int64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSByte(System.String,System.SByte)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回指定的默认值或者 System.SByte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回指定的默认值或者 System.SByte 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSByte(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.SByte，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.SByte,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt16(System.String,System.UInt16)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回指定的默认值或者 System.UInt16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回指定的默认值或者 System.UInt16 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt16(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt16，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt16,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt32(System.String,System.UInt32)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回指定的默认值或者 System.UInt32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回指定的默认值或者 System.UInt32 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt32(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt32，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt32,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt64(System.String,System.UInt64)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回指定的默认值或者 System.UInt64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回指定的默认值或者 System.UInt64 类型的默认值。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <param name="defaultValue">在转换失败时应返回的默认值。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回默认值。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt64(System.String)">
            <summary>
            尝试将数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用 System.Globalization.NumberStyles.Integer 样式来进行解释。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ConvertToNullableUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            尝试将指定样式与区域性特定格式的数字的字符串表示形式转换为它的等效 System.UInt64，如果转换失败，则返回 null。
            </summary>
            <param name="value">包含要转换的数字的字符串。该字符串使用由 style 指定的样式来进行解释。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示可出现在 value 中的样式元素。一个要指定的典型值为 System.Globalization.NumberStyles.Integer。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 value 的区域性特定的格式设置信息。如果 provider 为 null，则使用当前的线程区域性。</param>
            <returns>与数字的字符串表示形式等效的 System.UInt64,如果转换成功，则返回该值，否则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrim(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符的所有前导和尾部匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除特定字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除特定字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrimStart(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符的所有前导匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除前导匹配字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除前导匹配字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrimEnd(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符的所有尾部匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除尾部匹配字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除尾部匹配字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoTrimAny(System.String,System.Char[])">
            <summary>
            移除字符串中指定的一组字符任意位置的匹配项，不用考虑字符串是否为 null 或 空字符串。
            </summary>
            <param name="value">要从中移除任意匹配字符的字符串。</param>
            <param name="trimChars">要移除的一组字符，不指定则只移除空格字符。</param>
            <returns>移除任意匹配字符后产生的新字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoSubStringByByte(System.String,System.Int32,System.String)">
            <summary>
            截取字符串中指定字节长度的子字符串，当截取后的字符串长度小于原始字符串长度时附加指定的后缀。
            </summary>
            <param name="value">所要截取的字符串</param>
            <param name="byteCount">截取字符串的字节长度。</param>
            <param name="suffix">后缀</param>
            <returns>截取后且附加了指定后缀的字符串</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoSubStringByByte(System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            截取字符串中指定字节长度的子字符串，当截取后的字符串长度小于原始字符串长度时附加指定的后缀。
            </summary>
            <param name="value">所要截取的字符串</param>
            <param name="byteCount">截取字符串的字节长度。</param>
            <param name="encoding">编码格式。</param>
            <param name="suffix">后缀</param>
            <returns>截取后且附加了指定后缀的字符串</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoSubStringByCharacter(System.String,System.Int32,System.String)">
            <summary>
            截取字符串中指定字符长度的子字符串，当截取后的字符串长度小于原始字符串长度时附加指定的后缀。
            </summary>
            <param name="value">所要截取的字符串</param>
            <param name="doubleByteCount">截取字符串的字符长度。</param>
            <param name="suffix">后缀</param>
            <returns>截取后且附加了指定后缀的字符串</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoEncryp(System.String)">
            <summary>
            加密指定的字符串，如果字符串为 null、空字符串 或者解密过程中发生错误则返回空字符串（即 String.Empty)。
            </summary>
            <param name="value">要加密的字符串。</param>
            <returns>加密后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.DoDecrypt(System.String)">
            <summary>
            解密指定的字符串，如果字符串为 null、空字符串 或者解密过程中发生错误则返回空字符串（即 String.Empty)。
            </summary>
            <param name="value">要解密的字符串。</param>
            <returns>解密后的字符串。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsEmail(System.String)">
            <summary>
            判断字符串是否为邮件地址，用于判断邮件格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Email”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是邮件地址，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsTelephone(System.String)">
            <summary>
            判断字符串是否为电话（固话）号码，用于判断电话（固话）号码格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Telephone”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是电话（固话）号码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsMobilePhone(System.String)">
            <summary>
            判断字符串是否为手机号码，用于判断手机号码格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_MobilePhone”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是手机号码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsPostcode(System.String)">
            <summary>
            判断字符串是否为邮编，用于判断邮编格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Postcode”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是手机号码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsChinese(System.String)">
            <summary>
            判断字符串是否为中文字符串，用于判断中文字符串格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Chinese”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是中文字符串，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsOnlyDigital(System.String)">
            <summary>
            是否是纯数字字符串，包含任何非数字字符均返回false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsOnlyEnglishLetter(System.String)">
            <summary>
            是否是纯英文字符串，包含任何非英文字符均返回false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsOnlyEnglishLetterOrDigital(System.String)">
            <summary>
            是否是纯英文或者数字字符串，包含任何非英文或者数字字符均返回false
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ContainsChinese(System.String)">
            <summary>
            判断字符串是否包含中文字符，用于判断中文字符串格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Chinese”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是中文字符串，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsUrl(System.String)">
            <summary>
            判断字符串是否为 Url，用于判断 Url 格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Url”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是 Url，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsUri(System.String)">
            <summary>
            判断字符串是否为 Uri，用于判断 Uri 格式的正则可在 AppSettings.Config 中进行配置。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是 Uri，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsUri(System.String,XMS.Core.UriType)">
            <summary>
            判断字符串是符合指定类型的 Uri，用于判断 Uri 格式的正则可在 AppSettings.Config 中进行配置。
            </summary>
            <param name="value">要判断的字符串。</param>
            <param name="value">用于判断字符串是否符合的 Uri 类型。</param>
            <returns>如果字符串是指定类型的 Uri，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsIP4(System.String)">
            <summary>
            判断字符串是否为 IP4，用于判断中文字符串格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_IP4”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是 IP4，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.IsPassword(System.String)">
            <summary>
            判断字符串是否为 Password，用于判断密码格式的正则可在 AppSettings.Config 中进行配置，配置键为“Reg_Password”。
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>如果字符串是有效密码，则返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.CombineUrl(System.String,System.String)">
            <summary>
            将基 URL 和 相对 URL 合并，忽略前后的 / 字符
            </summary>
            <param name="baseUrl">基 URL。</param>
            <param name="relativeUrl">相对 URL。</param>
            <returns>合并后的 URL。</returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GenerateRandom(System.Int32)">
            <summary>
            生成一个具有指定长度的随机字符串，该字符串由 _、数字、小写字母、大写字母 组成
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.GenerateRandom(System.Int32,System.String)">
            <summary>
            生成一个具有指定长度的随机字符串，该字符串由指定字符串限定范围内的字符组成
            </summary>
            <param name="length">长度</param>
            <param name="charsRange">一个字符串，限定随机字符串中可能出现的字符的范围</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.StringHelper.ToVerifyCodeImage(System.String)">
            <summary>
            将字符串输出为验证码图片字节数组
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:XMS.Core.UriType">
            <summary>
            Url 的类型。
            </summary>
        </member>
        <member name="F:XMS.Core.UriType.Default">
            <summary>
            Http、Https 或者未指定头的 url
            </summary>
        </member>
        <member name="T:XMS.Core.Web.JsonHelper">
            <summary>
            JSON 助手类
            </summary>
        </member>
        <member name="M:XMS.Core.Web.JsonHelper.ConvertJsonStringToObject``1(System.String)">
            <summary>
            将 JSON 字符串转换为指定类型的对象。
            </summary>
            <typeparam name="T">JSON 字符串表示的类型。</typeparam>
            <param name="strJson">要转换的 JSON 字符串。</param>
            <returns>JSON 字符串转换后的对象。</returns>
        </member>
        <member name="M:XMS.Core.Web.JsonHelper.ConvertJsonTypeToObject``1(System.Object)">
            <summary>
            通过 JSON 序列化机制，将给定对象转换为指定类型对象。
            </summary>
            <param name="objJson">要转换的原始对象。</param>
            <returns>指定类型的新对象。</returns>
        </member>
        <member name="M:XMS.Core.Web.JsonHelper.ConvertObjectToJsonString(System.Object)">
            <summary>
            将指定对象转换为 JSON 字符串表示形式。
            </summary>
            <param name="obj">要转换的对象。</param>
            <returns>指定对象的 JSON 字符串表示形式。</returns>
        </member>
        <member name="T:XMS.Core.StringWellFormatType">
            <summary>
            定义用于 StringInterceptAttribute 的格式化选项。
            </summary>
        </member>
        <member name="F:XMS.Core.StringWellFormatType.None">
            <summary>
            不进行格式化。
            </summary>
        </member>
        <member name="F:XMS.Core.StringWellFormatType.Text">
            <summary>
            格式化为文本
            </summary>
        </member>
        <member name="F:XMS.Core.StringWellFormatType.Html">
            <summary>
            格式化为 Html
            </summary>
        </member>
        <member name="T:XMS.Core.StringInterceptTarget">
            <summary>
            定义 StringInterceptAttribute 的适用目标，默认值为 Input，即全部都适用。
            </summary>
        </member>
        <member name="F:XMS.Core.StringInterceptTarget.Input">
            <summary>
            仅输入时适用。
            </summary>
        </member>
        <member name="F:XMS.Core.StringInterceptTarget.Output">
            <summary>
            仅输出时适用。
            </summary>
        </member>
        <member name="F:XMS.Core.StringInterceptTarget.InputAndOutput">
            <summary>
            输入和输出时适用。
            </summary>
        </member>
        <member name="T:XMS.Core.StringInterceptAttribute">
            <summary>
            定义字符串拦截特性，默认只启用 TrimSpace 选项。
            </summary>
            <example>
            [StringIntercept] // 等价于 [StringIntercept(TrimSpace=true, AntiXSS=false, FilterSensitiveWords=true)]，对整个类的输入参数和返回值进行整体控制
            public class TestService : ITestService
            {
            	[StringIntercept] // 等价于 [StringIntercept(TrimSpace=true, AntiXSS=false, FilterSensitiveWords=true)]，对整个方法的输入参数和返回值进行整体控制
            	[return:StringIntercept(TrimSpace=true, AntiXSS=true, FilterSensitiveWords=true)] // 对方法的返回值进行个别控制
            	public string Test(
            			[StringIntercept(TrimSpace=true, AntiXSS=true, FilterSensitiveWords=true)] // 对参数的返回值进行个别控制
            			object value, 
            			[StringIntercept(TrimSpace=true, AntiXSS=false, FilterSensitiveWords=true)] // 对参数的返回值进行个别控制
            			string b, 
            			string c, object o
            		)
            	{
            		return (string)value;
            	}
            }
            </example>
        </member>
        <member name="M:XMS.Core.StringInterceptAttribute.#ctor">
            <summary>
            初始化 StringInterceptAttribute 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.TrimSpace">
            <summary>
            获取或设置一个值，该值指示要对目标字符串调用 String.Trim 方法进行处理。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.AntiXSS">
            <summary>
            获取或设置一个值，该值指示要对目标字符串进行反注入处理。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.WellFormatType">
            <summary>
            获取或设置一个值，该值指示要对目标字符串进行友好格式化。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.FilterSensitiveWords">
            <summary>
            获取或设置一个值，该值指示要对目标字符串进行敏感词过滤处理。
            </summary>
        </member>
        <member name="P:XMS.Core.StringInterceptAttribute.Target">
            <summary>
            获取或设置一个值，该值指示要进行拦截的适用范围。
            </summary>
        </member>
        <member name="T:XMS.Core.IgnoreStringInterceptAttribute">
            <summary>
            指定特定的类型、属性忽略字符串拦截机制（即 禁止拦截）
            </summary>
        </member>
        <member name="M:XMS.Core.IgnoreStringInterceptAttribute.#ctor">
            <summary>
            初始化 IgnoreStringInterceptAttribute 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.Formatter.TypeFormatter">
            <summary>
            为系统基础类型（字符串、基元、枚举、日期时间、数组、字典、集合等）之外的类型提供自定义的类型格式化器。
            </summary>
        </member>
        <member name="M:XMS.Core.Formatter.TypeFormatter.Format(System.Object,System.Int32,System.Boolean)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="depth">当前对象在整个格式化进程中的深度。</param>
            <param name="isKeyOrPropertyName">指示该对象是否以字典的键或者复杂对象的属性名形式存在。</param>
            <returns>对象格式化后的字符串表示形式。</returns>
        </member>
        <member name="M:XMS.Core.Formatter.TypeFormatter.Format(System.Object,System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>
            格式化指定的对象。
            </summary>
            <param name="o">要格式化的对象。</param>
            <param name="o">StringBuilder。</param>
            <param name="depth">当前对象在整个格式化进程中的深度。</param>
            <param name="isKeyOrPropertyName">指示该对象是否以字典的键或者复杂对象的属性名形式存在。</param>
        </member>
        <member name="P:XMS.Core.Formatter.TypeFormatter.SupportedType">
            <summary>
            获取当前类型格式化器支持的类型。
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.ClientChannelEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Pipes.PipeServiceClientChannel"/> 对象的 <see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.Closed"/>、<see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.DataReceived"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Pipes.ClientChannelEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Pipes.PipeServiceClientChannel"/> 类的 <see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.Closed"/>、<see cref="E:XMS.Core.Pipes.PipeServiceClientChannel.DataReceived"/> 事件提供数据。 
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.ClientChannelEventArgs.#ctor(XMS.Core.Pipes.PipeServiceClientChannel)">
            <summary>
            使用指定的配置文件名称、配置文件物理路径初始化 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/> 类的新实例。
            </summary>
            <param name="channel">事件相关的客户端。</param>
        </member>
        <member name="P:XMS.Core.Pipes.ClientChannelEventArgs.Channel">
            <summary>
            获取事件相关的客户端。
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.ClientConnectEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Pipes.PipeService"/> 对象的 <see cref="E:XMS.Core.Pipes.PipeService.ClientConnected"/>、<see cref="E:XMS.Core.Pipes.PipeService.ClientClosed"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Pipes.ClientConnectEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Pipes.PipeService"/> 类的 <see cref="E:XMS.Core.Pipes.PipeService.ClientConnected"/>、<see cref="E:XMS.Core.Pipes.PipeService.ClientClosed"/> 事件提供数据。 
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.ClientConnectEventArgs.#ctor(XMS.Core.Pipes.PipeServiceClient)">
            <summary>
            初始化 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/> 类的新实例。
            </summary>
            <param name="client">事件相关的客户端。</param>
        </member>
        <member name="P:XMS.Core.Pipes.ClientConnectEventArgs.Client">
            <summary>
            获取事件相关的客户端。
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.DataReceivedEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Pipes.PipeService"/> 对象的 <see cref="E:XMS.Core.Pipes.PipeService.DataReceived"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.DataReceivedEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Pipes.DataReceivedEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Pipes.PipeService"/> 类的 <see cref="E:XMS.Core.Pipes.PipeService.DataReceived"/>事件提供数据。 
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.DataReceivedEventArgs.#ctor(XMS.Core.Pipes.CallbackState)">
            <summary>
            使用指定的配置文件名称、配置文件物理路径初始化 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/> 类的新实例。
            </summary>
            <param name="callbackState">事件相关的回调状态数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.DataReceivedEventArgs.Reply">
            <summary>
            通知消息总线客户端消息处理成功并从消息持久化存储中删除消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.Channel">
            <summary>
            获取事件相关的客户端。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.Data">
            <summary>
            获取事件相关的数据。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.IsReplied">
            <summary>
            获取一个值，该值指示是否以为当前接收到的数据进行应答。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.ReturnValue">
            <summary>
            事件处理结束后的返回数据。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.DataReceivedEventArgs.ExtraError">
            <summary>
            获取并设置在事件处理过程中调用 Reply 方法之后发生的附加错误，该错误仅当 IsReplied 为 true 时能够设置成功。
            </summary>
        </member>
        <member name="T:XMS.Core.Json.JsonSerializer">
            <summary>
            JSON 序列化器。
            </summary>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize``1(System.String)">
            <summary>
            将指定的 json 字符串反序列化为泛型参数 T 限定类型的对象。
            注意：反序列化时忽略大小写。
            </summary>
            <typeparam name="T">反序列化目标对象的类型。</typeparam>
            <param name="input">要反序列化的 json 字符串。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            将指定的 json 字符串反序列化为 targetType 限定类型的对象。
            </summary>
            <param name="input">要反序列化的 json 字符串。</param>
            <param name="targetType">反序列化目标对象的类型。。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize``1(System.String,System.String[])">
            <summary>
            将指定的 json 字符串反序列化为泛型参数 T 限定类型的对象。
            </summary>
            <typeparam name="T">反序列化目标对象的类型。</typeparam>
            <param name="input">要反序列化的 json 字符串。</param>
            <param name="extraTimeFormats">额外支持的时间格式，如 new string[]{"yyyy-MM-dd HH:mm:ss fff", "yyyyMMddHHmmss.fff"}。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Deserialize(System.String,System.Type,System.String[])">
            <summary>
            将指定的 json 字符串反序列化为 targetType 限定类型的对象。
            </summary>
            <param name="input">要反序列化的 json 字符串。</param>
            <param name="targetType">反序列化目标对象的类型。。</param>
            <param name="extraTimeFormats">额外支持的时间格式，如 new string[]{"yyyy-MM-dd HH:mm:ss fff", "yyyyMMddHHmmss.fff"}。</param>
            <returns>反序列化产生的对象。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间采用 .net 内置的默认格式。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,XMS.Core.Json.TimeFormat)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,XMS.Core.Json.TimeFormat,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,XMS.Core.Json.TimeFormat,System.String,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
            <param name="customTimeSpanFormat">自定义时间间隔序列化格式。</param>
            <returns>序列化产生的 json 字符串。</returns>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间采用 .net 内置的默认格式。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder,XMS.Core.Json.TimeFormat)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder,XMS.Core.Json.TimeFormat,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
        </member>
        <member name="M:XMS.Core.Json.JsonSerializer.Serialize(System.Object,System.Text.StringBuilder,XMS.Core.Json.TimeFormat,System.String,System.String)">
            <summary>
            将指定的对象序列化为 json 字符串并将个字符串追加到 output 的结尾，日期时间由 timeFormat 指定。
            </summary>
            <param name="obj">要对其进行 json 序列化的对象。</param>
            <param name="output">用来存放序列化产生的 json 字符串的 StringBuilder 对象。。</param>
            <param name="timeFormat">日期时间属性或字段的序列化格式。</param>
            <param name="customDateTimeFormat">自定义日期序列化格式。</param>
            <param name="customTimeSpanFormat">自定义时间间隔序列化格式。</param>
        </member>
        <member name="T:XMS.Core.Json.TimeFormat">
            <summary>
            表示在 JSON 序列化过程中日期时间的序列化格式。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.Default">
            <summary>
            我们的统一默认日期时间格式，为含有毫秒数的字符串格式，与 StringWithMilliseconds 相同。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.StringWithMilliseconds">
            <summary>
            将日期时间格式化为含有毫秒数的字符串格式，具体格式为：MM/dd/yyyy HH:mm:ss.fff，此格式可适用于 .net、java、apple平台，但不能通过 js 的 Date 对象直接初始化。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.StringNoneMilliseconds">
            <summary>
            将日期时间格式化为不含有毫秒数的字符串格式，具体格式为：MM/dd/yyyy HH:mm:ss，此格式可适用于全部平台，，也能通过 js 的 Date 对象直接初始化。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.MillisecondsFrom1970L">
            <summary>
            将日期时间格式化为自1970-1-1 0:0:0 以来的毫秒数，此格式可适用于所有平台，但每个平台都要做相应转换才能当成日期进行使用。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.Javascript">
            <summary>
            将日期时间格式化为 new Date(1970年以来的毫秒数)，然后可以直接使用 eval 得到它的值。
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.NetDefault">
            <summary>
            将日期时间格式化为.net 默认格式，\/Date(1970年以来的毫秒数)\/
            </summary>
        </member>
        <member name="F:XMS.Core.Json.TimeFormat.Custom">
            <summary>
            自定义，必须同时指定 customTimeFormat 参数。
            </summary>
        </member>
        <member name="T:XMS.Core.Business.SortDirection">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="F:XMS.Core.Business.SortDirection.Asc">
            <summary>
            升序。
            </summary>
        </member>
        <member name="F:XMS.Core.Business.SortDirection.Desc">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Configuration.RegionElement">
            <summary>
            表示缓存分区的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.RegionElement.#ctor">
            <summary>
            初始化 RegionElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.RegionElement.#ctor(System.String,System.String,System.String)">
            <summary>
            初始化 RegionElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.RegionElement.#ctor(System.String)">
            <summary>
            初始化 RegionElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.RegionName">
            <summary>
            缓存分区名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.Position">
            <summary>
            缓存位置
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.DependencyFile">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.Capacity">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.AsyncTimeToLive">
            <summary>
            缓存项的生存周期。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.RegionElement.AsyncUpdateInterval">
            <summary>
            缓存项的异步更新时间间隔。
            </summary>
        </member>
        <member name="T:XMS.Core.Web.ImageHelper">
            <summary>
            图片助手类。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ImageHelper.CheckFileAndReturnExtension(System.IO.Stream)">
            <summary>
            检查指定的流是否图片并返回其扩展名。
            </summary>
            <param name="stream">要检查的流。</param>
            <returns>图片的扩展名。</returns>
        </member>
        <member name="T:XMS.Core.WCF.IOCBehaviorSection">
            <summary>
            IOCBehavior 对应的配置节. 
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehaviorSection.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.IOCBehaviorSection"/> 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehaviorSection.CreateBehavior">
            <summary>
            创建 <see cref="T:XMS.Core.WCF.IOCBehavior"/> 行为的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.WCF.IOCBehaviorSection.BehaviorType">
            <summary>
            获取 <see cref="T:XMS.Core.WCF.IOCBehavior"/> 的类型。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.IOCBehaviorSection.ShowExceptionDetailToClient">
            <summary>
            获取或设置一个值，该值指示是否应向客户端展示异常详细信息。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.Client.ClientChannelCacheMode">
            <summary>
            
            </summary>
            <remarks>
            PerCall 模式，每次调用成功后都会关闭通道的连接，下次调用会重新打开连接（如果连接已经被关闭）。
            PerWebRequest 模式，在请求结束后自动关闭连接。
            PerThread 模式，在线程结束后自动关闭连接。
            PerEndPoint 模式，所有请求都使用同一个连接，只有在发生网络错误时才会强行中断连接。
            </remarks>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerCall">
            <summary>
            针对每次客户端调用(即请求执行服务中的任何一个方法都认为是一次调用)重新创建一个通道及其服务代理对象以执行请求。
            这种情况下，调用完成后会自动关闭连接。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerRequest">
            <summary>
            针对每次请求重新创建一个通道及其服务代理对象；
            在 Web 环境中，该请求指 HttpRequest，在 服务环境中，该请求指服务上下文，Web 环境优先；
            其它环境中，自动转为 PerCall 模式。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerThread">
            <summary>
            针对每个独立的线程重新创建一个通道及其服务代理对象
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.PerEndPoint">
            <summary>
            针对每个服务终端点都会在客户端缓存一个服务代理对象，这样所有请求都将通过此服务代理对象进行。
            这种情况下，此代理对象与服务终端点的连接将是长久保持的，除非发生错误才会进行中断。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.ClientChannelCacheMode.Pool">
            <summary>
            对象池模式
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.Client.ClientChannelCacheModeAttribute">
            <summary>
            指定一个服务契约在客户端的缓存模式
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.Client.ClientChannelCacheModeAttribute.ClientChannelCacheMode">
            <summary>
            获取一个值，该值指示客户端通道的缓存模式。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.Client.ServiceRequestDiagnosis">
            <summary>
            服务请求诊断对象，该对象用于记录服务请求期间相关的各种数据，这些数据可用于诊断、调试服务请求过程中出现的各种错误。
            </summary>
        </member>
        <member name="T:XMS.Core.SerialNumber.ISerialNumberGenerator">
            <summary>
            定义序列号生成器所共有的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.SerialNumber.ISerialNumberGenerator.GetSerialNumber">
            <summary>
            获取序列号。
            </summary>
            <returns>序列号。</returns>
        </member>
        <member name="P:XMS.Core.SerialNumber.ISerialNumberGenerator.GeneratorKey">
            <summary>
            获取序列号生成器的键。
            </summary>
        </member>
        <member name="P:XMS.Core.SerialNumber.ISerialNumberGenerator.PoolSize">
            <summary>
            获取序列号池的大小。
            </summary>
        </member>
        <member name="T:XMS.Core.SerialNumber.ISerialNumber">
            <summary>
            表示一个序列号。
            </summary>
        </member>
        <member name="M:XMS.Core.SerialNumber.ISerialNumber.Format(System.String,System.Int32)">
            <summary>
            将当前序列号的值格式化为由 numberLength 参数指定长度的字符串，不足部分补'0'，然后将 format 参数指定的字符串中的格式项替换为该字符串。
            </summary>
            <param name="format">用于对当前序列号进行格式化的字符串。</param>
            <param name="numberLength">当前序列号的值格式化后的长度。</param>
            <returns>格式化后的序列号。</returns>
            <example>
            执行 SerialNumberGeneratorManager.Instance.GetSerialNumberGenerator("20120214").Format("20120214{0}",8) 将得到 2012021400000001、2012021400000002 等。
            </example>
        </member>
        <member name="M:XMS.Core.SerialNumber.ISerialNumber.FormatWithRandom(System.String,System.Int32)">
            <summary>
            根据当前序列号的值生成一个不超过 10 的 numberLength 次方的唯一随机数，然后将该随机数格式化为由 numberLength 参数指定长度的字符串，不足部分补'0'，最后将 format 参数指定的字符串中的格式项替换为该字符串。
            </summary>
            <param name="format">用于对当前序列号进行格式化的字符串。</param>
            <param name="numberLength">当前序列号的值格式化后的长度。</param>
            <returns>格式化后的具有随机数的序列号。</returns>
            <example>
            执行 SerialNumberGeneratorManager.Instance.GetSerialNumberGenerator("20120214").FormatWithRandom("20120214{0}",8) 将得到 2012021434657823、2012021476432345 等。
            </example>
        </member>
        <member name="P:XMS.Core.SerialNumber.ISerialNumber.Value">
            <summary>
            获取该序列号的数字值
            </summary>
        </member>
        <member name="T:XMS.Core.SerialNumber.DefaultSerialNumber">
            <summary>
            ISerialNumber 接口的默认实现。
            </summary>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumber.#ctor(System.Int64)">
            <summary>
            初始化 DefaultSerialNumber 的新实例。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumber.Format(System.String,System.Int32)">
            <summary>
            将当前序列号的值格式化为由 numberLength 参数指定长度的字符串，不足部分补'0'，然后将 format 参数指定的字符串中的格式项替换为该字符串。
            </summary>
            <param name="format">用于对当前序列号进行格式化的字符串。</param>
            <param name="numberLength">当前序列号的值格式化后的长度。</param>
            <returns>格式化后的序列号。</returns>
            <example>
            执行 SerialNumberGeneratorManager.Instance.GetSerialNumberGenerator("20120214").Format("20120214{0}",8) 将得到 2012021400000001、2012021400000002 等。
            </example>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumber.FormatWithRandom(System.String,System.Int32)">
            <summary>
            根据当前序列号的值生成一个不超过 10 的 numberLength 次方的唯一随机数，然后将该随机数格式化为由 numberLength 参数指定长度的字符串，不足部分补'0'，最后将 format 参数指定的字符串中的格式项替换为该字符串。
            </summary>
            <param name="format">用于对当前序列号进行格式化的字符串。</param>
            <param name="numberLength">当前序列号的值格式化后的长度。</param>
            <returns>格式化后的具有随机数的序列号。</returns>
            <example>
            执行 SerialNumberGeneratorManager.Instance.GetSerialNumberGenerator("20120214").FormatWithRandom("20120214{0}",8) 将得到 2012021434657823、2012021476432345 等。
            </example>
            <remarks>
            该方法在当前序列号的值和当前序列号产生时的时间刻度（秒）的基础上生成随机数并进行格式化，满足序列编号固定长度、唯一不重复、先生成后使用、随机不可猜、不泄露商业机密的需求。
            </remarks>
        </member>
        <member name="P:XMS.Core.SerialNumber.DefaultSerialNumber.Value">
            <summary>
            获取该序列号的数字值
            </summary>
        </member>
        <member name="T:XMS.Core.Pair`2">
            <summary>
            表示用于存储两个相关对象的基本结构。
            </summary>
        </member>
        <member name="M:XMS.Core.Pair`2.#ctor">
            <summary>
            初始化 Pair 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Pair`2.First">
            <summary>
            获取或设置二元结构的第一个 object。 
            </summary>
        </member>
        <member name="P:XMS.Core.Pair`2.Second">
            <summary>
            获取或设置二元结构的第二个 object。 
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessage">
            <summary>
            指示类型为消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.Id">
            <summary>
            获取一个值，该值指示消息的 Id
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.TypeId">
            <summary>
            获取一个值，该值指示消息类型编号
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.SourceAppName">
            <summary>
            获取一个值，该值指示消息的发送方 AppName
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.SourceAppVersion">
            <summary>
            获取一个值，该值指示消息的发送方 AppVersion
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.CreateTime">
            <summary>
            获取一个值，该值指示消息的创建时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessage.Body">
            <summary>
            获取一个值，该值指示消息体原始内容。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ServiceModel.Message.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ServiceModel.Message.TypeId">
            <summary>
            消息类型编号
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ServiceModel.Message.SourceAppName">
            <summary>
            消息发送方 AppName
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ServiceModel.Message.SourceAppVersion">
            <summary>
            消息发送方 AppVersion
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ServiceModel.Message.Body">
            <summary>
            消息体
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.ServiceModel.Message.CreateTime">
            <summary>
            消息创建时间
            </summary>
        </member>
        <member name="M:XMS.Core.Members.Member.RaisePropertyChanged(System.String)">
            <summary>
            支持属性变化事件
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:XMS.Core.Members.Member.GetDisplayName(System.String,System.String,System.String,XMS.Core.Members.Sex,System.String)">
            <summary>
            获取显示名，结合提供的昵称、邮箱、姓名、性别、手机号获取一个可用于在站点中向已登录用户显示的名称，如：X先生、X女士、admin@57.cn、13800138000等等。
            </summary>
            <param name="nickName"></param>
            <param name="email"></param>
            <param name="name"></param>
            <param name="sex"></param>
            <param name="mobilePhone"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Members.Member.GetAnonymousName(System.String,System.String,System.String,XMS.Core.Members.Sex,System.String)">
            <summary>
            获取匿名名称，结合提供的昵称、邮箱、姓名、性别、手机号获取一个可用于在站点中向所有用户显示的匿名名称，如：X先生、X女士、admin@57.cn、138****5678等等。
            </summary>
            <param name="nickName"></param>
            <param name="email"></param>
            <param name="name"></param>
            <param name="sex"></param>
            <param name="mobilePhone"></param>
        </member>
        <member name="M:XMS.Core.Members.Member.GetHonourName(System.String,XMS.Core.Members.Sex,System.String,System.String,System.String)">
            <summary>
            获取尊称，结合提供的姓名、性别、昵称、手机号、邮箱获取用户的尊称，适用于向用户发送短信、邮件等场景。
            </summary>
            <param name="name"></param>
            <param name="sex"></param>
            <param name="nickName"></param>
            <param name="mobilePhone"></param>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Members.Member.GetLastName(System.String)">
            <summary>
            获取姓名中的姓。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Members.Member.DisplayName">
            <summary>
            获取当前会员的显示名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Members.Member.AnonymousName">
            <summary>
            获取会员的匿名显示名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Members.Member.HonourName">
            <summary>
            获取用户的尊称。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.DefaultCustomLog">
            <summary>
            自定义日志的默认实现。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.DefaultCustomLog.ThisDeclaringType">
            <summary>
            声明的类型
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.#ctor(log4net.Core.ILogger)">
            <summary>
            初始化 DefaultCustomLogger 类的新实例
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.DefaultCustomLog.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">类别。</param>
            <param name="category">日志消息的内容。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="T:log4net.Core.CustomRepositorySelector">
            <summary>
            The default implementation of the <see cref="T:log4net.Core.IRepositorySelector"/> interface.
            </summary>
            <remarks>
            <para>
            Uses attributes defined on the calling assembly to determine how to
            configure the hierarchy for the repository.
            </para>
            </remarks>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.#ctor(System.Type)">
            <summary>
            Creates a new repository selector.
            </summary>
            <param name="defaultRepositoryType">The type of the repositories to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/></param>
            <remarks>
            <para>
            Create an new repository selector.
            The default type for repositories must be specified,
            an appropriate value would be <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="defaultRepositoryType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="defaultRepositoryType"/> does not implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified assembly.
            </summary>
            <param name="repositoryAssembly">The assembly use to lookup the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <remarks>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and the repository 
            to create can be overridden by specifying the <see cref="T:log4net.Config.RepositoryAttribute"/> 
            attribute on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            The default values are to use the <see cref="T:log4net.Repository.Hierarchy.Hierarchy"/> 
            implementation of the <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically configured using 
            any <see cref="T:log4net.Config.ConfiguratorAttribute"/> attributes defined on
            the <paramref name="repositoryAssembly"/>.
            </para>
            </remarks>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the assembly</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetRepository(System.String)">
            <summary>
            Gets the <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified repository.
            </summary>
            <param name="repositoryName">The repository to use to lookup the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The <see cref="T:log4net.Repository.ILoggerRepository"/> for the specified repository.</returns>
            <remarks>
            <para>
            Returns the named repository. If <paramref name="repositoryName"/> is <c>null</c>
            a <see cref="T:System.ArgumentNullException"/> is thrown. If the repository 
            does not exist a <see cref="T:log4net.Core.LogException"/> is thrown.
            </para>
            <para>
            Use <see cref="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.String,System.Type)"/> to create a repository.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> is <see langword="null"/>.</exception>
            <exception cref="T:log4net.Core.LogException"><paramref name="repositoryName"/> does not exist.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            Create a new repository for the assembly specified 
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.Reflection.Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the 
            <paramref name="repositoryAssembly"/>.  The default values are to use the 
            <paramref name="repositoryType"/> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute"/> 
            attributes defined on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            If a repository for the <paramref name="repositoryAssembly"/> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType"/>.
            Also the <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new repository for the assembly specified.
            </summary>
            <param name="repositoryAssembly">the assembly to use to create the repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryName">The name to assign to the created repository</param>
            <param name="readAssemblyAttributes">Set to <c>true</c> to read and apply the assembly attributes</param>
            <returns>The repository created.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.Reflection.Assembly)"/> with the
            same assembly specified will return the same repository instance.
            </para>
            <para>
            The type of the <see cref="T:log4net.Repository.ILoggerRepository"/> created and
            the repository to create can be overridden by specifying the
            <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the 
            <paramref name="repositoryAssembly"/>.  The default values are to use the 
            <paramref name="repositoryType"/> implementation of the 
            <see cref="T:log4net.Repository.ILoggerRepository"/> interface and to use the
            <see cref="P:System.Reflection.AssemblyName.Name"/> as the name of the repository.
            </para>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be automatically
            configured using any <see cref="T:log4net.Config.ConfiguratorAttribute"/> 
            attributes defined on the <paramref name="repositoryAssembly"/>.
            </para>
            <para>
            If a repository for the <paramref name="repositoryAssembly"/> already exists
            that repository will be returned. An error will not be raised and that 
            repository may be of a different type to that specified in <paramref name="repositoryType"/>.
            Also the <see cref="T:log4net.Config.RepositoryAttribute"/> attribute on the
            assembly may be used to override the repository type specified in 
            <paramref name="repositoryType"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryAssembly"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            Creates a new repository for the specified repository.
            </summary>
            <param name="repositoryName">The repository to associate with the <see cref="T:log4net.Repository.ILoggerRepository"/>.</param>
            <param name="repositoryType">The type of repository to create, must implement <see cref="T:log4net.Repository.ILoggerRepository"/>.
            If this param is <see langword="null"/> then the default repository type is used.</param>
            <returns>The new repository.</returns>
            <remarks>
            <para>
            The <see cref="T:log4net.Repository.ILoggerRepository"/> created will be associated with the repository
            specified such that a call to <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.String)"/> with the
            same repository specified will return the same repository instance.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="repositoryName"/> is <see langword="null"/>.</exception>
            <exception cref="T:log4net.Core.LogException"><paramref name="repositoryName"/> already exists.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.ExistsRepository(System.String)">
            <summary>
            Test if a named repository exists
            </summary>
            <param name="repositoryName">the named repository to check</param>
            <returns><c>true</c> if the repository exists</returns>
            <remarks>
            <para>
            Test if a named repository exists. Use <see cref="M:log4net.Core.CustomRepositorySelector.CreateRepository(System.String,System.Type)"/>
            to create a new repository and <see cref="M:log4net.Core.CustomRepositorySelector.GetRepository(System.String)"/> to retrieve 
            a repository.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetAllRepositories">
            <summary>
            Gets a list of <see cref="T:log4net.Repository.ILoggerRepository"/> objects
            </summary>
            <returns>an array of all known <see cref="T:log4net.Repository.ILoggerRepository"/> objects</returns>
            <remarks>
            <para>
            Gets an array of all of the repositories created by this selector.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.AliasRepository(System.String,log4net.Repository.ILoggerRepository)">
            <summary>
            Aliases a repository to an existing repository.
            </summary>
            <param name="repositoryAlias">The repository to alias.</param>
            <param name="repositoryTarget">The repository that the repository is aliased to.</param>
            <remarks>
            <para>
            The repository specified will be aliased to the repository when created. 
            The repository must not already exist.
            </para>
            <para>
            When the repository is created it must utilize the same repository type as 
            the repository it is aliased to, otherwise the aliasing will fail.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="repositoryAlias"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="repositoryTarget"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.OnLoggerRepositoryCreatedEvent(log4net.Repository.ILoggerRepository)">
            <summary>
            Notifies the registered listeners that the repository has been created.
            </summary>
            <param name="repository">The repository that has been created.</param>
            <remarks>
            <para>
            Raises the <see cref="E:log4net.Core.CustomRepositorySelector.LoggerRepositoryCreatedEvent"/> event.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
            <summary>
            Gets the repository name and repository type for the specified assembly.
            </summary>
            <param name="assembly">The assembly that has a <see cref="T:log4net.Config.RepositoryAttribute"/>.</param>
            <param name="repositoryName">in/out param to hold the repository name to use for the assembly, caller should set this to the default value before calling.</param>
            <param name="repositoryType">in/out param to hold the type of the repository to create for the assembly, caller should set this to the default value before calling.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.ConfigureRepository(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Configures the repository using information from the assembly.
            </summary>
            <param name="assembly">The assembly containing <see cref="T:log4net.Config.ConfiguratorAttribute"/>
            attributes which define the configuration for the repository.</param>
            <param name="repository">The repository to configure.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="repository"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.LoadPlugins(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined plugins on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to add the plugins to.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="repository"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:log4net.Core.CustomRepositorySelector.LoadAliases(System.Reflection.Assembly,log4net.Repository.ILoggerRepository)">
            <summary>
            Loads the attribute defined aliases on the assembly.
            </summary>
            <param name="assembly">The assembly that contains the attributes.</param>
            <param name="repository">The repository to alias to.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="assembly"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="repository"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="F:log4net.Core.CustomRepositorySelector.declaringType">
            <summary>
            The fully qualified type of the DefaultRepositorySelector class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="E:log4net.Core.CustomRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            Event to notify that a logger repository has been created.
            </summary>
            <value>
            Event to notify that a logger repository has been created.
            </value>
            <remarks>
            <para>
            Event raised when a new repository is created.
            The event source will be this selector. The event args will
            be a <see cref="T:log4net.Core.LoggerRepositoryCreationEventArgs"/> which
            holds the newly created <see cref="T:log4net.Repository.ILoggerRepository"/>.
            </para>
            </remarks>
        </member>
        <member name="T:XMS.Core.IDatabase">
            <summary>
            数据库访问接口。
            </summary>
        </member>
        <member name="M:XMS.Core.IDatabase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，仅返回语句执行影响的行数。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.IDatabase.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，仅返回语句执行影响的行数。
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
        </member>
        <member name="M:XMS.Core.IDatabase.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.IDatabase.ExecuteQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.IDatabase.BeginTransaction">
             <summary>
             使用快照隔离级别开始执行事务操作。
             SQL Server 中默认不启用事务快照机制，要启用事务快照机制:
            		1.停掉所有可能正在使用目标数据库的服务和应用程序;
            		2.如果仍然有连接存在，可通过先分离数据库，在附加数据库的方法断掉连接;
            		3.在目标数据库中执行以下查询：
            			ALTER DATABASE xxx SET ALLOW_SNAPSHOT_ISOLATION ON
            	要在数据库中查看各数据库事务快照机制启用情况，请使用以下语句：
            		SELECT name, snapshot_isolation_state_desc, is_read_committed_snapshot_on FROM sys.databases
             事务示例：
             using(IEntityContext entityContext = this.CreateBusinessContext())
             {
            		entityContext.BeginTransaction();
            		try
            		{
            			// 任意业务代码
            
            			entityContext.Commit();
            		}
            		catch
            		{
            			entityContext.Rollback();
            			throw;
            		}
            	}
            	备注：
            		SNAPSHOT 事务与其它事务有一种情况是不一样的，两个事务相继开始，如果两个都是更新同一条记录，那么后面更新的事务
            		会在前面更新的事务的COMMIT时由等待状态转为抛出错误。或者同样两个事务相继开始，第1个事务在更新这个记录，而第2
            		个事务在第1个事务 COMMIT 前（不理是在更新语句前还是后）有过查询这条记录的话，那么这第2个事务不管是在第1个事务
            		COMMIT 前还是后也有更新这条记录的话，那么第2个事务就会抛出并发错误。错误如下所示： “Msg 3960, Level 16, State 2,
            		Line 2 Snapshot isolation transaction aborted due to update conflict. You cannot use snapshot isolation 
            		to access table 'dbo.aaa' directly or indirectly in database 'Tecsys_db1' to update, delete, or insert 
            		the row that has been modified or deleted by another transaction. Retry the transaction or change the 
            		isolation level for the update/delete statement.”的错误，而其它级别的所有事务则都能正常工作，没有错误发生。
            		总之，SNAPSHOT事务是两个事务不能同时更新同一条记录，或者是一个事务在更新，另一个事务只要在第1个更新事务 COMMIT
            		前有过查询，甚至这第2个事务是在第1个事务更新语句后才开始的，这第2个事务一定不能有任何更新这条记录的语句出现，否则就会出错。
             </summary>
        </member>
        <member name="M:XMS.Core.IDatabase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            使用指定的事务隔离级别开始执行事务操作。
            </summary>
            <param name="isolationLevel">用来初始化事务操作的事务隔离级别。</param>
        </member>
        <member name="M:XMS.Core.IDatabase.Commit">
            <summary>
            提交当前事务。
            </summary>
        </member>
        <member name="M:XMS.Core.IDatabase.Rollback">
            <summary>
            提交当前事务。
            </summary>
        </member>
        <member name="M:XMS.Core.IDatabase.IsDatabaseExists">
            <summary>
            检查当前业务相关的数据库是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.IDatabase.IsTableExists``1">
            <summary>
            检查当前上下文环境中由泛型参数类型指定的实体相关的数据表是否存在。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.IDatabase.IsTableExists(System.Type)">
            <summary>
            检查当前上下文环境中指定实体类型相关的数据表是否存在。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.IDatabase.CreateDataTableAdapter">
            <summary>
            创建一个可用于直接操作数据库表的数据表访问适配器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.IBusinessContext">
            <summary>
            业务上下文接口定义
            </summary>
        </member>
        <member name="M:XMS.Core.IBusinessContext.CreateEntityContext">
            <summary>
            根据当前运行模式，自动创建一个适用于当前运行模式的实体上下文。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.IBusinessContext.ExtendProperties">
            <summary>
            扩展属性。
            </summary>
        </member>
        <member name="P:XMS.Core.IBusinessContext.RunMode">
            <summary>
            获取一个值，该值指示当前业务上下文的运行模式。
            </summary>
        </member>
        <member name="P:XMS.Core.IBusinessContext.AppAgent">
            <summary>
            获取适用于当前业务上下文的应用代理。
            </summary>
        </member>
        <member name="T:XMS.Core.IEntityContext">
            <summary>
            实体上下文接口定义
            </summary>
        </member>
        <member name="M:XMS.Core.IEntityContext.GetMappingToTable(System.Type)">
            <summary>
            为指定的实体类型获取其映射的物理表名。
            </summary>
            <param name="entityType">要获取其映射的物理表名的实体类型。</param>
            <returns>实体类型映射的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.GetMappingToTable``1">
            <summary>
            为指定的实体类型获取其映射的物理表名。
            </summary>
            <typeparam name="T">要获取其映射的物理表名的实体类型。</typeparam>
            <returns>实体类型映射的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.GetPartitionTableName(System.String)">
            <summary>
            根据指定的表名获取其物理分区表名，该方法可用于获取那些定义了实体模型的表的分区表名，也可以获取那些不具有实体模型定义的表的分区表名。
            </summary>
            <param name="rawTableName">原表名。</param>
            <returns>分区表名</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.Add``1(``0)">
            <summary>
            添加实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Entity"></param>
        </member>
        <member name="M:XMS.Core.IEntityContext.Delete``1(``0)">
            <summary>
            删除实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Entity"></param>
        </member>
        <member name="M:XMS.Core.IEntityContext.Update``1(``0)">
            <summary>
            更新实体。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Entity"></param>
        </member>
        <member name="M:XMS.Core.IEntityContext.AddOrUpdate``1(``0)">
            <summary>
            添加或更新实体，该方法当指定的实体具有健值时对数据库执行一次查询以判断目标数据是否确实存在，如果存在，则执行更新操作，其它情况下执行添加操作。
            </summary>
            <typeparam name="T">实体的类型。</typeparam>
            <param name="entity">要添加或更新的实体。</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.IEntityContext.ExecuteScalar``1(System.String,System.Object[])" -->
        <member name="M:XMS.Core.IEntityContext.ExecuteScalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的第一条数据对应的对象实例。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据对应的对象实例。</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecuteList``1(System.String,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的对象的集合。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecuteList``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的对象的集合。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 sql 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecuteList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecuteList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecuteList``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecutePagedList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行分页查询，该接口仅用于提供对现有 SQLHelper 组件的兼容性。
            </summary>
            <typeparam name="T">回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">页大小。</param>
            <param name="parameters">用于参数化 condition 参数指定的语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecutePagedList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecutePagedList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行分页查询，该接口仅用于提供对现有 SQLHelper 组件的兼容性。
            </summary>
            <typeparam name="T">回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">页大小。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="M:XMS.Core.IEntityContext.ExecutePagedList``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行分页查询，该接口仅用于提供对现有 SQLHelper 组件的兼容性。
            </summary>
            <typeparam name="T">回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">页大小。</param>
            <param name="parameters">与 condition 参数指定的语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="P:XMS.Core.IEntityContext.BusinessContext">
            <summary>
            获取当前实体上下文相关的业务上下文对象。
            </summary>
        </member>
        <member name="T:XMS.Core.BusinessContextBase">
            <summary>
            业务上下文基类。
            </summary>
        </member>
        <member name="M:XMS.Core.BusinessContextBase.#ctor">
            <summary>
            初始化 BusinessContextBase 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.BusinessContextBase.CreateEntityContext">
            <summary>
            根据当前运行模式，自动创建一个适用于当前运行模式的实体上下文。
            </summary>
            <returns>新创建的实体上下文。</returns>
        </member>
        <member name="M:XMS.Core.BusinessContextBase.CreateEntityContext(XMS.Core.RunMode)">
            <summary>
            根据指定的运行模式创建实体上下文。
            </summary>
            <param name="runMode">用于创建实体上下文的运行模式。</param>
            <returns>新创建的实体上下文。</returns>
        </member>
        <member name="P:XMS.Core.BusinessContextBase.ExtendProperties">
            <summary>
            扩展属性。
            </summary>
        </member>
        <member name="P:XMS.Core.BusinessContextBase.RunMode">
            <summary>
            获取一个值，该值指示当前业务上下文的运行模式。
            </summary>
        </member>
        <member name="P:XMS.Core.BusinessContextBase.AppAgent">
            <summary>
            获取适用于当前业务上下文的客户端应用代理。
            </summary>
        </member>
        <member name="T:XMS.Core.Entity.DbBusinessContextBase">
            <summary>
            数据库业务上下文基类。
            </summary>
        </member>
        <member name="F:XMS.Core.Entity.DbBusinessContextBase.createDatabaseOrTableWhenNotExists">
            <summary>
            当表不存在时是否调用 CreateTable 方法创建表
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.#ctor(System.String)">
            <summary>
            初始化数据业务上下文的实例。
            </summary>
            <param name="nameOrConnectionString"></param>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.#ctor(System.String,System.Boolean)">
            <summary>
            初始化数据业务上下文的实例。
            </summary>
            <param name="nameOrConnectionString"></param>
            <param name="createDatabaseOrTableWhenNotExists">指示在分区表不存在时是否应该创建表， true 创建， false 不创建并抛出异常。</param>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.GetPartitionTableName(System.String)">
            <summary>
            获取指定原表名对应的分区表名，默认不对表进行分区的情况下，直接返回 <see cref="!:rawTableName"/>。
            </summary>
            <param name="rawTableName">要获取其分区表名的原表名。</param>
            <returns>与指定原表名对应的分区表名。</returns>
            <remarks>
            对继承者的说明：当需要使用 DataTableAdapter 的方式访问数据且需要对单表进行分区时需要重载此方法以确定在当前业务上下文环境中要访问的目标表名。
            </remarks>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.GetModelMappings">
            <summary>
            获取当前数据业务上下文中模型映射的集合（即模型到数据库表的映射)
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.IsDatabaseExists(XMS.Core.RunMode)">
            <summary>
            检查当前业务相关的数据库是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.IsTableExists(System.String,XMS.Core.RunMode)">
            <summary>
            检查当前上下文环境中指定实体类型相关的数据表是否存在。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.CreateTable(XMS.Core.IDatabase,System.String,System.Type)">
            <summary>
            创建表。
            </summary>
            <param name="db"></param>
            <param name="tableName"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.CreateEntityContext(XMS.Core.RunMode)">
            <summary>
            根据指定的运行模式创建实体上下文。
            </summary>
            <param name="runMode">用于创建实体上下文的运行模式。</param>
            <returns>新创建的实体上下文。</returns>
        </member>
        <member name="P:XMS.Core.Entity.DbBusinessContextBase.ConnectionString">
            <summary>
            获取或设置当前业务上下文相关的连接字符串
            </summary>
        </member>
        <member name="P:XMS.Core.Entity.DbBusinessContextBase.ServerName">
            <summary>
            获取或设置数据库的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Entity.DbBusinessContextBase.DatabaseName">
            <summary>
            获取或设置数据库的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Entity.DbBusinessContextBase.TablePartitionKey">
            <summary>
            获取用于对表进行水平分区的键，在对表进行水平分区时，该分区键决定了分区表的表名，仅在需要对表进行水平分区时重写此方法，其它情况下，忽略此方法。
            </summary>
            <value>用于分区的键。</value>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalConnectionString.IsDatabaseExists(XMS.Core.RunMode)">
            <summary>
            检查当前业务相关的数据库是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalConnectionString.IsTableExists(System.String,XMS.Core.RunMode)">
            <summary>
            检查当前上下文环境中指定实体类型相关的数据表是否存在。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext">
            <summary>
            该类由实体访问模块内部使用，请不要直接使用。
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.#ctor(XMS.Core.Entity.DbBusinessContextBase,System.String,XMS.Core.RunMode)">
            <summary>
            初始化 InternalDbContext 类的新实例。
            </summary>
            <param name="businessContext">businessContext</param>
            <param name="connectionString">connectionString</param>
            <param name="runMode">runMode</param>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.SaveChanges">
            <summary>
            保存更改
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            该方法不被支持。
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.ExecuteQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            该方法不被支持。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.BeginTransaction">
            <summary>
            该方法不被支持。
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            该方法不被支持。
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.Commit">
            <summary>
            该方法不被支持。
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.Rollback">
            <summary>
            该方法不被支持。
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.IsDatabaseExists">
            <summary>
            该方法不被支持。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.IsTableExists``1">
            <summary>
            该方法不被支持。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.IsTableExists(System.Type)">
            <summary>
            该方法不被支持。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.CreateDataTableAdapter">
            <summary>
            该方法不被支持。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.BusinessContext">
            <summary>
            BusinessContext
            </summary>
        </member>
        <member name="P:XMS.Core.Entity.DbBusinessContextBase.InternalDbContext.RunMode">
            <summary>
            获取当前内部 DbContext 的运行模式。
            </summary>
        </member>
        <member name="T:XMS.Core.Entity.DbEntityContext">
            <summary>
            数据实体访问上下文。
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.#ctor(XMS.Core.Entity.DbBusinessContextBase,XMS.Core.Entity.DbBusinessContextBase.InternalDbContext)">
            <summary>
            初始化 DbEntityContext 类的新实例。
            </summary>
            <param name="businessContext">业务上下文</param>
            <param name="dbContext">数据上下文</param>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.GetMappingToTable(System.Type)">
            <summary>
            为指定的实体类型获取其映射的物理表名。
            </summary>
            <param name="entityType">要获取其映射的物理表名的实体类型。</param>
            <returns>实体类型映射的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.GetMappingToTable``1">
            <summary>
            为指定的实体类型获取其映射的物理表名。
            </summary>
            <typeparam name="T">要获取其映射的物理表名的实体类型。</typeparam>
            <returns>实体类型映射的物理表名。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.GetPartitionTableName(System.String)">
            <summary>
            根据指定的表名获取其物理分区表名，该方法可用于获取那些定义了实体模型的表的分区表名，也可以获取那些不具有实体模型定义的表的分区表名。
            </summary>
            <param name="rawTableName">原表名。</param>
            <returns>分区表名</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.AddOrUpdate``1(``0)">
            <summary>
            添加或更新实体，该方法当指定的实体具有健值时对数据库执行一次查询以判断目标数据是否确实存在，如果存在，则执行更新操作，其它情况下执行添加操作。
            </summary>
            <typeparam name="T">实体的类型。</typeparam>
            <param name="entity">要添加或更新的实体。</param>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.FindByPrimaryKey``1(System.Object[])">
            <summary>
            使用指定的键值查找指定类型参数的实体。
            </summary>
            <typeparam name="T">要查询的实体的类型。</typeparam>
            <param name="keyValues">用来执行查找的键值。</param>
            <returns>如果找到，返回实体对象，否则返回 null。</returns>
            <remarks>
            如果键是由多个字段组合而成的，此处输入组合主键的次序需要按照我们定义改实体类时声明主键的次序。
            </remarks>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.FindByProperty``1(System.String,System.Object)">
            <summary>
            根据指定的属性和值查找符合条件的实体。
            </summary>
            <typeparam name="T">要查询的实体的类型。</typeparam>
            <param name="property">用来对实体进行过滤的属性。</param>
            <param name="value">用来对实体进行过滤的值。</param>
            <returns>所有符合条件的实体组成的集合。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.FindByAll``1(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            查找与“属性-值”键值对集合中的全部“属性-值”都匹配的的实体。
            </summary>
            <typeparam name="T">要查询的实体的类型。</typeparam>
            <param name="propertyValues">用来对实体进行过滤的属性、值键值对组成的集合。</param>
            <returns>所有符合条件的实体组成的集合。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.FindByAny``1(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            查找与“属性-值”键值对集合中的任一“属性-值”匹配的的实体。
            </summary>
            <typeparam name="T">要查询的实体的类型。</typeparam>
            <param name="propertyValues">用来对实体进行过滤的属性、值键值对组成的集合。</param>
            <returns>所有符合条件的实体组成的集合。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteList``1(System.String,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的对象的集合。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteList``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的对象的集合。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteList``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行查询，在满足条件限制的结果集中从指定的索引位置选取指定数量的数据。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="startIndex">本次要取记录从 1 开始的索引。</param>
            <param name="count">本次要取记录的条数。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
            <example>
            entityContext.ExecuteList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecutePagedList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="condition"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="parameters"></param>
            <returns></returns>
            <example>
            entityContext.ExecutePagedList&lt;Order&gt;("OrderID,Title,CustomerName", "CustomerName=@p0", "CustomerName desc", 1, 2, "entityContext");
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecutePagedList``1(System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fields"></param>
            <param name="condition"></param>
            <param name="orderBy"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecutePagedList``1(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中执行分页查询，该接口仅用于提供对现有 SQLHelper 组件的兼容性。
            </summary>
            <typeparam name="T">回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="tableName">要查询表名。</param>
            <param name="fields">要查询的字段，以“，”分割。</param>
            <param name="condition">要查询的条件。</param>
            <param name="orderBy">排序规则。</param>
            <param name="pageIndex">页码。</param>
            <param name="pageSize">页大小。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的对象的集合。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.GetQueryableDataSource``1">
            <summary>
            为指定的类型参数获取可进行 Linq 查询的数据源。
            </summary>
            <typeparam name="T">要查询的实体的类型。</typeparam>
            <returns>可进行 Linq 查询的数据源。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
            <example>
            entityContext.ExecuteNonQuery("UPDATE Person SET Name = @p0 WHERE PersonID = @p1", "Mike", 100);
            注意：在直接写查询参数的情况下，查询参数必须命名为 @p0 的形式(必须从 0 开始)
            </example>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteNonQuery(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，
            </summary>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <paramref name="sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>语句执行影响的行数。</returns>
            <remarks>
            可以通过此方法执行任意不需要返回数据的 SQL 语句（如 delete、update 等）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteQuery``1(System.String,System.Object[])">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteQuery``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在数据库中直接执行指定的 SQL 语句，查询结果以给定的泛型类型返回。
            </summary>
            <typeparam name="T">要返回的数据的类型。</typeparam>
            <param name="sql">要执行的 SQL 语句。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>用于执行查询的枚举器。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的第一条数据对应的对象实例。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">用于参数化 SQL 语句的命令参数。</param>
            <returns>满足条件的第一条数据对应的对象实例。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.ExecuteScalar``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            在当前实体上下文相关的数据库中直接执行指定的 SQL 语句，返回满足条件的第一条数据对应的对象实例。
            </summary>
            <typeparam name="T">返回数据对应的实体的类型，可以是int、string 等单值对象，也可以是任意复杂对象或者匿名类型。</typeparam>
            <param name="sql">要执行的 SQL 语句，该语句可以是参数化的。</param>
            <param name="parameters">与 <see cref="!:sql"/> 语句匹配的由参数名称和参数值构成的键值对组成的参数集合。</param>
            <returns>满足条件的第一条数据对应的对象实例。</returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.Dispose">
            <summary>
            释放非托管资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 释放托管和非托管资源； <b>false</b> 仅释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.IsDatabaseExists">
            <summary>
            检查当前业务相关的数据库是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.IsTableExists``1">
            <summary>
            检查当前上下文环境中由泛型参数类型指定的实体相关的数据表是否存在。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.IsTableExists(System.Type)">
            <summary>
            检查当前上下文环境中指定实体类型相关的数据表是否存在。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Entity.DbEntityContext.CreateDataTableAdapter">
            <summary>
            创建一个可用于操作数据库表的数据表访问适配器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Entity.DbEntityContext.BusinessContext">
            <summary>
            获取当前实体上下文相关的业务上下文。
            </summary>
        </member>
        <member name="T:XMS.Core.Entity.DbEntityContext.EntityMapping">
            <summary>
            上下文无关的实体映射对象
            </summary>
        </member>
        <member name="T:XMS.Core.AppDomainExtend">
            <summary>
            AppDomain 扩展
            </summary>
        </member>
        <member name="M:XMS.Core.AppDomainExtend.MapAbsolutePath(System.AppDomain,System.String)">
            <summary>
            以 '\\' 开头的 UNC 路径不做任何处理
            在宿主环境下，将相对路径映射到服务器上的绝对路径（以'/'开头和分隔路径层次）；
            在普通环境下，将相对路径映射为当前应用程序安装目录下的绝对路径（以'\'开头和分隔路径层次）。
            </summary>
            <param name="relativePath">要映射的相对路径。</param>
            <returns>映射后的绝对路径。</returns>
            <remarks>
            MapAbsolutePath(null) == MapAbsolutePath("") == MapAbsolutePath("  ") == MapAbsolutePath("/") == MapAbsolutePath("\\") <br/>
            MapAbsolutePath("\\conf") == MapAbsolutePath("conf")
            </remarks>
        </member>
        <member name="M:XMS.Core.AppDomainExtend.MapPhysicalPath(System.AppDomain,System.String)">
            <summary>
            在宿主环境下，将虚拟相对路径（以'/'开头和分隔路径层次）映射到服务器上的物理路径；
            在普通环境下，将物理相对路径（以'\\'开头和分隔路径层次）映射到当前应用程序安装目录下的物理路径。
            </summary>
            <param name="path">要映射的物理路径或相对路径。</param>
            <returns>映射后的物理路径。</returns>
            <remarks>
            MapPhysicalPath(null) == MapPhysicalPath("") == MapPhysicalPath("  ") == MapPhysicalPath("/") == MapPhysicalPath("\\") <br/>
            MapPhysicalPath("\\conf") == MapPhysicalPath("conf")
            </remarks>
        </member>
        <member name="M:XMS.Core.AppDomainExtend.MapPhysicalPath(System.AppDomain,System.String,System.String)">
            <summary>
            根据指定的相对路径，获取其相对于当前应用程序域下某个指定的基础相对路径的物理路径。
            </summary>
            <param name="domain"></param>
            <param name="baseRelativePath"></param>
            <param name="relativePath"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Caching.CacheDependency">
            <summary>
            在存储于本地缓存对象中的项与文件、缓存键、文件或缓存键的数组或另一个 CacheDependency 对象之间建立依附性关系。 
            CacheDependency 类监视依附性关系，以便在任何这些对象更改时，该缓存项都会自动移除。 
            </summary>
            <remarks>
            CacheDependency类提供两种方式以判断文件是否发生变化：
            	HasChanged 属性，通过主动获取该属性，业务逻辑可直接判断文件自上次加载后是否发生变化；
            	事件通知机制
            一旦文件发生变化，FileWatcher 对象就会从监视列表中移除，并不再监测其关联的文件后续发生的任何变化，也就无法接收到任何与该文件关联的事件变化通知；
            可以通过以下方式继续监视文件的变化：
            	当发现或监听到 FileWatcher 关联的文件已经发生变化后，将业务相关的 FileWatcher 设为 null， 然后在需要的时候重新通过 FileWatcher.Get 方法获取
            最新的与指定文件关联的 FileWatcher 对象，该对象的 HasChanged 属性为 false
            详细示例请参考 缓存服务和配置服务 中通过本类监测关联文件是否发生变化的示例和用法。
            </remarks>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Get(System.String)">
            <summary>
            使用指定的文件名或目录获取一个依赖项，如果与指定的文件名或目录对应的依赖项不存在，那么新建一个与其关联的依赖项并返回它。
            </summary>
            <param name="fileOrDirectory">指定的文件名或目录。</param>
            <returns>CacheDependency 对象。</returns>
            <remarks>
            如果传入的文件名或目录不合法，那么该方法返回 null。
            </remarks>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.#ctor(System.String,System.String,System.String)">
            <summary>
            使用指定的文件名或目录初始化 CacheDependency 类的新实例。
            </summary>
            <param name="fileOrDirectory"></param>
            <param name="directoryName">目录名</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.CacheDependency.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="E:XMS.Core.Caching.CacheDependency.Changed">
            <summary>
            表示文件变化的事件
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.CacheDependency.HasChanged">
            <summary>
            获取一个值，该值指示当前依赖项是否已经发生变化。
            </summary>
        </member>
        <member name="T:XMS.Core.IPool`1">
            <summary>
            定义一组可用来操纵对象的方法。
            </summary>
            <typeparam name="T">池中存放的对象的类型。</typeparam>
        </member>
        <member name="M:XMS.Core.IPool`1.Pop">
            <summary>
            从对象池中获取一个可用的对象以进行操作， 对象使用完毕后，请调用 <see cref="M:XMS.Core.IPool`1.Push(`0)"/> 方法将其放回对象池，对象使用过程中如果发现已失效，请调用 <see cref="M:XMS.Core.IPool`1.Release(`0)"/> 方法释放它。
            </summary>
            <returns>从对象池中取到的对象。</returns>
        </member>
        <member name="M:XMS.Core.IPool`1.Push(`0)">
            <summary>
            将从对象池中获取的对象重新放入对象池。
            </summary>
            <param name="item">要放入对象池中的对象。</param>
        </member>
        <member name="M:XMS.Core.IPool`1.Release(`0)">
            <summary>
            释放从对象池中获取的对象。
            </summary>
            <param name="item">要释放的对象。</param>
        </member>
        <member name="T:XMS.Core.ObjectPool`1">
            <summary>
            提供一个通用对象池模式的轻量实现。
            </summary>
            <typeparam name="T">池中存放的对象的类型。</typeparam>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.EnterLock(System.Int32)">
            <summary>
            进入锁定状态。
            </summary>
            <param name="millisecondsTimeout">超时毫秒数，-1 或其它小于 0 的值，表示成功进入锁定状态前永不超时， 0 或其它大于 0 的值，表示成功进入锁定状态前的最大等待时间。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.ExitLock">
            <summary>
            退出锁定状态。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.#ctor(System.String,System.Func{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            初始化 ObjectPool 类的新实例。
            </summary>
            <param name="name">对象池的名称，同时也使用此名称创建性能计数器实例。</param>
            <param name="createFunction">用来初始化对象的函数</param>
            <param name="lowWatermark">对象池低水位线，Pop 时，lowWatermark 以下的对象按 FIFO（先进先出）算法进行提取，以平均使用每个对象并维持池中对象为教合适的状态。</param>
            <param name="highWatermark">对象池高水位线，Pop 时，lowWatermark 和 highWatermark之间的对象按 LIFO（后进先出）算法进行提取，以尽可能使用最近经常使用的对象。</param>
            <param name="maxCount">对象池中生成的可用对象数量的最大值</param>
            <param name="initSize">对象池下限</param>
            <param name="inActiveTimeout">对象非活动逐出超时时间，如果该值小于等于 TimeSpan.Zero， 则对象永不超时逐出。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute(System.Action{`0})">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``1(System.Action{`0,``0},``0)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``2(System.Action{`0,``0,``1},``0,``1)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``3(System.Action{`0,``0,``1,``2},``0,``1,``2)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``4(System.Action{`0,``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``5(System.Action{`0,``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
            <param name="t6">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``1(System.Func{`0,``0})">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``2(System.Func{`0,``0,``1},``0)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``3(System.Func{`0,``0,``1,``2},``0,``1)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``4(System.Func{`0,``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``5(System.Func{`0,``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Execute``6(System.Func{`0,``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            从对象池中取一个可用对象出来, 并执行指定的方法, 执行完成以后将对象重新放回池中。
            </summary>
            <param name="action">一个可用的对象</param>
            <param name="t2">action 的第二个参数</param>
            <param name="t3">action 的第三个参数</param>
            <param name="t4">action 的第四个参数</param>
            <param name="t5">action 的第四个参数</param>
            <param name="t6">action 的第四个参数</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Pop">
            <summary>
            从对象池中获取一个可用的对象以进行操作， 对象使用完毕后，请调用 <see cref="M:XMS.Core.ObjectPool`1.Push(`0)"/> 方法将其放回对象池，对象使用过程中如果发现已失效，请调用 <see cref="M:XMS.Core.ObjectPool`1.Release(`0)"/> 方法释放它。
            </summary>
            <returns>从对象池中取到的对象。</returns>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Pop(System.Int32)">
            <summary>
            从对象池中获取一个可用的对象以进行操作， 对象使用完毕后，请调用 Push 方法将其放回对象池。
            </summary>
            <param name="millisecondsTimeout">超时毫秒数，0 立即返回，负值表示永不过期。</param>
            <returns>从对象池中取到的对象。</returns>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Push(`0)">
            <summary>
            将从对象池中获取的对象重新放入对象池。
            </summary>
            <param name="item">要放入对象池中的对象。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Push(`0,System.Int32)">
            <summary>
            将从对象池中获取的对象重新放入对象池。
            </summary>
            <param name="item">要放入对象池中的对象。</param>
            <param name="millisecondsTimeout">超时毫秒数，0 立即返回，负值表示永不超时。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Release(`0)">
            <summary>
            释放从对象池中获取的对象。
            </summary>
            <param name="item">要释放的对象。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Dispose">
            <summary>
            释放托管和非托管资源。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.ObjectPool`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.ObjectPool`1.EnablePerfCounters">
            <summary>
            获取或设置一个值，该值指示当前对象池是否启用性能计数器，如果启用则为 true， 否则为 false。
            </summary>
            <remarks>
            该值可在运行时修改，以根据需要观察性能。当在程序运行时修改 ObjectPoolPerfCounters 参数启用性能计数器时，要新开性能计数器监测面板以查看结果，在原性能计数器监测面板可能要延迟几分钟才能看到结果。
            </remarks>
        </member>
        <member name="P:XMS.Core.ObjectPool`1.Count">
            <summary>
            获取当前对象池中有效对象的数量。
            </summary>
        </member>
        <member name="P:XMS.Core.ObjectPool`1.IdleCount">
            <summary>
            获取对象池中空闲对象的数量。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectPoolPerformanceCounterManager.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.ObjectPoolPerformanceCounterManager.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.WCF.SyncContext.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.WCF.SyncContext.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="P:XMS.Core.WCF.WCFServiceBase.Logger">
            <summary>
            获取日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.WCFServiceBase.Cache">
            <summary>
            获取缓存服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.WCFServiceBase.ConfigService">
            <summary>
            获取配置服务。
            </summary>
        </member>
        <member name="T:XMS.Core.IReturnValue">
            <summary>
            定义一组用于向程序边界外部公开方法调用结果的接口。
            </summary>
        </member>
        <member name="P:XMS.Core.IReturnValue.Code">
            <summary>
            获取返回码。
            </summary>
        </member>
        <member name="P:XMS.Core.IReturnValue.Message">
            <summary>
            获取返回消息。
            </summary>
        </member>
        <member name="P:XMS.Core.IReturnValue.Value">
            <summary>
            获取返回值。
            </summary>
        </member>
        <member name="T:XMS.Core.ReturnValue">
            <summary>
            一个用于向程序边界外部公开方法调用结果的对象。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue.#ctor">
            <summary>
            初始化 ReturnValue 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue.#ctor(System.Int32)">
            <summary>
            使用指定的错误码初始化 ReturnValue 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get200OK">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <returns>编码为 200 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get200OK(System.String)">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <param name="message">成功消息，该消息可用于提示最终用户。</param>
            <returns>编码为 200 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get404Error(System.String)">
            <summary>
            获取并返回编码为 404 的 ReturnValue。
            </summary>
            <param name="message">错误信息。</param>
            <returns>编码为 404 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.Get500Error(System.Exception,System.String)">
            <summary>
            获取并返回编码为 500 的 ReturnValue。
            </summary>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <returns>编码为 500 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.GetBusinessError(XMS.Core.BusinessException)">
            <summary>
            获取返回业务错误编码 的 ReturnValue。
            </summary>
            <param name="be">业务异常</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue.GetCustomError(System.Int32,System.Exception,System.String)">
            <summary>
            获取返回自定义错误编码 的 ReturnValue。
            </summary>
            <param name="code">错误编码</param>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="P:XMS.Core.ReturnValue.Code">
            <summary>
            错误码。
            </summary>
        </member>
        <member name="P:XMS.Core.ReturnValue.Message">
            <summary>
            提示信息。
            </summary>
        </member>
        <member name="P:XMS.Core.ReturnValue.RawMessage">
            <summary>
            获取程序原错误提示消息。
            </summary>
        </member>
        <member name="T:XMS.Core.ReturnValue`1">
            <summary>
            泛型 ReturnValue 对象。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.#ctor">
            <summary>
            初始化 ReturnValue 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get200OK(`0)">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <returns>编码为 200 的 ReturnValue。</returns>
            <param name="objValue">返回的值。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get200OK(`0,System.String)">
            <summary>
            获取并返回编码为 200 的 ReturnValue。 
            </summary>
            <param name="objValue">返回的值。</param>
            <param name="message">成功消息，该消息可用于提示最终用户。</param>
            <returns>编码为 200 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get404Error(System.String,`0)">
            <summary>
            获取并返回编码为 404 的 ReturnValue。
            </summary>
            <param name="message">错误信息。</param>
            <param name="objValue">返回的值。</param>
            <returns>编码为 404 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.Get500Error(System.Exception,System.String,`0)">
            <summary>
            获取并返回编码为 500 的 ReturnValue。
            </summary>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <param name="objValue">返回的值。</param>
            <returns>编码为 500 的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.GetBusinessError(XMS.Core.BusinessException,`0)">
            <summary>
            获取返回业务错误编码 的 ReturnValue。
            </summary>
            <param name="be">业务异常</param>
            <param name="objValue">返回的值。</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="M:XMS.Core.ReturnValue`1.GetCustomError(System.Int32,System.Exception,System.String,`0)">
            <summary>
            获取返回自定义错误编码 的 ReturnValue。
            </summary>
            <param name="code">错误编码</param>
            <param name="ex">异常</param>
            <param name="message">错误信息。</param>
            <param name="objValue">返回的值。</param>
            <returns>自定义错误编码的 ReturnValue。</returns>
        </member>
        <member name="P:XMS.Core.ReturnValue`1.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="T:XMS.Core.QueryResult`1">
            <summary>
            泛型 ReturnValue 对象。
            </summary>
            <typeparam name="T">值的类型。</typeparam>
        </member>
        <member name="P:XMS.Core.QueryResult`1.TotalCount">
            <summary>
            获取本次查询条件对应的记录总数。
            </summary>
        </member>
        <member name="P:XMS.Core.QueryResult`1.Items">
            <summary>
            获取本次查询返回的数据。
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.PipeService">
            <summary>
            管道服务
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientChannelConnected(XMS.Core.Pipes.ClientChannelEventArgs)">
            <summary>
            引发 ClientConnected 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientChannelClosed(XMS.Core.Pipes.ClientChannelEventArgs)">
            <summary>
            引发 ClientClosed 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientConnected(XMS.Core.Pipes.ClientConnectEventArgs)">
            <summary>
            引发 ClientConnected 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireClientClosed(XMS.Core.Pipes.ClientConnectEventArgs)">
            <summary>
            引发 ClientClosed 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientConnectEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireDataReceived(XMS.Core.Pipes.DataReceivedEventArgs)">
            <summary>
            引发 DataReceived 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.DataReceivedEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireStarted(System.EventArgs)">
            <summary>
            引发 Started 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:System.EventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.FireStoped(System.EventArgs)">
            <summary>
            引发 Stoped 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:System.EventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.#ctor(System.String,System.Int32)">
            <summary>
            初始化管道服务的新实例。
            </summary>
            <param name="pipeName">管道名称。</param>
            <param name="maxNumberOfServerInstances">最大共享实例数。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.#ctor(System.String,System.Int32,System.Threading.ThreadPriority,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化管道服务的新实例。
            </summary>
            <param name="pipeName">管道名称。</param>
            <param name="maxNumberOfServerInstances">最大共享实例数。</param>
            <param name="listenThreadPriority">监听线程优先级。</param>
            <param name="openTimeout">打开连接超时时间。</param>
            <param name="sendTimeout">发送数据超时时间。</param>
            <param name="receiveTimeout">监听线程等待超时时间。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Start">
            <summary>
            启动管道服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Connect(System.String,System.String)">
            <summary>
            连接到目标管道服务。
            </summary>
            <param name="targetMachineName"></param>
            <param name="targetPipeName"></param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Stop">
            <summary>
            停止管道服务。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Send(System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Send(System.String,System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetMachineName">要想起发送数据的目标机器名。</param>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Request(System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Request(System.String,System.String,System.Object)">
            <summary>
            通过管道服务向本机上指定名称的管道发送数据。
            </summary>
            <param name="targetMachineName">要想起发送数据的目标机器名。</param>
            <param name="targetPipeName">要想起发送数据的目标管道名。</param>
            <param name="value">要发送到目标管道的数据。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeService.Finalize">
            <summary>
            释放管道服务占用的资源。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.Started">
            <summary>
            表示管道启动事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.Stoped">
            <summary>
            表示管道停止事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientChannelConnected">
            <summary>
            表示客户端通道连接时引发的事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientChannelClosed">
            <summary>
            表示客户端通道断开连接时引发事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientConnected">
            <summary>
            表示客户端连接时引发的事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.ClientClosed">
            <summary>
            表示客户端断开连接时引发事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeService.DataReceived">
            <summary>
            表示接收到客户端发送的数据时引发的事件。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeService.PipeName">
            <summary>
            获取管道服务使用的管道名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeService.IsRunning">
            <summary>
            获取一个值，该值指示管道服务是否正在运行。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeService.Clients">
            <summary>
            获取正在运行的管道服务端通道列表，管道服务使用这些通道监听连接到管道服务的管道客户端通道发送的数据。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.MessageProxyException">
            <summary>
            表示在消息总线调用、处理过程中由消息总线引发的异常。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageProxyException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Messaging.MessageBusException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.Messaging.MessageProxyException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.Messaging.MessageBusException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Messaging.MessageProxyException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Messaging.MessageBusException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageProxyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.IAppenderEnable.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.Name">
            <summary>
            获取或设置字典的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.Caption">
            <summary>
            获取或设置字典的标题
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.RaiseBitwise">
            <summary>
            获取或设置一个值，该值指示当前字典中存储的项的值是否支持位运算，默认为 false。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.ItemValueDataType">
            <summary>
            获取或设置字典中存储的字典项的值的类型，默认为 "Int32"。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionary.Description">
            <summary>
            获取当前字典的说明。
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.#ctor(XMS.Core.Dictionary.DataModel.DictionaryData,XMS.Core.Dictionary.DataModel.DictionaryDataItem,XMS.Core.Dictionary.DictionaryItemCollection)">
            <summary>
            用指定的列表初始化 DictionaryItemCollection 。
            </summary>
            <param name="items">用来初始化 DictionaryItemCollection 的列表。</param>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.Contains(XMS.Core.Dictionary.DataModel.DictionaryDataItem)">
            <summary>
            确定当前字典数据项集合中是否包含特定编码的字典数据项。 
            </summary>
            <param name="item">要在字典数据项集合中定位的元素。</param>
            <returns>如果字典数据项集合中包含指定的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.ContainsCode(System.String)">
            <summary>
            确定当前字典数据项集合中是否包含特定编码的字典数据项。 
            </summary>
            <param name="code">要在字典数据项集合中定位的编码。</param>
            <returns>如果字典数据项集合中包含具有指定编码的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.ContainsValue(System.Int64)">
            <summary>
            确定当前字典数据项集合中是否包含特定值的字典数据项。 
            </summary>
            <param name="code">要在字典数据项集合中定位的值。</param>
            <returns>如果字典数据项集合中包含具有指定值的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.GetItemByValue(System.Int64)">
            <summary>
            获取指定字典数据项值关联的字典数据项。
            </summary>
            <param name="value">要获取的字典数据项的值。</param>
            <returns>与指定值关联的字典数据项，如果找不到关联的字典数据项，则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.GetItemByCode(System.String)">
            <summary>
            获取指定字典数据项编码关联的字典数据项。
            </summary>
            <param name="value">要获取的字典数据项的编码。</param>
            <returns>与指定编码关联的字典数据项，如果找不到关联的字典数据项，则返回 null。</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItemCollection.Item(System.Int32)">
            <summary>
            获取指定索引处的字典数据项。
            </summary>
            <param name="index">要获得字典数据项从零开始的索引。</param>
            <returns>指定索引处的字典数据项。如果 index 超出范围，既小于0 或者大于等于集合的 Count 属性，则返回 null。</returns>
        </member>
        <member name="T:XMS.Core.ErrorCode">
            <summary>
            提供定义业务错误码并从中生成业务异常的功能。
            BusinessErrorCode 优先从配置文件中为每一个 code 读取唯一的错误码，如果配置文件中未定义，则使用提供的默认消息创建 BusinessException。
            </summary>
        </member>
        <member name="M:XMS.Core.ErrorCode.#ctor(System.String,System.Int32,System.String)">
            <summary>
            初始化 BusinessErrorCode 类的新实例。
            </summary>
            <param name="code">错误码的整数表示形式。</param>
            <param name="key">键。</param>
            <param name="defaultMessage">默认错误提示。</param>
        </member>
        <member name="M:XMS.Core.ErrorCode.GetSection(System.String)">
            <summary>
            从 ErrorCodes.Config 配置文件中返回指定的 ConfigurationSection 对象。
            </summary>
            <param name="sectionName">要返回的 ErrorCodesSection 的名称。</param>
            <returns>指定的 ErrorCodesSection 对象。</returns>
        </member>
        <member name="M:XMS.Core.ErrorCode.ToException">
            <summary>
            将当前错误码转成异常。
            </summary>
            <returns>一个异常对象。</returns>
        </member>
        <member name="M:XMS.Core.ErrorCode.ToException(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            将当前错误码转成异常。
            </summary>
            <returns>一个异常对象。</returns>
        </member>
        <member name="M:XMS.Core.ErrorCode.ToException(System.Object)">
            <summary>
            将当前错误码转成异常。
            </summary>
            <returns>一个异常对象。</returns>
        </member>
        <member name="P:XMS.Core.ErrorCode.Key">
            <summary>
            获取错误码的键。
            </summary>
        </member>
        <member name="P:XMS.Core.ErrorCode.Code">
            <summary>
            获取错误码的整数表示形式。
            </summary>
        </member>
        <member name="P:XMS.Core.ErrorCode.DefaultMessage">
            <summary>
            获取错误码的默认消息提示。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ErrorCodesSection">
            <summary>
            表示错误码配置节。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodesSection.#ctor">
            <summary>
            初始化 ErrorCodesSection 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodesSection.ErrorCodes">
            <summary>
            获取错误码集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodesSection.Properties">
            <summary>
            获取配置属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ErrorCodeCollection">
            <summary>
            ErrorCodeCollection
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.#ctor">
            <summary>
            初始化 ErrorCodeCollection 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.CreateNewElement">
            <summary>
            override CreateNewElement
            </summary>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.CreateNewElement(System.String)">
            <summary>
            override CreateNewElement
            </summary>
            <param name="key">键。</param>
            <returns>ConfigurationElement</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取配置项的键。
            </summary>
            <param name="element">配置项</param>
            <returns>配置项的键</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.IndexOf(XMS.Core.Configuration.ErrorCodeElement)">
            <summary>
            获取指定 ErrorCodeElement 的索引。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Add(XMS.Core.Configuration.ErrorCodeElement)">
            <summary>
            添加配置元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Remove(XMS.Core.Configuration.ErrorCodeElement)">
            <summary>
            移除指定的配置元素。
            </summary>
            <param name="element">要移除的配置元素。</param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Remove(System.String)">
            <summary>
            移除指定键的索引。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeCollection.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeCollection.CollectionType">
            <summary>
            override CollectionType
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的配置项。
            </summary>
            <param name="index">索引。</param>
            <returns>错误码配置项。</returns>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeCollection.Item(System.String)">
            <summary>
            获取指定键的配置项。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="T:XMS.Core.Configuration.ErrorCodeElement">
            <summary>
            表示一个配置的错误码。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeElement.#ctor">
            <summary>
            初始化 ErrorCodeElement 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ErrorCodeElement.#ctor(System.String)">
            <summary>
            使用指定的键初始化 ErrorCodeElement 类的新实例。
            </summary>
            <param name="key">键。</param>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeElement.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeElement.Code">
            <summary>
            错误码。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ErrorCodeElement.Message">
            <summary>
            错误消息。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.OperationContextHelper">
            <summary>
            Request类的常用扩展
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.OperationContextHelper.GetIP(System.ServiceModel.Channels.MessageProperties)">
            <summary>
            
            </summary>
            <param name="incomingMessageProperties"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.ValidateHelper">
            <summary>
            ValidateHelper
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsInteger(System.String)">
            <summary>
            检测是否整数型数据
            </summary>
            <param name="Num">待检查数据</param>
            <returns>True or False</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsInteger(System.String,System.Boolean)">
            <summary>
            是否全是正整数
            </summary>
            <param name="Input">待检查数据</param>
            <returns>True or False</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsDecimal(System.String)">
            <summary>
            判断是否是Decimal类型
            </summary>
            <param name="TBstr0">判断数据字符</param>
            <returns>true是false否</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsDate(System.String)">
            <summary>
            判断是否为日期类型 （try…catch 效率低）
            </summary>
            <param name="s">待检查数据</param>
            <returns>True or False</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsValidEmail(System.String)">
            <summary>
            检测是否为有效邮件地址格式
            </summary>
            <param name="strIn">输入邮件地址</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsValidURL(System.String)">
            <summary>
            判断字符串是否为有效的URL地址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.ValidateIPAddress(System.String)">
            <summary>
            判断是否合法 IP
            </summary>
            <param name="strIP"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsNumber(System.String)">
            <summary>
            判断是否是数字，包括小数和整数。
            </summary>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsLetterOrNumber(System.String)">
            <summary>
            检查一个字符串是否是纯字母和数字构成的
            </summary>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsImgFilename(System.String)">
            <summary>
            判断文件名是否为浏览器可以直接显示的图片文件名
            </summary>
            <param name="filename">文件名</param>
            <returns>是否可以直接显示</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsTime(System.String)">
            <summary>
            判断是否为时间格式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsPost">
            <summary>
            判断当前页面是否接收到了Post请求
            </summary>
            <returns>是否接收到了Post请求</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsGet">
            <summary>
            判断当前页面是否接收到了Get请求
            </summary>
            <returns>是否接收到了Get请求</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsBrowserGet">
            <summary>
            判断当前访问是否来自浏览器软件
            </summary>
            <returns>当前访问是否来自浏览器软件</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsSearchEnginesGet">
            <summary>
            判断是否来自搜索引擎链接
            </summary>
            <returns>是否来自搜索引擎链接</returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsMobile(System.String)">
            <summary>
            判断是否是有效的手机号码
            </summary>
            <param name="sMobile"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ValidateHelper.IsPhone(System.String)">
            <summary>
            判断是否是有效的电话号码
            </summary>
            <param name="sPhone"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.StringHelper">
            <summary>
            String类常用扩
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.LostHTML(System.String)">
            <summary>
            过滤字符串中的html代码（包括换行、回车）
            </summary>
            <param name="Str"></param>
            <returns>返回过滤之后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetSubString(System.String,System.Int32,System.Boolean)">
            <summary>
            截取字符串函数
            </summary>
            <param name="Str">所要截取的字符串</param>
            <param name="Num">截取字符串的长度</param>
            <param name="RemoveHtml">是否移除Html字符</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetSubString(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            截取字符串函数
            </summary>
            <param name="Str">所要截取的字符串</param>
            <param name="Num">截取字符串的长度</param>
            <param name="sAppend">要插入的字符串</param>
            <param name="RemoveHtml">是否移除Html字符</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.EncryptString(System.String)">
            <summary>
            字符串加密  进行位移操作
            </summary>
            <param name="Input">待加密数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.NcyString(System.String)">
            <summary>
            字符串解密
            </summary>
            <param name="Input">待解密数据</param>
            <returns>解密成功后的数据</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.EncryptString(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返空字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.DecryptString(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返空字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.NumChar(System.String)">
            <summary>
            检测含中文字符串实际长度
            </summary>
            <param name="Input">待检测的字符串</param>
            <returns>返回正整数</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.HidenLastIp(System.String)">
            <summary>
            隐藏IP地址最后一位用*号代替
            </summary>
            <param name="Ipaddress">IP地址:192.168.34.23</param>
            <returns>返回 :192.168.34.*</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetRandomPassword(System.Int32)">
            <summary>
            获取随机数
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.md5(System.String,System.Int32)">
            <summary>
            MD5加密
            </summary>
            <param name="str">加密字符</param>
            <param name="code">加密位数16/32</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.sRndNum(System.Int32)">
            <summary>
            按当前日期和时间生成随机数
            </summary>
            <param name="Num">附加随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.RndNum(System.Int32)">
            <summary>
            生成0-9随机数
            </summary>
            <param name="VcodeNum">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.RandomNUMSTR(System.Int32)">
            <summary>
            获取一个由数字和26个小写字母组成的指定长度的随即字符串
            </summary>
            <param name="intLong">指定长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.RndNumRNG(System.Int32)">
            <summary>
            通过RNGCryptoServiceProvider 生成随机数 0-9 
            </summary>
            <param name="length">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.FillZero(System.String,System.Int32)">
            <summary>
            按字符串位数补0
            </summary>
            <param name="CharTxt">字符串</param>
            <param name="CharLen">字符长度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Check_Char_Is(System.String,System.String)">
            <summary>
            检测当前字符是否在以,号分开的字符串中(dd不在xx,sss,xaf,fdsf中)
            </summary>
            <param name="TempChar">需检测字符</param>
            <param name="TempStr">待检测字符串</param>
            <returns>存在true,不存在false</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.DangerTagsFilter(System.String)">
            <summary>
            危险标签清理
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Escape(System.String)">
            <summary>
            对字符串进行兼容javascript脚本语言的ecsape编码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.getLen(System.String)">
            <summary>
            返回字符串的真实长度，一个汉字字符相当于两个单位长度(使用Encoding类)
            </summary>
            <param name="str">指定字符串</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ReplacePro(System.String,System.String,System.String,System.Int32)">
            <summary>
            高效率字符串替换 可控制替换次数
            </summary>
            <param name="original">原字符串</param>
            <param name="pattern">包含该关键词的字符串将被替换</param>
            <param name="replacement">关键词替换为？</param>
            <param name="replaceCount">替换次数 0为全部替换</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.CaseInsensitiveReplace(System.String,System.String,System.String)">
            <summary>
            替换字符串(忽略大小写)
            </summary>
            <param name="input">要进行替换的内容</param>
            <param name="oldValue">旧字符串</param>
            <param name="newValue">新字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            替换首次出现的字符串
            </summary>
            <param name="input">要进行替换的内容</param>
            <param name="oldValue">旧字符串</param>
            <param name="newValue">新字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            替换最后一次出现的字符串
            </summary>
            <param name="input">要进行替换的内容</param>
            <param name="oldValue">旧字符串</param>
            <param name="newValue">新字符串</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.FilterWords(System.String,System.String[])">
            <summary>
            根据词组过虑字符串(忽略大小写)
            </summary>
            <param name="input">要进行过虑的内容</param>
            <param name="filterWords">要过虑的词组</param>
            <returns>过虑后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.FilterWords(System.String,System.Char,System.String[])">
            <summary>
            根据词组过虑字符串(忽略大小写)
            </summary>
            <param name="input">要进行过虑的内容</param>
            <param name="mask">字符掩码</param>
            <param name="filterWords">要过虑的词组</param>
            <returns>过虑后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Base64StringEncode(System.String)">
            <summary>
            对字符串进行base64编码
            </summary>
            <param name="input">字符串</param>
            <returns>base64编码串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Base64StringDecode(System.String)">
            <summary>
            对base64字符串进行反编码
            </summary>
            <param name="input">base64编码串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Reverse(System.String)">
            <summary>
            字符串反转
            </summary>
            <param name="input">要进行反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.SentenceCase(System.String)">
            <summary>
            转成首字母大字形式
            </summary>
            <param name="input">要进行转换的字符串</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.GetInArrayID(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="strSearch">字符串</param>
            <param name="stringArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>字符串在指定字符串数组中的位置, 如不存在则返回-1</returns>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.Spaces(System.Int32)">
            <summary>
            生成指定数量的html空格符号
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ConvertToInt(System.Object)">
            <summary>
            将对像转换为整型。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.ConvertToLong(System.Object)">
            <summary>
            将对像转换为长整型。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.StringHelper.HtmlToString(System.String)">
            <summary>
            将HTML字符变成普通字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Web.StringHelper.GetGUIDHashCode">
            <summary>
            获取一个GUID的HashCode
            </summary>
        </member>
        <member name="P:XMS.Core.Web.StringHelper.GetGUID">
            <summary>
            获取一个GUID字符串
            </summary>
        </member>
        <member name="T:XMS.Core.Web.ResourceHelper">
            <summary>
            资源助手类
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.GetFileAbsoluteUrl(System.String,System.Int32)">
            <summary>
            获取文件绝对地址
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.IncludeFile(System.String,System.Int32)">
            <summary>
            加载文件
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.IncludeFile(System.String,System.Int32,System.Boolean,XMS.Core.Web.ResourceHelper.EnumIncludeFileHost)">
            <summary>
            取文件版本
            </summary>
            <param name="sFileName">文件名（含相对路径）</param>
            <param name="nVersionType">版本添加类型 0:test.v2011.gif 1:test.gif?v=2011</param>
            <param name="bAddTag">是否自动添加父标签</param>
            <param name="emType">文件服务器Host</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.ResourceHelper.GetUploadPicPath(System.String,System.String)">
            <summary>
            取文件服务器各种尺寸的图片地址
            </summary>
            <param name="sPath">文件路径</param>
            <param name="sSize">文件目录</param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Web.ResourceHelper.UploadSiteUrl">
            <summary>
            图片站点Url
            </summary>
        </member>
        <member name="P:XMS.Core.Web.ResourceHelper.ResourceSiteUrl">
            <summary>
            静态资源站点Url
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.WebHttpBindingHelper">
            <summary>
            当使用 WebHttpBinding 向外部暴露 rest 风格的接口时，由于 .net 内置的 JSON 格式的局限性，需要采用 Stream 参数和返回值用来接收或返回使用我们的 json 序列化机制，
            WebHttpBindingHelper 类提供的方法可用于将传入的 stream 参数反序列化为对象或者将执行结果序列化为流。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.WebHttpBindingHelper.DeserializeContent``1(System.IO.Stream)">
            <summary>
            使用 json 反序列化流中的内容为类型参数限定的对象并返回。
            </summary>
            <typeparam name="T">目标对象类型。</typeparam>
            <param name="contentStream">包含反序列化内容的流，流中的内容为 json 格式字符串。</param>
            <returns>反序列化后的对象。</returns>
        </member>
        <member name="M:XMS.Core.WCF.WebHttpBindingHelper.SerializeContent``1(``0,XMS.Core.Json.TimeFormat)">
            <summary>
            使用指定的时间格式对指定的对象进行 json 序列化，并将序列化结果以流的形式返回。
            </summary>
            <typeparam name="T">要序列化的对象的类型。</typeparam>
            <param name="content">要序列化的对象。</param>
            <param name="timeForamt">时间属性或字段的序列化格式。</param>
            <returns>包含序列化结果的流。</returns>
        </member>
        <member name="P:XMS.Core.WCF.AppAgentHeader.Name">
            <summary>
            app-agent 标头的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.AppAgentHeader.NameSpace">
            <summary>
            app-agent 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.Resource.DefaultResourceService">
            <summary>
            资源服务接口的默认实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Resource.DefaultResourceService.GetImageUrl(System.String,System.String,System.String)">
            <summary>
            获取指定名称和尺寸规格的图片的 Url，该方法需要在 app.config 或者默认配置文件（如web.config) 的 appsettings 节中添加键值为 RES_ImageServerUrl 的自定义项，用于配置图片服务器的格式化地址，如："http://upload{0}.xiaomishu.com"。
            </summary>
            <param name="rootPath">相对于 RES_ImageServerUrl 的根路径。</param>
            <param name="fileName">图片名称。</param>
            <param name="sizeSpeci">尺寸规格。</param>
            <returns>指定名称和尺寸规格的图片的 Url。</returns>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.CustomFileAppender">
            <summary>
            自定义日志文件输出器。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.CustomFileAppender.lastOpenFileOfDate">
            <summary>
            Holds date of last roll over
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.CustomFileAppender.m_maxFileSize">
            <summary>
            The default maximum file size is 10MB
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            Sets the quiet writer being used.
            </summary>
            <remarks>
            This method can be overridden by sub classes.
            </remarks>
            <param name="writer">the writer to set</param>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Write out a logging event.
            </summary>
            <param name="loggingEvent">the event to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Write out an array of logging events.
            </summary>
            <param name="loggingEvents">the events to write to file.</param>
            <remarks>
            <para>
            Handles append time behavior for RollingFileAppender.  This checks
            if a roll over either by date (checked first) or time (checked second)
            is need and then appends to the file last.
            </para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.ActivateOptions">
            <summary>
            ActivateOptions
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomFileAppender.DetermineCurSizeRollBackups">
            <summary>
            Determines curSizeRollBackups (only within the current roll point)
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.DirectoryByDate">
            <summary>
            获取一个值，该值指示是否按日期对日志进行分目录。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.KeepDays">
            <summary>
            获取一个值，该值指示日志保留天数，该选项仅在 DirectoryByDate 为 true 时有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaxFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size in bytes that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property is equivalent to <see cref="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaximumFileSize"/> except
            that it is required for differentiating the setter taking a
            <see cref="T:System.Int64"/> argument from the setter taking a <see cref="T:System.String"/> 
            argument.
            </para>
            <para>
            The default maximum file size is 10MB (10*1024*1024).
            </para>
            </remarks>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaximumFileSize">
            <summary>
            Gets or sets the maximum size that the output file is allowed to reach
            before being rolled over to backup files.
            </summary>
            <value>
            The maximum size that the output file is allowed to reach before being 
            rolled over to backup files.
            </value>
            <remarks>
            <para>
            This property allows you to specify the maximum size with the
            suffixes "KB", "MB" or "GB" so that the size is interpreted being 
            expressed respectively in kilobytes, megabytes or gigabytes. 
            </para>
            <para>
            For example, the value "10KB" will be interpreted as 10240 bytes.
            </para>
            <para>
            The default maximum file size is 10MB.
            </para>
            <para>
            If you have the option to set the maximum file size programmatically
            consider using the <see cref="P:XMS.Core.Logging.Log4net.CustomFileAppender.MaxFileSize"/> property instead as this
            allows you to set the size in bytes as a <see cref="T:System.Int64"/>.
            </para>
            </remarks>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.SolarDate">
            <summary>
            公历日期
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.LunarDateObj">
            <summary>
            农历日期对象
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.SolarFestival">
            <summary>
            公历假日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.LegalFestival">
            <summary>
            法定节日(包含农历和阳历假日)
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.ResultDate.LunarFestival">
            <summary>
            农历节日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.LunarYear">
            <summary>
            农历年份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.nLunarYear">
            <summary>
            农历年份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.LunarMonth">
            <summary>
            农历月份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.nLunarMonth">
            <summary>
            农历月份
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.LunarDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.LunarDate.nLunarDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.Festival.FestivalName">
            <summary>
            节日名称
            </summary>
        </member>
        <member name="P:XMS.Core.Calendar.Festival.IsLegal">
            <summary>
            是否法定
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.IRemoteCache">
            <summary>
            远程缓存接口
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.ICache">
            <summary>
            定义一组可用于访问本地缓存数据的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.ICache.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICache.SetItem(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICache.SetItem(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICache.SetItemWithNoExpiration(System.String,System.String,System.Object)">
            <summary>
            将指定项添加到缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICache.RemoveItem(System.String,System.String)">
            <summary>
            从缓存中移除指定的缓存项。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICache.GetItem(System.String,System.String)">
            <summary>
            从缓存中获取指定的缓存项。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICache.ClearRegion(System.String)">
            <summary>
            清空当前缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.LocalCacheElement.DependencyFile">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.LocalCacheElement.Capacity">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.LocalCacheElement.AsyncUpdateInterval">
            <summary>
            本地缓存的异步更新时间间隔。
            </summary>
        </member>
        <member name="T:XMS.Core.ITaskTrace">
            <summary>
            任务跟踪接口（默认不启用），启用时，每间隔指定时间（默认值一分钟）在独立文件（task\trace.log)中输出任务状态信息。
            </summary>
        </member>
        <member name="M:XMS.Core.ITaskTrace.Trace(System.Text.StringBuilder)">
            <summary>
            跟踪任务执行状态。
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:XMS.Core.ITask">
            <summary>
            任务接口
            </summary>
        </member>
        <member name="M:XMS.Core.ITask.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行
            </summary>
            <param name="lastExecuteTime">上次执行时间。</param>
        </member>
        <member name="P:XMS.Core.ITask.Name">
            <summary>
            获取任务的名称。
            </summary>
        </member>
        <member name="T:XMS.Core.IIntervalTask">
            <summary>
            循环性任务
            </summary>
        </member>
        <member name="M:XMS.Core.IIntervalTask.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XMS.Core.IIntervalTask.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="E:XMS.Core.IIntervalTask.Started">
            <summary>
            任务启动事件
            </summary>
        </member>
        <member name="E:XMS.Core.IIntervalTask.Stoped">
            <summary>
            任务停止事件
            </summary>
        </member>
        <member name="P:XMS.Core.IIntervalTask.ExecuteInterval">
            <summary>
            获取任务执行的时间间隔
            </summary>
        </member>
        <member name="T:XMS.Core.ITriggerTask">
            <summary>
            触发性任务接口
            </summary>
        </member>
        <member name="M:XMS.Core.ITriggerTask.GetNextExecuteTime">
            <summary>
            获取下次执行时间,触发性任务调度宿主底层使用下次执行时间对所有需要调度的任务进行升序排序，
            因此下次执行时间只有在执行的过程中才可以修改（原因是执行前该任务已经被从调度队列中移除），
            否则可能会造成调度队列顺序错乱，从而引发不可预知的错误。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.ITriggerTask.Host">
            <summary>
            获取或设置触发性任务所属的宿主。
            </summary>
        </member>
        <member name="P:XMS.Core.ITriggerTask.Key">
            <summary>
            获取该触发性任务的键，可根据该键值从调度宿主中获取当前接口的实例。
            </summary>
        </member>
        <member name="P:XMS.Core.ITriggerTask.NextExecuteTime">
            <summary>
            获取或设置下次执行时间。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.TriggerTaskBase">
            <summary>
            触发性任务基类
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.GetNextExecuteTime">
            <summary>
            获取下次执行时间,触发性任务调度宿主底层使用下次执行时间对所有需要调度的任务进行升序排序，
            因此下次执行时间只有在执行的过程中才可以修改（原因是执行前该任务已经被从调度队列中移除），
            否则可能会造成调度队列顺序错乱，从而引发不可预知的错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.OnTrace(System.Text.StringBuilder)">
            <summary>
            OnTrace
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.#ctor(System.String,System.String)">
            <summary>
            初始化 <see cref="T:XMS.Core.IntervalTaskBase"/> 类的新实例。
            </summary>
            <param name="key"></param>
            <param name="name"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行任务
            </summary>
            <param name="lastExecuteTime"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskBase.CompareTo(XMS.Core.ITriggerTask)">
            <summary>
            比较器实现，以用于在字典中对两个 触发性任务 强制进行排序。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.Host">
            <summary>
            获取或设置触发性任务所属的宿主。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.NextExecuteTime">
            <summary>
            获取或设置下次执行时间。
            触发性任务调度宿主底层使用下次执行时间对所有需要调度的任务进行升序排序，
            因此下次执行时间只有在执行的过程中才可以修改（原因是执行前该任务已经被从调度队列中移除），
            否则可能会造成调度队列顺序错乱，从而引发不可预知的错误。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.IsTraceEnabled">
            <summary>
            获取一个值，该值指示是否启用跟踪更能。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.Key">
            <summary>
            任务的键。
            </summary>
        </member>
        <member name="P:XMS.Core.TriggerTaskBase.Name">
            <summary>
            任务名称。
            </summary>
        </member>
        <member name="T:XMS.Core.IntervalTaskBase">
            <summary>
            循环性任务基类。
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.OnTrace(System.Text.StringBuilder)">
            <summary>
            OnTrace
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.#ctor(System.String,System.TimeSpan)">
            <summary>
            初始化 <see cref="T:XMS.Core.IntervalTaskBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.#ctor(System.String,System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            初始化 <see cref="T:XMS.Core.IntervalTaskBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
            <param name="priority"></param>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行当前任务
            </summary>
            <param name="lastExecuteTime">上次执行的时间。</param>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XMS.Core.IntervalTaskBase.Awaken">
            <summary>
            
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.IsTraceEnabled">
            <summary>
            获取一个值，该值指示是否启用跟踪更能。
            </summary>
        </member>
        <member name="E:XMS.Core.IntervalTaskBase.Started">
            <summary>
            任务启动事件
            </summary>
        </member>
        <member name="E:XMS.Core.IntervalTaskBase.Stoped">
            <summary>
            任务停止事件
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.Name">
            <summary>
            任务名称。
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.ExecuteInterval">
            <summary>
            心跳时间
            </summary>
        </member>
        <member name="P:XMS.Core.IntervalTaskBase.IsRunning">
            <summary>
            获取一个值，该值指示任务是否正在运行。
            </summary>
        </member>
        <member name="T:XMS.Core.TriggerTaskHostBase">
            <summary>
            触发性任务宿主任务，可用于执行大量触发性任务。
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.OnTrace(System.Text.StringBuilder)">
            <summary>
            OnTrace
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.#ctor(System.String,System.TimeSpan)">
            <summary>
            使用指定的名称、时间间隔初始化 <see cref="T:XMS.Core.TriggerTaskHostBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.#ctor(System.String,System.TimeSpan,System.Threading.ThreadPriority)">
            <summary>
            使用指定的名称、时间间隔、线程优先级初始化 <see cref="T:XMS.Core.TriggerTaskHostBase"/> 类的新实例。
            </summary>
            <param name="name"></param>
            <param name="flushInterval"></param>
            <param name="priority"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.CreateTriggerTasks">
            <summary>
            在启动的时候，创建要执行的触发器任务数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.ContainsTriggerTask(XMS.Core.ITriggerTask)">
            <summary>
            获取宿主中是否包含指定的触发性任务。
            </summary>
            <param name="triggerTask"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.GetTriggerTask(System.String)">
            <summary>
            获取指定键的触发性任务。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.UnregisterTriggerTask(System.String)">
            <summary>
            删除一个触发性任务。
            </summary>
            <param name="key"></param>
            <returns>成功删除返回 true，否则返回 false。</returns>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.RegisterTriggerTask(XMS.Core.ITriggerTask)">
            <summary>
            注册触发性任务。
            </summary>
            <param name="triggerTask"></param>
        </member>
        <member name="M:XMS.Core.TriggerTaskHostBase.Execute(System.Nullable{System.DateTime})">
            <summary>
            执行
            </summary>
            <param name="lastExecuteTime"></param>
        </member>
        <member name="P:XMS.Core.TriggerTaskHostBase.SyncObject">
            <summary>
            获取当前调度宿主中用于线程同步的对象。
            </summary>
        </member>
        <member name="M:XMS.Core.DefaultTriggerTaskHost.#ctor">
            <summary>
            使用指定的名称、时间间隔初始化 <see cref="T:XMS.Core.TriggerTaskHostBase"/> 类的新实例。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.ManageableWindowsServiceBase">
            <summary>
            实现一个可用来承载支持集中配置功能的 WCF 服务的 Windows Service 宿主基类，该宿主中承载的服务支持配置服务且具有高可管理性的 <see cref="T:XMS.Core.WCF.ManageableServiceHost"/> 的实例的工厂。 
            </summary>
            <remarks>
            <para>
            集中配置注意：当某应用程序在中心配置服务器上的服务配置（Services.config）发生变化时，应用程序会响应该变化并应用新的配置，新的配置生效前的大部分正在执行的请求可以正常执行完成，
            但仍然会有少数请求（例如执行时间过长的请求）被强制关闭，在响应配置文件变化到配置文件生效这段时间，新的请求会被积极拒绝，
            对于这些强制关闭和拒绝的请求，可以通过将同一服务部署到多台备份机器上并利用客户端应用程序通过轮询实现的可靠性机制来将这一部分请求转移到备份机器上重新执行，
            从而可有效避免错误的出现。最后，为了尽可能的减少因配置变化引发的错误，请尽量在访问量最小的时候更新配置。
            </para>
            <para>
            服务基址配置说明：（IP + 端口）？ 方案需要讨论确定
            </para>
            </remarks>
            <example>
            <para>
            服务配置信息可以从系统默认配置文件(即: 应用程序名称.exe.Config)中独立出来（参考集中配置机制，按如下顺序查找：conf/Services.config &gt; Services.config &gt; [应用程序名称].exe.config ），如下所示：
             <code>
               &lt;services&gt;
            	 &lt;service name="Service1" behaviorConfiguration="IOCBehavior"&gt;
            		&lt;endpoint binding="netTcpBinding" contract="IService1" bindingConfiguration="TCPBindingConfig"/&gt;
            	 &lt;/service&gt;
               &lt;/services&gt;
            </code>
            </para>
            </example>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.#ctor">
            <summary>
            初始化 ManageableWindowsServiceBase 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.OnStart(System.String[])">
            <summary>
            启动 Windows 服务。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.StartServiceHosts">
            <summary>
            启动 WCF 服务宿主。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.StartTasks">
            <summary>
            启动任务。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.CreateServiceHosts">
            <summary>
            创建 WCF 服务宿主。
            </summary>
            <returns>新创建 WCF 服务宿主。</returns>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.CreateTasks">
            <summary>
            创建要在当前 Windows 服务中运行的任务组成的数组。
            </summary>
            <returns>要在当前 Windows 服务中运行的任务组成的数组。</returns>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWindowsServiceBase.OnStop">
            <summary>
            停止 WCF 服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWindowsServiceBase.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWindowsServiceBase.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWindowsServiceBase.ServiceHosts">
            <summary>
            获取当前服务宿主。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWindowsServiceBase.Tasks">
            <summary>
            获取当前服务中运行的任务列表。
            </summary>
        </member>
        <member name="T:XMS.Core.SerialNumber.SerialNumberSeed">
            <summary>
            序列号种子，用于存储指定键值序列号生成器的种子。
            </summary>
        </member>
        <member name="P:XMS.Core.SerialNumber.SerialNumberSeed.Key">
            <summary>
            生成器的键。
            </summary>
        </member>
        <member name="P:XMS.Core.SerialNumber.SerialNumberSeed.CurrentValue">
            <summary>
            当前序列号值
            </summary>
        </member>
        <member name="P:XMS.Core.SerialNumber.SerialNumberSeed.TS">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DataTableAdapter">
            <summary>
            <b>DataTableAdapter</b> 提供 DataTable 和数据库之间的通信。
            </summary>
            <remarks>
            只能使用 <see cref="T:XMS.Core.IEntityContext"/> 的 <see cref="M:XMS.Core.IDatabase.CreateDataTableAdapter"/> 方法创建 <see cref="T:XMS.Core.Data.DataTableAdapter"/> 的实例，
            <b>DataTableAdapter</b> 通过 <b>IEntityContext</b> 提供的连接及事务（如果开始了事务的话）与数据库进行通信、执行查询或存储过程，
            并返回用返回数据填充的新数据表或是用返回数据填充现有 <b>DataTableAdapter</b>。
            <b>DataTableAdapter</b> 还用于将更新数据从应用程序发送回数据库。
            </remarks>
            <example>
            初始化：
            	DataTableAdapter adapter = entityContext.CreateDataTableAdapter();
            填充表:
            	DataTabale table = new DataTable(entityContext.GetPartitionTableName("Order"));
              不需要参数时：
            	adapter.SetSelectCommand("select * from " + entityContext.GetPartitionTableName("Order") + " where OrderId&gt;10", parameters).Fill(table);
              简化命令写法时：
            	Dictionary&lt;string, object&gt; parameters = new Dictionary&lt;string, object&gt;(1);
            	parameters["OrderId"] = 10;  或者 parameters["@OrderId"] = 10;
            	adapter.SetSelectCommand("select * from " + entityContext.GetPartitionTableName("Order") + " where OrderId&gt;@OrderId", parameters).Fill(table);
              完整命令写法时：
            	adapter.SetSelectCommand("select * from " + entityContext.GetPartitionTableName("Order") + " where OrderId&gt;@OrderId", 
            		new System.Data.Common.DbParameter[]{
            			adapter.CreateParameter("OrderId", DbType.Int32, 10)
            		}).Fill(table);
            使用自动命令更新对表的更改:
            	adapter.BuildCommands().Update(table);
            使用自定义命令更新表:
              1.设置Update命令:
            	简化命令写法：
            	adapter.SetUpdateCommand("update " + entityContext.GetPartitionTableName("Order") + " set Title=@Title,CustomerName=@CustomerName where OrderId=@OrderId",
            		"Title", "CustomerName", "OrderId", "A");
            	完整命令写法：
            	adapter.SetUpdateCommand("update " + entityContext.GetPartitionTableName("Order") + " set Title=@Title,CustomerName=@CustomerName where OrderId=@OrderId",
            		new System.Data.Common.DbParameter[]{
            				adapter.CreateParameter("Title", DbType.String, 100),
            				adapter.CreateParameter("@CustomerName", DbType.String, 200),
            				adapter.CreateParameter("OrderId", DbType.Int32)
            		});
              2.设置Delete命令： 简化和完整两种写法分别参考Update命令
            	adapter.SetDeleteCommand(...);
              3.设置Insert命令： 简化和完整两种写法分别参考Update命令
            	adapter.SetInsertCommand(...);
              4.执行更新	
            	this.dataTableAdapter.Update(table); 或者 this.dataTableAdapter.Update(table.Rows); 或者 this.dataTableAdapter.Update(dataset, tableName);
            创建自定义命令并执行
            	using(DbCommand command = adapter.CreateCommand("update " + entityContext.GetPartitionTableName("Order") + " set Title=@Title,CustomerName=@CustomerName where OrderId=@OrderId",
            		new System.Data.Common.DbParameter[]{
            				adapter.CreateParameter("Title", DbType.String, 100),
            				adapter.CreateParameter("@CustomerName", DbType.String, 200),
            				adapter.CreateParameter("OrderId", DbType.Int32)
            		})
            	{
            		foreach(var item in list)
            		{
            			command.Parameters["@Title"] = item.Title;
            			command.Parameters["@CustomerName"] = item.CustomerName;
            			command.Parameters["@OrderId"] = item.OrderId;
            			
            			command.ExecuteNoneQuery();
            		}
            	}
            </example>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:XMS.Core.IEntityContext"/> and 
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetSelectCommand(System.String)">
            <summary>
            设置不需要任何参数的非参数化查询命令。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetSelectCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            设置查询命令。查询命令必须为其中所使用到的每个参数指定参数值。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetInsertCommand(System.String,System.String[])">
            <summary>
            设置插入命令。插入命令不必为命令所需要的每个参数指定参数值，而是在调用 Update 方法时根据 DataTable 或者 DataRow 自动推断参数值。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetUpdateCommand(System.String,System.String[])">
            <summary>
            设置更新命令。更新命令不必为命令所需要的每个参数指定参数值，而是在调用 Update 方法时根据 DataTable 或者 DataRow 自动推断参数值。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetDeleteCommand(System.String,System.String[])">
            <summary>
            设置删除命令。删除命令不必为命令所需要的每个参数指定参数值，而是在调用 Update 方法时根据 DataTable 或者 DataRow 自动推断参数值。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetSelectCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            设置查询命令，显示设置查询命令所需要的参数包括参数类型、长度、映射列等信息，命令生成后，自动为其调用 Prepare 方法以提高后续重复调用时的性能。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetInsertCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            设置插入命令，显示设置查询命令所需要的参数包括参数类型、长度、映射列等信息，命令生成后，自动为其调用 Prepare 方法以提高后续重复调用时的性能。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetUpdateCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            设置更新命令，显示设置查询命令所需要的参数包括参数类型、长度、映射列等信息，命令生成后，自动为其调用 Prepare 方法以提高后续重复调用时的性能。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.SetDeleteCommand(System.String,System.Data.Common.DbParameter[])">
            <summary>
            设置删除命令，显示设置查询命令所需要的参数包括参数类型、长度、映射列等信息，命令生成后，自动为其调用 Prepare 方法以提高后续重复调用时的性能。
            </summary>
            <param name="commandText">要执行的命令文本。</param>
            <param name="parameters">执行命令所需要的参数数组。</param>
            <returns>当前 DataTableAdapter 实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.CreateParameter(System.String,System.Object)">
            <summary>
            返回强类型的 <see cref="T:System.Data.Common.DbParameter"/> 实例。 
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="value">参数值</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新强类型实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            返回强类型的 <see cref="T:System.Data.Common.DbParameter"/> 实例。 
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">参数类型</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新强类型实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.CreateParameter(System.String,System.Data.DbType,System.Boolean,System.Object)">
            <summary>
            返回实现 <see cref="T:System.Data.Common.DbParameter"/> 类的提供程序的类的一个新实例。
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="isNullable">如果允许接受空值，则为 <b>true</b>；否则为 <b>false</b>。</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            返回强类型的 <see cref="T:System.Data.Common.DbParameter"/> 实例。 
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新强类型实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.CreateParameter(System.String,System.Data.DbType,System.Int32,System.String,System.Object)">
            <summary>
            返回强类型的 <see cref="T:System.Data.Common.DbParameter"/> 实例。 
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
            <param name="sourceColumn">源列的名称</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新强类型实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            返回强类型的 <see cref="T:System.Data.Common.DbParameter"/> 实例。 
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
            <param name="parameterDirection">参数的方向</param>
            <param name="isNullable">如果源列可为空，则为 <b>true</b>；否则为 <b>false</b>。</param>
            <param name="precision">值的精度</param>
            <param name="scale">值的小数位数</param>
            <param name="sourceColumn">源列的名称</param>
            <param name="sourceVersion">原列的版本</param>
            <param name="value">参数的值</param>
            <returns><see cref="T:System.Data.Common.DbParameter"/> 的新强类型实例。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.BuildCommands">
            <summary>
            为数据适配器创建自动命令
            </summary>
            <remarks>
            自动创建的命令不覆盖自定义的插入、删除、更新命令
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.Fill(System.Data.DataTable)">
            <summary>
            执行由 <see cref="P:XMS.Core.Data.DataTableAdapter.SelectCommand"/> 指定的命令，在 <see cref="T:System.Data.DataTable"/> 中添加或刷新行以匹配使用 <b>DataTable</b> 名称的数据源中的行。
            </summary>
            <param name="dataTable">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataTable"/>。</param>
            <returns>已填充的 <see cref="T:System.Data.DataTable"/>。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.Update(System.Data.DataSet,System.String)">
            <summary>
            为指定 <see cref="T:System.Data.DataSet"/> 中指定名称的表的每个已插入、已更新或已删除的行调用相应的 <b>INSERT</b>、<b>UPDATE</b> 或 <b>DELETE</b> 语句。
            </summary>
            <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet"/>。 </param>
            <param name="tableName">用于表映射的源表的名称。</param>
            <returns><see cref="T:System.Data.DataSet"/> 中成功更新的行数。</returns>
            <remarks>
            <b>Update(DataSet,string,bool)</b>方法调用 <c>DbDataAdapter.Update(DataSet)</c> 方法进行更新。
            <para>如果需要手动设置命令而未指定 INSERT、UPDATE 或 DELETE 语句，<b>Update</b> 方法会生成异常。
            否则，如果设置了 <see cref="P:XMS.Core.Data.DataTableAdapter.SelectCommand"/> 属性，则可以创建 <b>CommandBuilder</b>为单个表更新自动生成 SQL 语句。
            然后，CommandBuilder 将生成其他任何未设置的 SQL 语句。此生成逻辑要求 <b>DataSet</b> 中存在键列信息。</para>
            <para>可以使用 <see cref="M:XMS.Core.Data.DataTableAdapter.SetInsertCommand(System.String,System.String[])"/>、<see cref="M:XMS.Core.Data.DataTableAdapter.SetUpdateCommand(System.String,System.String[])"/>、<see cref="M:XMS.Core.Data.DataTableAdapter.SetDeleteCommand(System.String,System.String[])"/> 方法显示指定 INSERT、UPDATE 或 DELETE 语句。
            使用方法示例：<br/><c>this.SetInsertCommand(string,DbParameter[])</c> ；</para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.Update(System.Data.DataTable)">
            <summary>
            为指定 <see cref="T:System.Data.DataTable"/> 中每个已插入、已更新或已删除的行调用相应的 <b>INSERT</b>、<b>UPDATE</b> 或 <b>DELETE</b> 语句。
            </summary>
            <param name="dataTable">用于更新数据源的 <see cref="T:System.Data.DataTable"/>。</param>
            <returns><see cref="T:System.Data.DataTable"/> 中成功更新的行数。</returns>
            <remarks>
            <b>Update(DataTable,bool)</b>方法调用 <c>DbDataAdapter.Update(DataTable)</c> 方法进行更新。
            <para>如果需要显示设置命令而未指定 INSERT、UPDATE 或 DELETE 语句，<b>Update</b> 方法会生成异常。
            否则，如果设置了 <see cref="P:XMS.Core.Data.DataTableAdapter.SelectCommand"/> 属性，则可以创建 <b>CommandBuilder</b>为单个表更新自动生成 SQL 语句。
            然后，CommandBuilder 将生成其他任何未设置的 SQL 语句。此生成逻辑要求 <b>DataSet</b> 中存在键列信息。</para>
            <para>可以使用 <see cref="M:XMS.Core.Data.DataTableAdapter.SetInsertCommand(System.String,System.String[])"/>、<see cref="M:XMS.Core.Data.DataTableAdapter.SetUpdateCommand(System.String,System.String[])"/>、<see cref="M:XMS.Core.Data.DataTableAdapter.SetDeleteCommand(System.String,System.String[])"/> 方法显示指定 INSERT、UPDATE 或 DELETE 语句。
            使用方法示例：<br/><c>this.SetInsertCommand(string,DbParameter[])</c> ；</para>
            </remarks>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.Update(System.Data.DataRow[])">
            <summary>
            为指定 <see cref="T:System.Data.DataRow"/> 数组中每个已插入、已更新或已删除的行调用相应的 <b>INSERT</b>、<b>UPDATE</b> 或 <b>DELETE</b> 语句。
            </summary>
            <param name="rows">用于更新数据源的<see cref="T:System.Data.DataRow"/> 数组。</param>
            <returns><see cref="T:System.Data.DataRow"/> 数组中成功更新的行数。</returns>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.PretreatmentCommandText(System.String)">
            <summary>
            对将要执行的命令进行预处理，以确保命令可以在不同的数据库上执行，这通常用于直接对 DbCommand.CommandText 进行赋值的场合。
            </summary>
            <param name="commandText"></param>
            <returns></returns>
            <example>
            在下面的情况下，需要使用此方法对命令进行预处理：
            this._insertCommand = this.dataManager.Connection.CreateCommand();
            this._insertCommand.Connection = this.dataManager.Connection;
            this._insertCommand.Transaction = this.dataManager.Transaction;
            this._insertCommand.CommandType = System.Data.CommandType.Text;
            this._insertCommand.CommandText = this.dataManager.PretreatmentCommandText("INSERT INTO S_MESSAGES(TO_NUMBER,MESSAGE,SEND_TIME,ORG_ID,FLAG) VALUES (@TO_NUMBER,@MESSAGE,@SEND_TIME,@ORG_ID,@FLAG)");
            </example>
        </member>
        <member name="M:XMS.Core.Data.DataTableAdapter.IsStoreProcedure(System.String)">
            <summary>
            判定指定的命令是否存储过程
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Data.DataTableAdapter.SelectCommand">
            <summary>
            Gets the select <see cref="T:System.Data.Common.DbCommand"/> used by this instance of the <see cref="T:XMS.Core.IEntityContext"/>.
            </summary>
            <value>
            A <see cref="T:System.Data.Common.DbCommand"/> used during executing query.
            </value>
            <remarks>
            The <b>SelectCommand</b> can be used to access select command parameters.
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.DataTableAdapter.InsertCommand">
            <summary>
            Gets the insert <see cref="T:System.Data.Common.DbCommand"/> used by this instance of the <see cref="T:XMS.Core.IEntityContext"/>.
            </summary>
            <value>
            A <see cref="T:System.Data.Common.DbCommand"/> used during executing query.
            </value>
            <remarks>
            The <b>InsertCommand</b> can be used to access insert command parameters.
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.DataTableAdapter.UpdateCommand">
            <summary>
            Gets the update <see cref="T:System.Data.Common.DbCommand"/> used by this instance of the <see cref="T:XMS.Core.IEntityContext"/>.
            </summary>
            <value>
            A <see cref="T:System.Data.Common.DbCommand"/> used during executing query.
            </value>
            <remarks>
            The <b>UpdateCommand</b> can be used to access update command parameters.
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.DataTableAdapter.DeleteCommand">
            <summary>
            Gets the delete <see cref="T:System.Data.Common.DbCommand"/> used by this instance of the <see cref="T:XMS.Core.IEntityContext"/>.
            </summary>
            <value>
            A <see cref="T:System.Data.Common.DbCommand"/> used during executing query.
            </value>
            <remarks>
            The <b>DeleteCommand</b> can be used to access delete command parameters.
            </remarks>
        </member>
        <member name="P:XMS.Core.Data.DataTableAdapter.Adapter">
            <summary>
            获取用于数据库访问的数据适配器。
            </summary>
        </member>
        <member name="P:XMS.Core.Data.DataTableAdapter.Builder">
            <summary>
            获取用于创建 SQL 执行语句的命令构建器。
            </summary>
        </member>
        <member name="T:XMS.Core.Data.DataTableAdapter.CommandAction">
            <summary>
            Specifies the action that command is supposed to perform, i.e. Select, Insert, Update, Delete.
            It is used in Execute methods of the <see cref="T:XMS.Core.IEntityContext"/> class to identify command instance 
            to be used.
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.#ctor">
            <summary>
            构造函数。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.Code">
            <summary>
            编码。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.Caption">
            <summary>
            标题。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.SortNo">
            <summary>
            序号。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.ServiceModel.RemoteDictionaryItem.RequireDescription">
            <summary>
            是否需要描述。
            </summary>
        </member>
        <member name="T:XMS.Core.Security.UserAuthorization">
            <summary>
            表示一个用户授权对象，该对象指示用户可以访问系统的权限。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.UserId">
            <summary>
            用户 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.OrgId">
            <summary>
            组织 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.OrgPath">
            <summary>
            组织路径。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.DutyLevel">
            <summary>
            用户在组织中的职务级别， 1 通常为 主管级，可查看同一组织内所有其它级别用户拥有的数据。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.Resources">
            <summary>
            用户可访问的资源。
            </summary>
        </member>
        <member name="P:XMS.Core.Security.UserAuthorization.Roles">
            <summary>
            用户所拥有的角色。
            </summary>
        </member>
        <member name="T:XMS.Core.IOutline">
            <summary>
            纲要接口，为复杂原始对象提供纲要功能，该纲要可简练的表达原始对象的关键信息。
            </summary>
        </member>
        <member name="M:XMS.Core.IOutline.ToOutline">
            <summary>
            返回一个新的对象，该对象表示当前对象的纲要信息，这些信息已足够描述原始对象的关键信息，在需要的时候，可以将该纲要对象进行存储，这比存储原始对象可大幅节省存储空间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Caching.CacheUtil.CheckCanRetry(System.Exception)">
            <summary>
            返回 true， 表示可以重试，返回 false，表示不需要重试
            </summary>
            <param name="err"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Caching.CacheUtil.HandlerError(System.String,System.String,System.Exception)">
            <summary>
            返回 true， 表示需要重试，返回 false，表示不需要重试
            </summary>
            <param name="regionName"></param>
            <param name="key"></param>
            <param name="err"></param>
            <returns>false， 表示中断性错误，服务器不可用，不需要重试， true，表示中断性错误，服务器继续可用，可重试。</returns>
        </member>
        <member name="T:XMS.Core.Caching.DistributeCacheProvider">
            <summary>
            分布式缓存提供程序。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.#ctor(System.Configuration.Configuration)">
            <summary>
            初始化 DistributeCacheProvider 类的新实例。
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.GetDistributeCache(System.String,System.String)">
            <summary>
            获取指定缓存名称和分区名称的分布式缓存对象。
            </summary>
            <param name="cacheName">缓存名称。</param>
            <param name="regionName">分区名称。</param>
            <returns>具有指定缓存名称和分区名称的分布式缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.CreateDistributeCache(System.String,System.String)">
            <summary>
            创建具有指定缓存名称和分区名称的分布式缓存对象。
            </summary>
            <param name="cacheName">缓存名称。</param>
            <param name="regionName">分区名称。</param>
            <returns>具有指定缓存名称和分区名称的分布式缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheProvider.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="P:XMS.Core.Caching.DistributeCacheProvider.Configuration">
            <summary>
            获取当前分布式缓存提供程序相关的配置对象。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.DistributeCacheProvider.DistributeCaches">
            <summary>
            获取分布式缓存提供程序管理的分布式缓存对象组成的集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.CacheSettingsSection.CacheVersion">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.IOCBehavior">
            <summary>
            提供与服务日志记录行为相关的属性。
            </summary>
            <remarks>
            日志可在服务级别和操作级别发生，此类同时支持这两种级别。
            </remarks>
        </member>
        <member name="T:XMS.Core.WCF.ServiceInterceptorBehavior">
            <summary>
            实现一种对服务端应用程序中的整个服务的全部操作进行运行时拦截的行为。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.ServiceInterceptorBehavior.ShowExceptionDetailToClient">
            <summary>
            获取一个值，该值指示是否应向客户端展示异常详细信息。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.ServiceInterceptorBehavior"/> 类的新实例。
            </summary>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.CreateOperationInterceptorBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Description.OperationDescription)">
            <summary>
            创建 <see cref="T:XMS.Core.WCF.OperationInterceptorBehavior"/> 对象，该对象用于为整个服务的每一个操作创建可在运行时拦截操作的拦截器。
            </summary>
            <param name="endpoint"></param>
            <param name="operation"></param>
            <returns>可用于为整个服务的每一个操作创建可在运行时拦截操作的拦截器的 <see cref="T:XMS.Core.WCF.OperationInterceptorBehavior"/> 对象。</returns>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
            <param name="endpoints"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
        </member>
        <member name="M:XMS.Core.WCF.ServiceInterceptorBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            
            </summary>
            <param name="serviceDescription"></param>
            <param name="serviceHostBase"></param>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehavior.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.IOCBehavior"/> 类的新实例。
            </summary>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.IOCBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            插入自定义扩展对象。
            </summary>
            <param name="serviceDescription">服务说明。</param>
            <param name="serviceHostBase">当前正在生成的宿主。</param>
        </member>
        <member name="T:XMS.Core.WCF.InvokeChainHeader">
            <summary>
            调用链自定义标头。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.InvokeChainHeader.name">
            <summary>
            invoke-chain 标头的名称。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.InvokeChainHeader.nameSpace">
            <summary>
            invoke-chain 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.Tasks.TaskManager">
            <summary>
            表示 ITask 的管理器，用于对任务实例进行管理，可响应配置文件变化事件。
            </summary>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.RegisterTask(System.Type)">
            <summary>
            向 ManageableServiceHostFactory 中注册任务类型。
            </summary>
            <param name="taskType">要注册的任务类型。</param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.RegisterTask(XMS.Core.ITask)">
            <summary>
            向 ManageableServiceHostFactory 注册任务实例。
            </summary>
            <param name="taskInstance">要注册的任务实例。</param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.Start">
            <summary>
            启动服务管理器。
            </summary>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.Stop">
            <summary>
            停止服务管理器。
            </summary>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.LogToTrace(System.String)">
            <summary>
            将指定的消息记录到跟踪日志，通常在 OnTrace 方法之外调用。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.LogToTrace(System.Exception)">
            <summary>
            将指定的异常记录到任务跟踪日志，通常在 OnTrace 方法之外调用。
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Tasks.TaskManager.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="P:XMS.Core.Tasks.TaskManager.Instance">
            <summary>
            ManageableServiceHostManager 类的单例访问入口。
            </summary>
        </member>
        <member name="P:XMS.Core.Tasks.TaskManager.DefaultTriggerTaskHost">
            <summary>
            获取系统内置的默认触发性任务宿主。
            </summary>
        </member>
        <member name="P:XMS.Core.Tasks.TaskManager.IsTraceEnabled">
            <summary>
            获取一个值，该值指示是否启用跟踪更能。
            </summary>
        </member>
        <member name="T:XMS.Core.RequestException">
            <summary>
            表示在请求验证过程中引发的异常。
            </summary>
        </member>
        <member name="T:XMS.Core.BusinessException">
            <summary>
            表示在业务处理过程中引发的异常。
            </summary>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.BusinessException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.BusinessException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.BusinessException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Int32)">
            <summary>
            初始化 <see cref="T:XMS.Core.BusinessException"/> 类的一个新实例。
            </summary>
            <param name="code">错误码。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            此构造函数用 code 参数初始化新实例的 Code 属性。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Int32,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.BusinessException"/> 类的实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.BusinessException"/> 类的新实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.BusinessException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.BusinessException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="P:XMS.Core.BusinessException.Code">
            <summary>
            错误码。
            </summary>
        </member>
        <member name="M:XMS.Core.RequestException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.RequestException"/> 类的新实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.RequestException.#ctor(System.Int32,System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.RequestException"/> 类的新实例。
            </summary>
            <param name="code">错误码。</param>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.RequestException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="P:XMS.Core.RequestException.InnerMessage">
            <summary>
            获取描述异常的消息的内部版本，该版本仅供服务器内部使用
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.MessageInfo">
            <summary>
            消息相关的信息。
            </summary>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageInfo">
            <summary>
            定义一组接口，以便在消息处理程序中可以访问收到的消息相关的信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageInfo.ReceiveTime">
            <summary>
            获取一个值，该值指示消息的接收时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageInfo.HandleCount">
            <summary>
            处理次数。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageInfo.LastHandleTime">
            <summary>
            获取一个值，该值指示消息的接收时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.IMessageInfo.Message">
            <summary>
            获取相关的原始消息。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageInfo.#ctor(XMS.Core.Messaging.ServiceModel.Message,System.DateTime,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            初始化 MessageInfo 类的新实例。
            </summary>
            <param name="message">原始消息。</param>
            <param name="receiveTime">本地消息接收时间。</param>
        </member>
        <member name="P:XMS.Core.Messaging.MessageInfo.ReceiveTime">
            <summary>
            获取一个值，该值指示消息的接收时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageInfo.HandleCount">
            <summary>
            处理次数。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageInfo.LastHandleTime">
            <summary>
            获取一个值，该值指示消息的接收时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageInfo.Message">
            <summary>
            获取相关的原始消息。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageInfo.HandleError">
            <summary>
            获取或设置本次消息处理过程中发生的错误。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.LogCenterAppender">
            <summary>
            日志中心输出器
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.LogCenterAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.LogCenterAppender.RequiresLayout">
            <summary>
            不需要布局
            </summary>
        </member>
        <member name="T:XMS.Core.KeyValue`2">
            <summary>
            表示用于存储两个相关对象的基本结构。
            </summary>
        </member>
        <member name="M:XMS.Core.KeyValue`2.#ctor">
            <summary>
            初始化 Pair 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.KeyValue`2.Key">
            <summary>
            获取或设置二元结构的第一个 object。 
            </summary>
        </member>
        <member name="P:XMS.Core.KeyValue`2.Value">
            <summary>
            获取或设置二元结构的第二个 object。 
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Value">
            <summary>
            获取或设置当前字典项的值。
            </summary>
            <remarks>
            同一个字典中，字典项的值是唯一的。
            字典项的值是系统中引用字典时的实际存储数据。
            </remarks>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Code">
            <summary>
            获取或设置当前字典项的编码。
            </summary>
            <remarks>
            通常在字典数据定义中会为每个数据项定义一个编码。
            </remarks>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Caption">
            <summary>
            获取或设置当前字典项的标题。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.SortNo">
            <summary>
            获取或设置字典项在所属字典项树结构层级中的排序编号。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.RequireDescription">
            <summary>
            是否需要描述。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Parent">
            <summary>
            获取当前字典项所属的父级字典项。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Children">
            <summary>
            获取当前字典项中包含的子级字典项集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItem.Level">
            <summary>
            获取当前字典项的级别
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.IAppSettingSupport">
            <summary>
            定义一个接口，实现该接口的对象支持在 AppSetting.config 中进行配置，可通过配置服务的 GetAppSetting&lt;T&gt; 或  GetAppSetting&lt;T&gt; 方法进行读取。
            注意：该接口不包含任何方法的定义，因此不需要进行实现，但要求实现此接口的对象必须提供仅传入一个字符串类型参数的构造函数。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileType">
            <summary>
            配置文件的类型。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.App">
            <summary>
            表示 App.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.AppSettings">
            <summary>
            表示 AppSettings.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.ConnectionStrings">
            <summary>
            表示 ConnectionStrings.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Services">
            <summary>
            表示 Services.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.ServiceReferences">
            <summary>
            表示 ServiceReferences.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Log">
            <summary>
            表示 Log.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Cache">
            <summary>
            表示 Cache.Config 配置文件。
            </summary>
        </member>
        <member name="F:XMS.Core.Configuration.ConfigFileType.Other">
            <summary>
            表示其它配置文件。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.IConfigService">
            <summary>
            定义一组可用于访问集中配置系统的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetConfigurationFile(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            根据指定的配置文件名称，获取可用的配置文件（物理路径）。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>可用的配置文件的路径。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetConfiguration(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            从配置系统中获取指定文件名称的配置对象。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>配置对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting(System.String,System.String)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项的原始值。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
            <remarks>
            GetAppSetting(string,string) 方法直接从配置文件相关联的 Configuration 对象中读取配置内容，
            而 GetAppSetting&lt;T&gt;(string, T) 等泛型重载方法则先从缓存服务中读取已解析的强类型配置数据中读取内容，
            由于缓存服务依赖于配置服务，在 容器初始化、配置服务初始化、RunContext 的 RunMode 属性等场景中，只能通过非泛型的 GetAppSetting 接口获取配置信息，
            不能通过泛型的 GetAppSetting 方法获取配置信息，以避免容器初始化死循环（堆栈溢出）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting``1(System.String,``0)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的已解析配置项，配置项的原始内容被解析为类型参数限定的类型并且放入缓存中。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting``1(System.String,``0[])">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项数组，该配置项数组以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的数组并且放入缓存中。
            </summary>
            <param name="key">要获取的配置项数组的键。</param>
            <param name="defaultValues">要获取的配置项数组的默认值。</param>
            <returns>要获取的配置项数组的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetAppSetting``1(System.String,System.Collections.Generic.HashSet{``0})">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项字典，该配置项字典以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的集合并且放入缓存中。
            </summary>
            <param name="key">要获取的配置项字典的键。</param>
            <param name="defaultValues">要获取的配置项字典的默认值。</param>
            <returns>要获取的配置项字典的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetConnectionString(System.String)">
            <summary>
            从 ConnectionStrings.config 配置文件中获取指定键值的连接字符串。
            </summary>
            <param name="key">要获取的连接字符串的键。</param>
            <returns>要获取的连接字符串的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetSection(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSection 对象。
            </summary>
            <param name="sectionName">要返回的 ConfigurationSection 的名称。</param>
            <returns>指定的 ConfigurationSection 对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.IConfigService.GetSectionGroup(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSectionGroup 对象。
            </summary>
            <param name="sectionGroupName">要返回的 ConfigurationSectionGroup 的名称。</param>
            <returns>指定的 ConfigurationSectionGroup 对象。</returns>
        </member>
        <member name="E:XMS.Core.Configuration.IConfigService.ConfigFileChanged">
            <summary>
            在配置文件发生变化时发生，用于通知客户端配置文件已经发生更改。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.IConfigService.EnableConcentratedConfig">
            <summary>
            获取一个值，该值指示当前应用程序是否启用集中配置，默认为 false。
            </summary>
        </member>
        <member name="T:XMS.Core.ExceptionHelper">
            <summary>
            常用的String类的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.ExceptionHelper.GetFriendlyMessage(System.Exception)">
            <summary>
            获取异常消息的友好表示形式，该方法仅返回异常消息的友好表示形式。
            </summary>
            <param name="exception">要获取其消息友好表示形式的异常。</param>
            <returns>异常消息的友好表示形式。</returns>
        </member>
        <member name="M:XMS.Core.ExceptionHelper.GetFriendlyToString(System.Exception)">
            <summary>
            获取异常的友好表示形式，该方法返回异常的完整友好表示形式。
            </summary>
            <param name="exception">要获取其友好表示形式的异常。</param>
            <returns>异常的友好表示形式。</returns>
        </member>
        <member name="M:XMS.Core.ExceptionHelper.GetFriendlyStackTrace(System.Exception)">
            <summary>
            获取异常的友好表示形式，该方法返回异常堆栈的完整友好表示形式。
            </summary>
            <param name="exception">要获取其友好表示形式的异常。</param>
            <returns>异常的友好表示形式。</returns>
        </member>
        <member name="T:XMS.Core.Logging.BaseLogger">
            <summary>
            日志服务的基础实现。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.ILogger">
            <summary>
            日志接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.Exception)">
            <summary>
            Info
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.Exception)">
            <summary>
            Error
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogger.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsDebugEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Debug 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsInfoEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Info 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsWarnEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Warn 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsErrorEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Error 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogger.IsFatalEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Fatal 级别。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.#ctor">
            <summary>
            初始化 DefaultLogService 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.Exception)">
            <summary>
            Info
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.Exception)">
            <summary>
            Error
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.Exception,System.String)">
            <summary>
            Info
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.BaseLogger.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.InnerLogger">
            <summary>
            获取内部日志记录器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsDebugEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Debug 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsInfoEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Info 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsWarnEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Warn 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsErrorEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Error 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.BaseLogger.IsFatalEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Fatal 级别。
            </summary>
        </member>
        <member name="T:XMS.Core.PrimitiveHelper">
            <summary>
            常用的 Primitive 类型的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToMilliSecondsFrom1970L(System.DateTime)">
            <summary>
            将指定时间转换为 1970 年以来的毫秒数。
            </summary>
            <param name="value">要转换的时间。</param>
            <returns>1970 年以来的毫秒数。。</returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.MilliSecondsFrom1970ToDateTime(System.Int64)">
            <summary>
            将指定的 1970 年以来的毫秒数转换为时间格式。
            </summary>
            <param name="millisecondsFrom1970">1970 年以来的毫秒数。</param>
            <returns>与1970 年以来的毫秒数对应的时间对象。</returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.MilliSecondsFrom1970ToDateTime(System.Double)">
            <summary>
            将指定的 1970 年以来的毫秒数转换为时间格式。
            </summary>
            <param name="millisecondsFrom1970">1970 年以来的毫秒数。</param>
            <returns>与1970 年以来的毫秒数对应的时间对象。</returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToShortString(System.DateTime)">
            <summary>
            to "yyyy-MM-dd"
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToDefaultString(System.DateTime)">
            <summary>
            to "yyyy-MM-dd hh:mm:ss"
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.PrimitiveHelper.ToMSString(System.DateTime)">
            <summary>
            to "yyyy-MM-dd hh:mm:ss.fff"
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Caching.ICacheService">
            <summary>
            定义一组可用于访问缓存系统的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItem(System.String,System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItemWithNoExpiration(System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定的缓存分区，该缓存项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.SetItemWithNoExpiration(System.String,System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="tags">可用来对缓存项进行说明和检索的标签数组。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.RemoveItem(System.String,System.String)">
            <summary>
            从指定的缓存分区中移除指定的缓存项。
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.RemoveItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中移除指定的缓存项。
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetItem(System.String,System.String)">
            <summary>
            从指定缓存分区中获取指定的缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.GetItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中获取指定的缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.Clear(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.Clear(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.ClearRegion(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.ICacheService.ClearRegion(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="P:XMS.Core.Caching.ICacheService.LocalCache">
            <summary>
            获取名称为 local 的本地缓存对象，该缓存对象永远不可能为 null，其存储位置为本地内存，永远不可能被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="P:XMS.Core.Caching.ICacheService.RemoteCache">
            <summary>
            获取名称为 distribute 的本地缓存对象，该缓存对象永远不可能为 null，其存储位置为分布式缓存，永远被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="T:XMS.Core.WCF.OperationInterceptor">
            <summary>
            定义一个可用于对服务操作进行拦截的基础拦截器。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.IOperationInvoker,System.Boolean)">
            <summary>
            使用指定的 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker"/> 对象初始化 <see cref="T:XMS.Core.WCF.OperationInterceptor"/> 类的新实例。
            </summary>
            <param name="operationDescription">当前要拦截的方法。</param>
            <param name="invoker">一个 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker"/> 对象，拦截器内部使用该对象调用目标操作。</param>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.AllocateInputs">
            <summary>
            返回参数对象的数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitAppAgent(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            初始化应用代理。
            </summary>
            <param name="appName"></param>
            <param name="appVersion"></param>
            <param name="platform"></param>
            <param name="isMobileDevice"></param>
            <param name="manufacturer"></param>
            <param name="model"></param>
            <param name="deviceId"></param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitUser(XMS.Core.ITicket)">
            <summary>
            初始化用户。
            </summary>
            <param name="ticket"></param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitUser(XMS.Core.ITicket,System.Int32,System.Int32)">
            <summary>
            初始化用户。
            </summary>
            <param name="ticket"></param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InitUser(XMS.Core.ITicket,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            初始化用户。
            </summary>
            <param name="ticket"></param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
            <param name="extendProperties">扩展属性。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.OnInvoke(System.Object,System.ServiceModel.Description.OperationDescription,System.Object[])">
            <summary>
            在对方法进行调用前执行。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="operationDescription">要调用对象的方法的说明。</param>
            <param name="inputs">方法的输入。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.OnInvoked(System.Object,System.ServiceModel.Description.OperationDescription,System.Object[],System.Object[],System.Object)">
            <summary>
            在对方法进行成功调用后执行，如果调用过程中发生异常，那么不会执行到该方法。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="operationDescription">要调用对象的方法的说明。</param>
            <param name="inputs">方法的输入参数。</param>
            <param name="outputs">方法的输出参数。</param>
            <param name="returnedValue">方法的返回值。</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.OnInvokeFinally(System.DateTime,System.Object,System.ServiceModel.Description.OperationDescription,System.Object[],System.Object[],System.Object,System.Exception)">
            <summary>
            在对方法调用结束后执行，不论调用过程中是否发生异常，都会执行该方法。
            </summary>
            <param name="beginTime"></param>
            <param name="instance"></param>
            <param name="operationDescription"></param>
            <param name="inputs"></param>
            <param name="outputs"></param>
            <param name="returnedValue"></param>
            <param name="exception"></param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.Invoke(System.Object,System.Object[],System.Object[]@)">
            <summary>
            从一个实例和输入对象的集合返回一个对象和输出对象的集合。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
            <param name="outputs">方法的输出。</param>
            <returns>方法的返回值。</returns>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            异步开始方法。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
            <param name="callback">异步回调对象。</param>
            <param name="state">关联的状态数据。</param>
            <returns>用来完成异步调用的 System.IAsyncResult 。</returns>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptor.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
            <summary>
            异步结束方法。
            </summary>
            <param name="instance">调用的对象。</param>
            <param name="outputs">方法的输出。</param>
            <param name="result"><see cref="T:System.IAsyncResult"/> 对象。</param>
            <returns>方法的返回值。</returns>
        </member>
        <member name="P:XMS.Core.WCF.OperationInterceptor.IsSynchronous">
            <summary>
            获取一个值，该值指定调度程序是调用 <see cref="M:XMS.Core.WCF.OperationInterceptor.Invoke(System.Object,System.Object[],System.Object[]@)"/> 方法还是调用 <see cref="M:XMS.Core.WCF.OperationInterceptor.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)"/> 方法。 
            </summary>
            <value>如果调度程序调用同步操作，则为 <c>true</c>；否则为 <c>false</c>。</value>
        </member>
        <member name="M:XMS.Core.WCF.Client.EndPointTrace`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="P:XMS.Core.WCF.Client.EndPointTrace`1.HasError">
            <summary>
            确定通道工厂是否发生通信错误，只有发生通信错误时，才认为该通道工厂对应的服务终端点已失效，应废弃该通道工厂。
            注意：发生超时错误时，只是因为通道工厂对应的服务终端点太忙来不及响应请求，但其仍然有效。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.Client.EndPointContainer`1.array">
            <summary>
            在配置变化前，永远不会有更改，配置变化的时候，应该初始化好新的array后，直接替换
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.EndPointContainer`1.GetServiceChannelFactory(XMS.Core.WCF.Client.EndPointTrace{`0})">
            <summary>
            获取可用的终端点。
            </summary>
            <param name="retryCount">整个重试过程中的重试次数。</param>
            <param name="firstEndPoint">本次请求中使用的第一个终端点。</param>
            <param name="currentErrorEndPoint">当前正在使用且出错的终端点。</param>
            <returns></returns>
            <remarks>
            出于性能考虑，这里采用开放式策略获取终端点，既允许在遍历终端点集合的时候，其它线程改变终端点的错误状态，
            这样，在所有终端点都不可用的极端情况下，遍历结束前，一个已经遍历过的终端点恰巧变为可用状态，这时不会返回该终端点（因为已经遍历过），而是返回 null，
            最终结果是给用户报告一个暂时找不到可用服务的错误。
            </remarks>
        </member>
        <member name="T:XMS.Core.SerialNumber.DefaultSerialNumberGenerator">
            <summary>
            默认序列号生成器。
            </summary>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumberGenerator.#ctor(XMS.Core.SerialNumber.SerialNumberGeneratorManager,System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            使用指定的序列号生成器管理器、连接名称或连接字符串、生成器的键、种子初始值、步长、池大小创建序列号生成器。
            </summary>
            <param name="manager">序列号生成器管理器。</param>
            <param name="nameOrConnectionString">连接名称或连接字符串。</param>
            <param name="generatorKey">生成器的键。</param>
            <param name="seedInitialValue">种子初始值。</param>
            <param name="step">步长。</param>
            <param name="poolSize">池大小。</param>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumberGenerator.GetSerialNumber">
            <summary>
            获取序列号。
            </summary>
            <returns>已格式化的序列号。</returns>
        </member>
        <member name="M:XMS.Core.SerialNumber.DefaultSerialNumberGenerator.CreateSerialNumber(System.Int64)">
            <summary>
            创建序列号。
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.SerialNumber.DefaultSerialNumberGenerator.GeneratorKey">
            <summary>
            获取序列号生成器的键。
            </summary>
        </member>
        <member name="P:XMS.Core.SerialNumber.DefaultSerialNumberGenerator.PoolSize">
            <summary>
            获取序列号池的大小。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.LogCategory">
            <summary>
            定义常量
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Start">
            <summary>
            日志类别-服务处理
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Default">
            <summary>
            日志类别-服务处理
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.ServiceHandle">
            <summary>
            日志类别-服务处理
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.ServiceRequest">
            <summary>
            日志类别-服务请求
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.ServiceHost">
            <summary>
            日志类别-服务宿主
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Task">
            <summary>
            日志类别-任务
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Configuration">
            <summary>
            日志类别-配置
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Cache">
            <summary>
            日志类别-缓存
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.LogCategory.Messaging">
            <summary>
            日志类别-消息
            </summary>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.FindDate(System.DateTime,System.DateTime)">
            <summary>
            查询某时间段内的节假日信息
            </summary>
            <param name="dtStartDate">开始时间</param>
            <param name="dtEndDate">结束时间</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.LunarYearDays(System.Int32)">
            <summary>
            传入农历年　返回农历y年的总天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.leapDays(System.Int32)">
            <summary>
            返回农历y年闰月的天数
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.leapMonth(System.Int32)">
            <summary>
            返回农历y年闰哪个月1-12 , 没闰返回0
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.monthDays(System.Int32,System.Int32)">
            <summary>
            返回农历y年m月的总天数
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.solarDays(System.Int32,System.Int32)">
            <summary>
            返回公历y年某m+1月的天数
            </summary>
            <param name="y">公历年</param>
            <param name="m">公历月</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.Cyclical(System.Int32)">
            <summary>
            传入农历年返回干支, 0=甲子
            </summary>
            <param name="lunarYear"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.Animal(System.Int32)">
            <summary>　
            传入农历年返回干支, 0=鼠
            </summary>
            <param name="lunarYear"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.FormatYear(System.Int32)">
            <summary>
            格式化中文年
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.GetLunarDate(System.DateTime)">
            <summary>
            根据公历日期返回农历日期对象
            </summary>
            <param name="dtSolarDate">公历日期</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.SolarFestival(System.Int32,System.Int32)">
            <summary>
            公历日期返回公历节假日
            </summary>
            <param name="month"></param>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.LunarFete(System.Int32,System.Int32)">
            <summary>
            农历日期返回农历节日
            </summary>
            <param name="lunarMonth"></param>
            <param name="Lunarday"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.WordFete(System.Int32,System.Int32,System.Int32)">
            <summary>
            取出是否是周几的节日
            </summary>
            <param name="month">月</param>
            <param name="num">该月第几周</param>
             <param name="week">周几</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.CaculateWeekDay(System.DateTime)">
            <summary>
            期根据年月日计算星期几方法　返回int
            </summary>
            <param name="dtDate"></param>        
            <returns>周日为0</returns>
        </member>
        <member name="M:XMS.Core.Calendar.LunarCalendar.returnweekNum(System.DateTime)">
            <summary>
            计算是该月第几周
            </summary>
            <param name="dtDate"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.Calendar.LunarCalendar.QingMing(System.Int32)" -->
        <member name="M:XMS.Core.WCF.Client.SyncList`1.Dispose">
            <summary>
            释放托管和非托管资源。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.SyncList`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.WCF.Client.SyncList`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.GIS.LatLon">
            <summary>
            位置类
            </summary>
        </member>
        <member name="F:XMS.Core.GIS.LatLon.EARTH_RADIUS">
            <summary>
            赤道半径 earth radius
            </summary>
        </member>
        <member name="F:XMS.Core.GIS.LatLon.POLAR_RADIUS">
            <summary>
            极半径 polar radius
            </summary>
        </member>
        <member name="M:XMS.Core.GIS.LatLon.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XMS.Core.GIS.LatLon.#ctor(System.Double,System.Double)">
            <summary>
            构造函数
            </summary>
            <param name="lat">纬度</param>
            <param name="lon">经度</param>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Lon">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.RadLat">
            <summary>
            纬度的弧度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.RadLon">
            <summary>
            经度的弧度
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Ec">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:XMS.Core.GIS.LatLon.Ed">
            <summary>
            ?
            </summary>
        </member>
        <member name="T:XMS.Core.GIS.GeoHelper">
            <summary>
            Geo辅助类
            </summary>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetDistance(XMS.Core.GIS.LatLon,XMS.Core.GIS.LatLon)">
            <summary>
            根据两点的经纬度计算两点距离
            可参考:通过经纬度计算距离的公式 http://www.storyday.com/html/y2009/2212_according-to-latitude-and-longitude-distance-calculation-formula.html
            </summary>
            <param name="src">A点维度</param>        
            <param name="dest">B点经度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            根据两点的经纬度计算两点距离
            可参考:通过经纬度计算距离的公式 http://www.storyday.com/html/y2009/2212_according-to-latitude-and-longitude-distance-calculation-formula.html
            </summary>
            <param name="lat1">A点维度</param>
            <param name="lon1">A点经度</param>
            <param name="lat2">B点维度</param>
            <param name="lon2">B点经度</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetLatLon(XMS.Core.GIS.LatLon,System.Double,System.Double)">
            <summary>
            已知点A经纬度，根据B点据A点的距离，和方位，求B点的经纬度
            </summary>
            <param name="a">已知点A</param>
            <param name="distance">B点到A点的距离 </param>
            <param name="angle">B点相对于A点的方位，12点钟方向为零度，角度顺时针增加</param>
            <returns>B点的经纬度坐标</returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetLatLon(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            已知点A经纬度，根据B点据A点的距离，和方位，求B点的经纬度
            </summary>
            <param name="longitude">已知点A经度</param>
            <param name="latitude">已知点A纬度</param>
            <param name="distance">B点到A点的距离</param>
            <param name="angle">B点相对于A点的方位，12点钟方向为零度，角度顺时针增加</param>
            <returns>B点的经纬度坐标</returns>
        </member>
        <member name="M:XMS.Core.GIS.GeoHelper.GetFormatedLatLon(XMS.Core.GIS.LatLon)">
            <summary>
             format latitude,longtitude to 4 fractional ditigal double;
            </summary>
            <param name="objLatLon"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.GIS.GeoHashHelper">
            <summary>
            GeoHash辅助类，方便周边查询
            </summary>
        </member>
        <member name="F:XMS.Core.Pipes.PipeConstants.LogCategory">
            <summary>
            日志类别-消息
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.InternalLogService">
            <summary>
            XMS.Core 内部使用的日志
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.ILogService">
            <summary>
            日志服务接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.Exception)">
            <summary>
            Info
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.Exception)">
            <summary>
            Error
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="exception">要记录的异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.String)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Debug(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Debug
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.String)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.Exception,System.String)">
            <summary>
            Debug
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Info(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Info
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.String)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.Exception,System.String)">
            <summary>
            Warn
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Warn(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Warn
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.String)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.Exception,System.String)">
            <summary>
            Error
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Error(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Error
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.Exception,System.String)">
            <summary>
            Fatal
            </summary>
            <param name="exception">异常。</param>
            <param name="category">类别。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.Fatal(System.String,System.String,System.Object,System.Exception)">
            <summary>
            Fatal
            </summary>
            <param name="message">日志消息的内容。</param>
            <param name="category">类别。</param>
            <param name="data">相关数据。</param>
            <param name="exception">异常。</param>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.GetLogger(System.String)">
            <summary>
            根据名称获取日志。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Logging.ILogService.GetLogger(System.Type)">
            <summary>
            根据类型获取日志。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsDebugEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Debug 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsInfoEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Info 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsWarnEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Warn 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsErrorEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Error 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.IsFatalEnabled">
            <summary>
            获取一个值，该值指示当前是否启用 Fatal 级别。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.ILogService.UnexpectedBehavorLogger">
            <summary>
            特殊的logger，记录根据逻辑打死都不该发生的事情
            </summary>
        </member>
        <member name="T:XMS.Core.Empty">
            <summary>
            提供统一的获取指定类型空值的方法。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.String">
            <summary>
            表示空字符串。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.Hashtable">
            <summary>
            表示空 Hashtable。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.ArrayList">
            <summary>
            表示空 ArrayList。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.Queue">
            <summary>
            表示空 Queue。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.Stack">
            <summary>
            表示空 Stack。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty.SortedList">
            <summary>
            表示空 SortedList。
            </summary>
        </member>
        <member name="T:XMS.Core.Empty`1">
            <summary>
            提供统一的获取指定类型的值或空数组的方法。
            </summary>
            <typeparam name="T">空对象的类型。</typeparam>
        </member>
        <member name="F:XMS.Core.Empty`1.Array">
            <summary>
            表示空泛型数组。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.HashSet">
            <summary>
            表示空泛型 HashSet。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.List">
            <summary>
            表示空泛型 List。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.LinkedList">
            <summary>
            表示空泛型 LinkedList。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.Queue">
            <summary>
            表示空泛型 Queue。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`1.Stack">
            <summary>
            表示空泛型 Stack。
            </summary>
        </member>
        <member name="T:XMS.Core.Empty`2">
            <summary>
            提供统一的获取指定类型的值或空数组的方法。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XMS.Core.Empty`2.Dictionary">
            <summary>
            表示空泛型 Dictionary。
            </summary>
        </member>
        <member name="F:XMS.Core.Empty`2.SortedDictionary">
            <summary>
            表示空泛型 SortedDictionary。
            </summary>
        </member>
        <member name="T:XMS.Core.Web.HttpContextHelper">
            <summary>
            HttpContext 的常用扩展。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.BuildCookieName(System.Web.HttpContext,System.String)">
            <summary>
            创建与请求上下文相关的 Cookie 名，该 Cookie 名与 AddCookie 和 GetCookie 方法中最终使用的 Cookie 名相同。
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.Nullable{System.DateTime})">
            <summary>
            使用指定的名称从 Response 中获取或创建 Cookie，该 Cookie 的默认 Domain 为 xxx.xxx.xiaomishu.com 中的 ".xiaomishu.com"，默认Path 为 "/"，可通过该 Cookie 修改其默认 Domain 和 Path，并通过其 Value 属性为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            使用指定的名称、过期时间从 Response 中获取或创建 Cookie，并使用指定的值为其赋值，该 Cookie 的默认 Domain 为 xxx.xxx.xiaomishu.com 中的 ".xiaomishu.com"，默认Path 为 "/"，可通过该 Cookie 修改其默认 Domain 和 Path，并通过其 Value 属性为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="value">值。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            使用指定的名称、过期时间、域名、路径从 Response 中获取或创建 Cookie，并使用指定的值为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="value">值。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <param name="domain">域名。</param>
            <param name="path">路径。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.AddCookie(System.Web.HttpContext,System.String,System.Collections.Specialized.NameValueCollection,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            使用指定的名称、过期时间、域名、路径从 Response 中获取或创建 Cookie，并使用指定的值为其赋值。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <param name="values">值。</param>
            <param name="expireTime">过期时间，null 表示临时 Cookie。</param>
            <param name="domain">域名。</param>
            <param name="path">路径。</param>
            <returns>已经存在或者新创建的 Cookie。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.GetCookie(System.Web.HttpContext,System.String)">
            <summary>
            获取请求上下文相关的 Cookie
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
            <returns>可用的 Cookie 对象。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.DeleteCookie(System.Web.HttpContext,System.String)">
            <summary>
            删除当前上下文中指定名称的 Cookie。
            </summary>
            <param name="context">当前请求上下文。</param>
            <param name="name">Cookie 名称。</param>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.TryGetRequest(System.Web.HttpContext)">
            <summary>
            .net2.0 开始 HttpContext.Current.Request 和 HttpContext.Current.Response 在 IIS7.0 的某些情况下(比如 Application_Start 事件中)访问，
            会抛出 HttpException 异常，我们的某些依赖于 HttpContext.Current.Request 的底层组件，比如 RunContext、AppAgent 等，在这种情况下，
            直接访问 HttpContext.Current.Request 不能正常运行，因此，在这些组件里，必须通过下面的 TryGetRequest 和 TryGetResponse 方法进行安全的访问
            </summary>
            <param name="context">当前请求上下文。</param>
            <returns>Http 请求。</returns>
        </member>
        <member name="M:XMS.Core.Web.HttpContextHelper.TryGetResponse(System.Web.HttpContext)">
            <summary>
            .net2.0 开始 HttpContext.Current.Request 和 HttpContext.Current.Response 在 IIS7.0 的某些情况下(比如 Application_Start 事件中)访问，
            会抛出 HttpException 异常，我们的某些依赖于 HttpContext.Current.Request 的底层组件，比如 RunContext、AppAgent 等，在这种情况下，
            直接访问 HttpContext.Current.Request 不能正常运行，因此，在这些组件里，必须通过下面的 TryGetRequest 和 TryGetResponse 方法进行安全的访问
            </summary>
            <param name="context">当前请求上下文。</param>
            <returns>Http 响应。</returns>
        </member>
        <member name="T:XMS.Core.Web.ResponseHelper">
            <summary>
            Response 类的常用扩展
            </summary>
        </member>
        <member name="M:XMS.Core.Web.ResponseHelper.Redirect(System.Web.HttpResponse,System.String,System.Int32,System.Boolean,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            301 或 302 重定向。
            </summary>
            <param name="response">用来进行重定向的 HttpResponse 对象。</param>
            <param name="url">重定向的目标 url。</param>
            <param name="code"></param>
            <param name="enableClientCache"></param>
            <param name="cacheExpireTime"></param>
            <param name="endResponse"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Web.RequestHelper">
            <summary>
            Request类的常用扩展
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetIP(System.Web.HttpRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetSubDomain(System.Web.HttpRequest)">
            <summary>
            获取指定请求的子级域名， 如：a.b.57.cn 返回 a.b；a.57.cn 返回 a。
            </summary>
            <param name="request">当前请求。</param>
            <returns>子级域名。</returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetMainDomain(System.Web.HttpRequest)">
            <summary>
            获取指定请求的主域名， 如：a.b.57.cn 返回 57.cn,www.xiaomishu.com 返回 xiaomishu.com。
            </summary>
            <param name="request">当前请求。</param>
            <returns>主域名。</returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetValue(System.Web.HttpRequest,System.String)">
            <summary>
            接收参数,返回字符型
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetIntByParams(System.String)">
            <summary>
            接收参数,返回整型
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetStringByParams(System.String)">
            <summary>
            接收参数,返回字符型
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.ProcessRequest(System.String)">
            <summary>
            处理非法字符
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetCheckBoxValue(System.String)">
            <summary>
            接收参数,正则过滤特殊字符,并返回CheckBox值
            </summary>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetDoubleByParams(System.String)">
            <summary>
            接收参数,返回double型
            </summary>
            <param name="sParam"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Web.RequestHelper.GetDecimalByParams(System.String)">
            <summary>
            接收参数,返回decimal型
            </summary>
            <param name="sParam"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Caching.Memcached.CustomBinaryPool">
            <summary>
            Server pool implementing the binary protocol.
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.Configuration.FailOverElement">
            <summary>
            表示缓存配置文件中对容错机制的配置。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Configuration.FailOverElement.#ctor">
            <summary>
            初始化 FailOverElement 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.FailOverElement.RetryingInterval">
            <summary>
            重试间隔。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.FailOverElement.ToLocalCache">
            <summary>
            指示缓存服务器故障时是否切换为本地缓存。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheSetting.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheSetting.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.DistributeCacheSetting.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.Caching.IgnoredConfigurationException">
            <summary>
            表示一个缓存系统调用期间可忽略的配置异常，该异常通知缓存系统发生了重复的配置错误，同一配置错误在之前的调用中已经发生过，并且在其第一次发生时缓存系统为其记录了错误日志。
            设计本类的目的，是为了解决当缓存配置发生错误时，产生大量相同错误日志的问题（缓存系统的访问频率较高，每次访问都会要求初始化 CacheSettings 的实例，在配置文件不正确的情况下，每次访问都会产生一次日志）
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.GetDistributeCache(System.String)">
            <summary>
            为指定缓存名称和分区名称的缓存分区获取可对其进行缓存读取操作的分布式缓存对象。
            </summary>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.CacheSettings.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.CacheSettings.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="T:XMS.Core.AppAgent">
            <summary>
            应用代理，。
            </summary>
            <remarks>
            通过 SecurityContext.Current.AppAgent 属性永远可以得到一个非空对象：
            	当请求中未提供 app-agent 标头但非 http 请求时，标头无效，SecurityContext.Current.AppAgent.IsEmpty 为 true, SecurityContext.Current.AppAgent.HasError 为 false, SecurityContext.Current.AppAgent.RawAppAgent 为 null;
            	当请求中未提供 app-agent 标头但是 http 请求时，标头有效，SecurityContext.Current.AppAgent.IsEmpty 为 false, SecurityContext.Current.AppAgent.HasError 为 false, SecurityContext.Current.AppAgent.RawAppAgent 为 null;
            	当请求中提供 app-agent 标头但标头错误时，标头无效，SecurityContext.Current.AppAgent.IsEmpty 为 false, SecurityContext.Current.AppAgent.HasError 为 true, SecurityContext.Current.AppAgent.RawAppAgent 为提供的标头;
            	当请求中提供 app-agent 标头且标头正确时，标头有效，SecurityContext.Current.AppAgent.IsEmpty 为 false, SecurityContext.Current.AppAgent.HasError 为 false, SecurityContext.Current.AppAgent.RawAppAgent 为提供的标头;
            
            综上，在需要使用 SecurityContext.Current.AppAgent 的场景中，应该先调用 SecurityContext.Current.AppAgent.EnsureValid() 方法验证 app-agent 标头 的有效性；
            </remarks>
        </member>
        <member name="F:XMS.Core.AppAgent.Empty">
            <summary>
            请求不包含应用代理时 SecurityContext.Current.AppAgent 返回的空对象。
            </summary>
        </member>
        <member name="M:XMS.Core.AppAgent.EnsureValid">
            <summary>
            确保当前应用代理标头有效，如果当前应用代理是一个空代理对象（IsEmpty 为 true）或者是一个具有错误（HasError 为 true）的代理对象，则分别"抛出请求无效，缺少 app-agent 标头" 和 "请求标头格式不正确" 异常。
            在使用应用代理标头对象时调用此方法确保请求头有效。
            </summary>
        </member>
        <member name="M:XMS.Core.AppAgent.GetFromRequest(System.Web.HttpContext,System.ServiceModel.OperationContext)">
            <summary>
            从请求中获取应用代理对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.AppAgent.IsEmpty">
            <summary>
            获取一个值，该值指示当前代理对象是否空对象，如果为 true，意味着请求未提供代理。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.HasError">
            <summary>
            获取一个值，该值指示请求中提供的应用代理是否包含错误，如果为 true，则意味着请求中提供的代理格式不正确。
            一般在拦截中对需要应用代理表头的请求检查代理是否为空或有错误，这样，在业务层便可以不对代理进行检查，可以直接使用 SecurityContext.Current.AppAgent 对象。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.RawAppAgent">
            <summary>
            获取一个值，该值表示请求中的原始应用代理字符串。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Platform">
            <summary>
            平台
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.IsMobileDevice">
            <summary>
            是否移动设备
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.MobileDeviceManufacturer">
            <summary>
            移动设备制造商
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.MobileDeviceModel">
            <summary>
            移动设备型号
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.MobileDeviceId">
            <summary>
            移动设备ID
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgent.Item(System.String)">
            <summary>
            根据指定的名称从应用代理中获取指定键的值。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.AppAgentScope">
            <summary>
            应用代理块
            </summary>
        </member>
        <member name="F:XMS.Core.AppAgentScope.current">
            <summary>
            线程相关的当前业务作用域对象。
            </summary>
        </member>
        <member name="M:XMS.Core.AppAgentScope.CreateFromEnvironment">
            <summary>
            从当前应用程序环境创建应用代理块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.AppAgentScope.CreateFromExistsAppAgent(XMS.Core.AppAgent)">
            <summary>
            从现有AppAgent中创建应用代理块，如果请求中不包含 。
            适用于仅向特定服务的特定方法传播 app-agent 的场景。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.AppAgentScope.Name">
            <summary>
            名称。
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.Platform">
            <summary>
            平台
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.IsMobileDevice">
            <summary>
            是否移动设备
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.MobileDeviceManufacturer">
            <summary>
            移动设备制造商
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.MobileDeviceModel">
            <summary>
            移动设备型号
            </summary>
        </member>
        <member name="P:XMS.Core.AppAgentScope.MobileDeviceId">
            <summary>
            移动设备ID
            </summary>
        </member>
        <member name="T:XMS.Core.Web.PagerHelper">
            <summary>
            网站通用分页类
            </summary>
        </member>
        <member name="M:XMS.Core.Web.PagerHelper.GetPager(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            生成分页的HTML代码
            </summary>
            <param name="nTotal">总条数</param>
            <param name="nCurrentPage">当前页</param>
            <param name="nPageSize">每页数</param>
            <param name="sUrlBase">地址</param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Web.PagerHelper.CurrentPage">
            <summary>
            获取Page参数，当前页
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.ManageableWebServiceHost">
            <summary>
            一个 WebServiceHost 派生类，支持配置服务，通过配置服务获取服务配置文件并加载服务说明信息。
            </summary>
            <remarks>
            使用注意事项请参考 MSDN 中关于 WebServiceHost 的说明。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.ApplyConfiguration">
            <summary>
            重载自 <see cref="T:System.ServiceModel.ServiceHostBase"/> 类，通过配置服务获取服务配置文件并加载服务说明信息，并将其应用于正在构造的运行库。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.EnableDiscovery(System.Boolean,System.Boolean)">
            <summary>
            为当前宿主中承载的服务启用自动发现机制。
            </summary>
            <param name="enableMEX">是否启用元数据交换服务，默认为 <c>true</c>。</param>
            <param name="enableHttpGet">是否启用 Http Get 协议。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的新实例。
            </summary>
            <remarks>
            有两个构造函数可用于创建 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的实例。 
            多数情况下，均使用将服务类型作为输入参数的 <see cref="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Type,System.Uri[])"/> 构造函数。
            根据需要，主机还可以使用此函数创建新服务。仅在您希望服务主机使用特定的服务单一实例时才使用 <see cref="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Object,System.Uri[])"/> 构造函数。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            使用服务的类型及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的新实例。 
            </summary>
            <param name="type">承载服务的类型。</param>
            <param name="baseAddresses">Uri 类型的数组，包含承载服务的基址。</param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableWebServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            使用服务的实例及其指定的基址初始化 <see cref="T:XMS.Core.WCF.ManageableWebServiceHost"/> 类的新实例。
            </summary>
            <param name="singleton">承载的服务的实例。</param>
            <param name="baseAddresses">Uri 类型的 Array，包含承载服务的基址。</param>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.LogService">
            <summary>
            从容器中获取可用的日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.ConfigService">
            <summary>
            从容器中获取可用的配置服务。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasUdpDiscoveryEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.UdpDiscoveryEndpoint"/> （UDP 发现终结点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasDiscoveryBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Discovery.ServiceDiscoveryBehavior"/> （服务发现行为）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasMetadataExchangeEndpoint">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.IMetadataExchange"/> （元数据交换服务端点）。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableWebServiceHost.HasMetadataBehavior">
            <summary>
            获取一个值，该值指示当前服务说明中是否定义了 <see cref="T:System.ServiceModel.Description.ServiceMetadataBehavior"/> （元数据交换服务行为）。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClient.ToString">
            <summary>
            重载 ToString 的实现。
            </summary>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.PipeName">
            <summary>
            获取管道客户端的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.AppInstanceId">
            <summary>
             获取管道客户端应用实例的 id，一般的格式为 {PipeName}@{MachineName}
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.AppName">
            <summary>
            获取管道客户端所在的应用程序的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.AppVersion">
            <summary>
            获取管道客户端所在的应用程序的版本。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClient.HostName">
            <summary>
            获取管道客户端所在的主机名。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceChannelManager.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Pipes.PipeServiceChannelManager.PipeServiceChannelPool">
            <summary>
            ObjectPool 的包装
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceChannelManager.PipeServiceChannelPool.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Messaging.MessageBusException">
            <summary>
            表示在消息总线调用、处理过程中由消息总线引发的异常。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBusException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Messaging.MessageBusException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBusException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.Messaging.MessageBusException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBusException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Messaging.MessageBusException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Messaging.MessageBus">
            <summary>
            消息总线。
            </summary>
        </member>
        <member name="F:XMS.Core.Messaging.MessageBus.Instance">
            <summary>
            获取消息总线的当前实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBus.Start">
            <summary>
            启动消息总线。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBus.Stop">
            <summary>
            停止消息总线
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBus.Publish(System.Object)">
            <summary>
            将指定的消息发布到消息总线。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBus.Publish``1(``0)">
            <summary>
            将指定的消息发布到消息总线。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:XMS.Core.Messaging.MessageBus.SearchFiles(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            查找指定目录下与指定模式匹配的文件并以数组的形式返回。
            </summary>
            <param name="directory"></param>
            <param name="filemask"></param>
            <param name="searchSubdirectories"></param>
            <param name="ignoreHidden"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.FixContextFlags">
            <summary>
            固化上下文标记。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.RunContext">
            <summary>
            运行上下文，包括 Runmode、AppName、AppVersion、Machine 属性。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.UserContext">
            <summary>
            固化用户上下文，包括 UserName、UserId、UserToken、UserIP、RawUrl 等属性。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.AppAgent">
            <summary>
            固化客户端访问代理的信息
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.FixContextFlags.All">
            <summary>
            支持所有
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.CustomBufferAppender">
            <summary>
            自定义缓冲日志输出器
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.ActivateOptions">
            <summary>
            重载 ActivateOptions, 在基础实现的基础上启动缓冲刷新线程。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.OnClose">
            <summary>
            重载 OnClose, 在基础实现的基础上停止缓冲刷新线程。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            重载 SendBuffer, 将要发送的缓冲添加到临时链表中以供刷新线程发送。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomBufferAppender.Flush(System.Boolean)">
            <summary>
            重载 Flush, 在基础实现的基础上增加从缓冲的 list 中发送日志事件的处理逻辑。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.Enable">
            <summary>
            获取一个值，该值指示是否启用当前输出器。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.FlushInterval">
            <summary>
            缓冲刷新间隔。
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.MergeThreshold">
            <summary>
            日志合并，当大于配置值，则合并日志，默认值1000
            </summary>
        </member>
        <member name="P:XMS.Core.Logging.Log4net.CustomBufferAppender.FixContext">
            <summary>
            固化上下文属性。
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.DefaultConfigService">
            <summary>
            配置服务接口的默认实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.#ctor">
            <summary>
            初始化 DefaultConfigService 的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.OnConfigFileChanged(XMS.Core.Configuration.ConfigFileChangedEventArgs)">
            <summary>
            引发 ConfigFileChanged 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Configuration.ConfigFileChangedEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetConfigurationFile(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            根据指定的配置文件名称，获取可用的配置文件（物理路径）。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>可用的配置文件的路径。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetConfiguration(XMS.Core.Configuration.ConfigFileType,System.String)">
            <summary>
            从配置系统中获取指定文件名称的配置对象。
            </summary>
            <param name="configFileType">配置文件的类型。</param>
            <param name="configFileName">配置文件的名称，在 <paramref name="configFileType"/> 为 ConfigFileType.Other 时该参数是必须的，其它情况下，忽略该参数。</param>
            <returns>配置对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting(System.String,System.String)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项的原始值。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
            <remarks>
            GetAppSetting(string,string) 方法直接从配置文件相关联的 Configuration 对象中读取配置内容，
            而 GetAppSetting&lt;T&gt;(string, T) 等泛型重载方法则先从缓存服务中读取已解析的强类型配置数据中读取内容，
            由于缓存服务依赖于配置服务，在 容器初始化、配置服务初始化、RunContext 的 RunMode 属性等场景中，只能通过非泛型的 GetAppSetting 接口获取配置信息，
            不能通过泛型的 GetAppSetting 方法获取配置信息，以避免容器初始化死循环（堆栈溢出）。
            </remarks>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting``1(System.String,``0)">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的已解析配置项，配置项的原始内容被解析为类型参数限定的类型并且放入缓存中。
            支持以下类型：String、基元类型（Boolean、Char、SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double)、Decimal、DateTime、TimeSpan、Enum、Regex 等。
            当为 Regex 类型时，可在配置中通过类似 ^(?is:\d+)$ 的方式以内联的形式指定是否区分大小写、单行或多行模式等。
            </summary>
            <param name="key">要获取的配置项的键。</param>
            <param name="defaultValue">要获取的配置项的默认值。</param>
            <returns>要获取的配置项的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting``1(System.String,``0[])">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项数组，该配置项数组以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的数组并且放入缓存中。
            支持以下类型：String、基元类型（Boolean、Char、SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double)、Decimal、DateTime、TimeSpan、Enum、Regex 等。
            </summary>
            <param name="key">要获取的配置项数组的键。</param>
            <param name="defaultValues">要获取的配置项数组的默认值。</param>
            <returns>要获取的配置项数组的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetAppSetting``1(System.String,System.Collections.Generic.HashSet{``0})">
            <summary>
            从 AppSettings.config 配置文件中获取指定键值的配置项字典，该配置项字典以中英文逗号隔开，配置项的原始内容被解析为类型参数限定的集合并且放入缓存中。
            支持以下类型：String、基元类型（Boolean、Char、SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double)、Decimal、DateTime、TimeSpan、Enum、Regex 等。
            </summary>
            <param name="key">要获取的配置项字典的键。</param>
            <param name="defaultValues">要获取的配置项字典的默认值。</param>
            <returns>要获取的配置项字典的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetConnectionString(System.String)">
            <summary>
            从 ConnectionStrings.config 配置文件中获取指定键值的连接字符串。
            </summary>
            <param name="key">要获取的连接字符串的键。</param>
            <returns>要获取的连接字符串的值。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetSection(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSection 对象。
            </summary>
            <param name="sectionName">要返回的 ConfigurationSection 的名称。</param>
            <returns>指定的 ConfigurationSection 对象。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.DefaultConfigService.GetSectionGroup(System.String)">
            <summary>
            从 App.Config 配置文件中返回指定的 ConfigurationSectionGroup 对象。
            </summary>
            <param name="sectionGroupName">要返回的 ConfigurationSectionGroup 的名称。</param>
            <returns>指定的 ConfigurationSectionGroup 对象。</returns>
        </member>
        <member name="P:XMS.Core.Configuration.DefaultConfigService.EnableConcentratedConfig">
            <summary>
            获取一个值，该值指示当前应用程序是否启用集中配置，默认为 false。
            </summary>
        </member>
        <member name="E:XMS.Core.Configuration.DefaultConfigService.ConfigFileChanged">
            <summary>
            在配置文件发生变化时发生，用于通知客户端配置文件已经发生更改。
            </summary>
        </member>
        <member name="P:XMS.Core.Business.ManagerBase.Logger">
            <summary>
            获取日志服务。
            </summary>
        </member>
        <member name="P:XMS.Core.Business.ManagerBase.Cache">
            <summary>
            获取缓存服务。
            </summary>
        </member>
        <member name="P:XMS.Core.Business.ManagerBase.ConfigService">
            <summary>
            获取配置服务。
            </summary>
        </member>
        <member name="F:XMS.Core.Caching.LocalCacheManager.InterlockedLinkedListNode.InvalidCachedItem">
            <summary>
            表示无效的缓存项，用于锁定。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.LocalCacheManager.InterlockedLinkedList.ReverseExchange(XMS.Core.Caching.LocalCacheManager.CachedItem)">
            <summary>
            反向交换节点的值
            </summary>
        </member>
        <member name="F:XMS.Core.Caching.LocalCacheManager.CachedItem.ExpiredTime">
            <summary>
            表示缓存项的待过期时间。
            </summary>
        </member>
        <member name="F:XMS.Core.Caching.LocalCacheManager.CachedItem.NextUpdateTime">
            <summary>
            表示缓存项的待更新时间。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.Position">
            <summary>
            缓存位置
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.DependencyFile">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.Capacity">
            <summary>
            缓存项容量，该值仅对缓存位置为 local 的缓存区有效。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Configuration.DistributeCacheElement.AsyncUpdateInterval">
            <summary>
            本地缓存的异步更新时间间隔。
            </summary>
        </member>
        <member name="T:XMS.Core.ArgumentInvalidException">
            <summary>
            在向方法提供的其中一个参数无效时引发的异常。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的新实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentInvalidException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentInvalidException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="P:XMS.Core.ArgumentInvalidException.Message">
            <summary>
            获取不包含参数名的错误消息。
            </summary>
        </member>
        <member name="T:XMS.Core.Web.CookiesHelper">
            <summary>
            CookiesHelper
            </summary>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.WriteCookie(System.String,System.Collections.Specialized.NameValueCollection,System.Nullable{System.DateTime},System.String)">
            <summary>
            write Cookies
            </summary>
            <param name="CookieName">cookie name</param>
            <param name="Nvc">NameValueCollection</param>
            <param name="datetime">cookie date</param>
            <param name="Domain">Domain</param>
            <returns>bool</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.WriteCookie(System.String,System.Collections.Specialized.NameValueCollection,System.Nullable{System.DateTime})">
            <summary>
            write cookie value
            </summary>
            <param name="CookieName">cookie name</param>
            <param name="Nvc">NameValueCollection</param>
            <param name="days">cookie date</param>
            <returns>bool</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.UpdateCookie(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            update cookie
            </summary>
            <param name="CookieName">cookie name</param>
            <param name="Nvc">NameValueCollection</param>
            <returns>bool</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.GetCookie(System.String)">
            <summary>
            get cookie 
            </summary>
            <param name="CookieName">cookie name</param>
            <returns>NameValueCollection</returns>
        </member>
        <member name="M:XMS.Core.Web.CookiesHelper.DeleteCookie(System.String)">
            <summary>
            delete cookie
            </summary>
            <param name="CookieName"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.JsonContentTypeMapper">
            <summary>
            指定传入消息内容映射到的格式为 JSON，强制使用 JSON 解析消息内容，而忽略传入请求头中定义的 ContentType。
            该类型用于 WebHttpBinding 的 contentTypeMapper 属性。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.RawContentTypeMapper">
            <summary>
            指定传入消息内容映射到的格式为 Raw，强制使用流自定义解析传入消息内容，而忽略传入请求头中定义的 ContentType。
            该类型用于 WebHttpBinding 的 contentTypeMapper 属性。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.CustomHeaderClientMessageInspector">
            <summary>
            自定义客户端消息拦截器。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.CustomHeaderClientMessageInspector.#ctor(System.Collections.Generic.List{XMS.Core.WCF.ICustomHeader})">
            <summary>
            初始化 CustomHeaderClientMessageInspector 类的新实例。
            </summary>
            <param name="headers">自定义头的列表。</param>
        </member>
        <member name="M:XMS.Core.WCF.CustomHeaderClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            
            </summary>
            <param name="reply"></param>
            <param name="correlationState"></param>
        </member>
        <member name="M:XMS.Core.WCF.CustomHeaderClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.AuthorizationTicketHeader">
            <summary>
            表示身份验证票头
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.AuthorizationTicketHeader.Name">
            <summary>
            app-agent 标头的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.AuthorizationTicketHeader.NameSpace">
            <summary>
            app-agent 标头的名称空间。
            </summary>
        </member>
        <member name="T:XMS.Core.SerialNumber.SerialNumberGeneratorManager">
            <summary>
            序列号生成器管理器。
            </summary>
        </member>
        <member name="M:XMS.Core.SerialNumber.SerialNumberGeneratorManager.CreateBusinessContext(System.String)">
            <summary>
            创建业务相关的上下文，以用于操作 SerialNumberSeed 表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.SerialNumber.SerialNumberGeneratorManager.CreateSerialNumberGenerator(System.String)">
            <summary>
            </summary>
            <param name="generatorKey"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.SerialNumber.SerialNumberGeneratorManager.GetSerialNumberGenerator(System.String)">
            <summary>
            获取指定键值的序列号生成器。
            </summary>
            <param name="generatorKey">要获取的序列号生成器的键。</param>
            <returns>获取到得序列号生成器。</returns>
        </member>
        <member name="T:XMS.Core.Messaging.MessageAttribute">
            <summary>
            定义消息特性，该特性指定一个类型为某种类型的消息。
            </summary>
        </member>
        <member name="M:XMS.Core.Messaging.MessageAttribute.#ctor(System.String)">
            <summary>
            初始化 MessageAttribute 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Messaging.MessageAttribute.TypeId">
            <summary>
            获取或设置一个值，该值指示要对目标字符串调用 String.Trim 方法进行处理。
            </summary>
        </member>
        <member name="T:XMS.Core.Logging.Log4net.CustomLayout">
            <summary>
            自定义日志布局器
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLayout.#ctor">
            <summary>
            初始化 CustomLayout 类的新实例
            </summary>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileChangedEventHandler">
            <summary>
            表示将对 <see cref="T:XMS.Core.Configuration.IConfigService"/> 接口的 <see cref="E:XMS.Core.Configuration.IConfigService.ConfigFileChanged"/> 事件进行处理的方法。
            </summary>
            <param name="sender">引发事件的源。</param>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Configuration.ConfigFileChangedEventArgs"/>。</param>
        </member>
        <member name="T:XMS.Core.Configuration.ConfigFileChangedEventArgs">
            <summary>
            为 <see cref="T:XMS.Core.Configuration.IConfigService"/> 类的 <see cref="E:XMS.Core.Configuration.IConfigService.ConfigFileChanged"/> 事件提供数据。 
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ConfigFileChangedEventArgs.#ctor(XMS.Core.Configuration.ConfigFileType,System.String,System.String)">
            <summary>
            使用指定的配置文件名称、配置文件物理路径初始化 <see cref="T:XMS.Core.Configuration.ConfigFileChangedEventArgs"/> 类的新实例。
            </summary>
            <param name="configFileType">发生变化的配置文件的类型。</param>
            <param name="configFileName">发生变化的配置文件的名称。</param>
            <param name="configFileContent">发生变化的配置文件的内容。</param>
            <param name="configPhysicalFilePath">发生变化的配置文件的物理路径。</param>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedEventArgs.ConfigFileName">
            <summary>
            获取发生变化的配置文件的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedEventArgs.ConfigFilePhysicalPath">
            <summary>
            获取发生变化的配置文件的物理路径。
            </summary>
        </member>
        <member name="P:XMS.Core.Configuration.ConfigFileChangedEventArgs.ConfigFileType">
            <summary>
            获取当前配置文件变化事件的变化类型。
            </summary>
        </member>
        <member name="T:XMS.Core.ArgumentNullOrWhiteSpaceException">
            <summary>
            	在向方法提供的其中一个字符串类型参数为null、空或空白字符串时引发的异常。
            	该异常通常与 String.IsNullOrWhiteSpace 配对使用。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息、导致此异常的参数的名称和原始内部异常来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <param name="innerException">原始内部异常。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrWhiteSpaceException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="P:XMS.Core.ArgumentNullOrWhiteSpaceException.Message">
            <summary>
            获取不包含参数名的错误消息。
            </summary>
        </member>
        <member name="T:XMS.Core.ArgumentNullOrEmptyException">
            <summary>
            	在向方法提供的其中一个字符串类型参数为null、空或空白字符串时引发的异常。
            	该异常通常与 String.IsNullOrEmpty 配对使用。
            </summary>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String)">
            <summary>
            使用导致此异常的参数的名称初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“参数不能为null、空或空白字符串”。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定的错误消息、导致此异常的参数的名称和原始内部异常来初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的实例。
            </summary>
            <param name="paramName">导致异常的参数的名称。</param>
            <param name="message">描述错误的消息。</param>
            <param name="innerException">原始内部异常。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            此构造函数用 paramName 参数初始化新实例的 ParamName 属性。 paramName 的内容被设计为人可理解的形式。
            </remarks>
        </member>
        <member name="M:XMS.Core.ArgumentNullOrEmptyException.ToString">
            <summary>
            获取当前异常的字符串表示形式。
            </summary>
            <returns>当前异常的字符串表示形式。</returns>
        </member>
        <member name="P:XMS.Core.ArgumentNullOrEmptyException.Message">
            <summary>
            获取不包含参数名的错误消息。
            </summary>
        </member>
        <member name="T:XMS.Core.Web.MapHelper">
            <summary>
            地图助手类。
            </summary>
        </member>
        <member name="M:XMS.Core.Web.MapHelper.GetGoogleSmartyAddress(System.String)">
            <summary>
            得到一个在GOOGLE地图可识别的地址
            </summary>
            <param name="args">上海市xx路xx号</param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.WCF.OperationInterceptorBehavior">
            <summary>
            实现对服务端应用程序中的操作进行运行时拦截的行为。
            </summary>
        </member>
        <member name="F:XMS.Core.WCF.OperationInterceptorBehavior.ShowExceptionDetailToClient">
            <summary>
            获取一个值，该值指示是否应向客户端展示异常详细信息。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptorBehavior.#ctor(System.Boolean)">
            <summary>
            初始化 <see cref="T:XMS.Core.WCF.OperationInterceptorBehavior"/> 类的新实例。
            </summary>
            <param name="showExceptionDetailToClient">指示是否应向客户端展示异常详细信息</param>
        </member>
        <member name="M:XMS.Core.WCF.OperationInterceptorBehavior.CreateInvoker(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.IOperationInvoker)">
            <summary>
            创建用于拦截服务端应用程序中的操作的拦截器。
            </summary>
            <param name="operationDescription">当前要拦截的方法。</param>
            <param name="invoker">用于创建操作拦截器的 <see cref="T:System.ServiceModel.Dispatcher.IOperationInvoker"/> 对象。</param>
            <returns>可用于拦截服务端应用程序中的操作的拦截器。</returns>
        </member>
        <member name="T:XMS.Core.WCF.IOCInstanceProvider">
            <summary>
            提供一些方法，以便能从注入容器中获取获取服务实例。 
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.#ctor(System.Type)">
            <summary>
            初始化 IOCInstanceProvider 类型的新实例.
            </summary>
            <param name="serviceType">服务的类型。</param>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
            <summary>
            根据指定的 InstanceContext 对象，则返回服务对象。
            </summary>
            <param name="instanceContext">当前的 InstanceContext 对象。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
            <summary>
            根据指定的 InstanceContext 、Message 对象，则返回服务对象。
            </summary>
            <param name="instanceContext">当前的 InstanceContext 对象。</param>
            <param name="message">触发服务对象的创建的消息。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.IOCInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
            <summary>
            在 System.ServiceModel.InstanceContext 对象回收服务对象时调用。
            </summary>
            <param name="instanceContext">服务的实例上下文。</param>
            <param name="instance">要回收的服务对象。</param>
        </member>
        <member name="T:XMS.Core.ITicket">
            <summary>
            表示一个可用于存储的会员票据信息。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.Token">
            <summary>
            获取票据的令牌。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.UserId">
            <summary>
            获取票据相关的用户的Id。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.UserName">
            <summary>
            获取票据颁发给用户的姓名。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.IssueTime">
            <summary>
            获取票据颁发时间。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.ExpireTime">
            <summary>
            票获取据过期时间。
            </summary>
        </member>
        <member name="P:XMS.Core.ITicket.Expired">
            <summary>
            获取一个值，该值指示票据是否已过期
            </summary>
        </member>
        <member name="T:XMS.Core.UserPrincipal">
            <summary>
            表示一个会员
            </summary>
        </member>
        <member name="F:XMS.Core.UserPrincipal.LocalSystem">
            <summary>
            表示本地系统，其会员 Id 为 -1。
            </summary>
        </member>
        <member name="F:XMS.Core.UserPrincipal.Guest">
            <summary>
            表示一个游客, 其会员 Id 为 0。
            </summary>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket)">
            <summary>
            从身份认证票据初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket,System.Int32)">
            <summary>
            从身份认证票据和组织 Id 初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <param name="orgId">组织 Id。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket,System.Int32,System.Int32)">
            <summary>
            从身份认证票据和组织 Id 初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromTicket(XMS.Core.ITicket,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            从身份认证票据和组织 Id 初始化一个会员身份对象。
            </summary>
            <param name="ticket">身份认证票据。</param>
            <param name="orgId">组织 Id。</param>
            <param name="deviceId">设备 Id。</param>
            <param name="extendProperties">扩展属性。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.FromIdentity(XMS.Core.UserIdentity,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            从身份标识初始化一个会员身份对象。
            </summary>
            <param name="identity">身份标识。</param>
            <param name="deviceId">设备 Id。</param>
            <param name="extendProperties">扩展属性。</param>
            <returns>UserPrincipal 对象。</returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.Bind(XMS.Core.SecurityContext)">
            <summary>
            将当前用户对象绑定到当前安全上下文中，之后，便可通过 SecurityContext.Current.User 访问该用户对象。
            </summary>
            <param name="securityContext"></param>
        </member>
        <member name="M:XMS.Core.UserPrincipal.#ctor(XMS.Core.UserIdentity)">
            <summary>
            初始化 UserPrincipal 类的新实例。
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:XMS.Core.UserPrincipal.#ctor(XMS.Core.UserIdentity,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            初始化 UserPrincipal 类的新实例。
            </summary>
            <param name="identity"></param>
            <param name="deviceId"></param>
            <param name="extendProperties"></param>
        </member>
        <member name="M:XMS.Core.UserPrincipal.IsInRole(System.String)">
            <summary>
            判断当前会员是否具有指定的角色。
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.UserPrincipal.HasPermission(System.String)">
            <summary>
            检查用户是否具有指定编码资源的访问权限。
            </summary>
            <param name="resourceCode"></param>
            <returns></returns>
        </member>
        <member name="P:XMS.Core.UserPrincipal.IsGuest">
            <summary>
            获取一个值，该值指示当前用户是否为游客。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.IsLocalSystem">
            <summary>
            获取一个值，该值指示当前用户是否为本地系统用户。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.DeviceId">
            <summary>
            获取当前用户所登录设备的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.OrgId">
            <summary>
            获取当前用户所属组织的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.OrgPath">
            <summary>
            获取当前用户所属组织的路径。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.DutyLevel">
            <summary>
            获取当前用户在其所属组织的职务级别。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.Identity">
            <summary>
            获取当前会员的身份标识。
            </summary>
        </member>
        <member name="P:XMS.Core.UserPrincipal.ExtendProerties">
            <summary>
             获取或者设置当前会员的扩展属性集合。
            </summary>
        </member>
        <member name="T:XMS.Core.UserIdentity">
            <summary>
            会员身份标识
            </summary>
        </member>
        <member name="M:XMS.Core.UserIdentity.#ctor(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            初始化 UserIdentity 类的新实例。
            </summary>
            <param name="userId"></param>
            <param name="name"></param>
            <param name="token"></param>
            <param name="orgId"></param>
        </member>
        <member name="P:XMS.Core.UserIdentity.AuthenticationType">
            <summary>
            获取当前会员的身份认证类型。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.IsAuthenticated">
            <summary>
            指示当前会员已被验证。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.Name">
            <summary>
            获取当前会员的姓名。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.UserId">
            <summary>
            获取当前会员的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.OrgId">
            <summary>
            获取当前会员所属组织的 Id。
            </summary>
        </member>
        <member name="P:XMS.Core.UserIdentity.Token">
            <summary>
            获取当前会员访问系统使用的令牌。
            </summary>
        </member>
        <member name="T:XMS.Core.SecurityContext">
            <summary>
            安全上下文，不管是 Web 环境还是服务环境，提供获取当前安全上下文的统一访问入口。
            </summary>
        </member>
        <member name="M:XMS.Core.SecurityContext.InitCurrent">
            <summary>
            从请求中初始化 Current 属性，这可将 SecurityContext 当前实例初始化化，后续对 Current 属性的访问不再依赖于具体的请求上下文，可避免访问已经释放的 OperationContext.Current 时发生错误，
            并可提高后续访问的性能，但必须在执行结束时成对调用 ResetCurrent 方法，以防止在线程被复用时误用之前的上下文实例。
            </summary>
        </member>
        <member name="M:XMS.Core.SecurityContext.ResetCurrent">
            <summary>
            将 RunContext 的当前实例重设为 null，该方法一般与 InitCurrent 成对使用。
            </summary>
        </member>
        <member name="M:XMS.Core.SecurityContext.#ctor(System.Web.HttpContext,System.ServiceModel.OperationContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <param name="operationContext"></param>
        </member>
        <member name="P:XMS.Core.SecurityContext.Current">
            <summary>
            获取当前安全上下文对象。
            </summary>
        </member>
        <member name="P:XMS.Core.SecurityContext.User">
            <summary>
            获取访问当前系统的客户端用户主体对象，该属性不可能为 null。
            </summary>
        </member>
        <member name="P:XMS.Core.SecurityContext.UserIP">
            <summary>
            获取客户端访问者的 IP，该属性不可能为空或者空字符串。
            </summary>
        </member>
        <member name="P:XMS.Core.SecurityContext.AppAgent">
            <summary>
            获取访问当前系统的客户端应用代理。
            </summary>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.Pipes.ReplyException">
            <summary>
            表示在管道服务器接收到数据后的数据处理事件中调用 Reply 方法对调用方进行应答时发生的错误。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor">
            <summary>
            初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的一个新实例。
            </summary>
            <remarks>
            此构造函数将新实例的 Message 属性初始化为系统提供的消息，该消息对错误进行描述，例如“业务操作的过程中发生错误。”。
            </remarks>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.String)">
            <summary>
            使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <remarks>
            此构造函数使用 message 参数的值初始化新实例的 Message 属性。 message 参数的内容应为人所理解。
            </remarks>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的新实例。
            </summary>
            <param name="message">说明发生此异常的原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.Exception)">
            <summary>
            使用指定的错误消息和引发此异常的异常初始化 <see cref="T:XMS.Core.Pipes.ReplyException"/> 类的新实例。
            </summary>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个空引用。</param>
        </member>
        <member name="M:XMS.Core.Pipes.ReplyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 <see cref="T:XMS.Core.ArgumentNullOrWhiteSpaceException"/> 类的新实例。
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">对象，描述序列化数据的源或目标。</param>
            <remarks>在反序列化过程中调用该构造函数来重建通过流传输的异常对象。</remarks>
        </member>
        <member name="T:XMS.Core.Pipes.PipeServiceClientCollection">
            <summary>
            PipeServiceChannel 集合。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.#ctor">
            <summary>
            初始化 PipeServiceChannelCollection 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.#ctor(System.Int32)">
            <summary>
            使用指定的容量初始化 PipeServiceChannelCollection 类的新实例。
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.Remove(System.String)">
            <summary>
            从集合中移除指定项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientCollection.GetServiceClient(System.String,System.String)">
            <summary>
            根据指定的机器名称和管道名称获取已连接的服务端通道。
            </summary>
            <param name="machineName"></param>
            <param name="pipeName"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceChannel.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="T:XMS.Core.Messaging.IMessageHandler`1">
            <summary>
            为消息处理程序定义一组统一的接口。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XMS.Core.Messaging.IMessageHandler`1.Handle(XMS.Core.Messaging.IMessageContext,`0)">
            <summary>
            处理指定的消息并调用 context.Reply 通知消息代理服务器消息成功处理。
            	注意：	1. context.Reply 的调用应该在事物提交前的最后一步执行，这样，可确保消息代理服务器能够同步确认消息成功处理。
            			如果在提交事物之后调用 context.Reply，如果 context.Reply 过程中发生错误，消息代理服务器不一定能够同步确认消息成功，
            			这样，消息代理服务器会任务此消息未成功处理，后面会再次发送消息给目标应用，从而造成消息的重复执行。
            			2. 如果整个消息处理的过程中未抛出任何异常，那么消息总线系统会认为该消息已经成功处理，之后便会删除掉该消息；
            			如果消息处理过程中发生错误，请抛出原始异常或者处理后的异常以通知消息代理服务器消息处理失败；
            </summary>
            <param name="context">消息上下文。</param>
            <param name="message">要处理的消息。</param>
        </member>
        <member name="M:XMS.Core.WCF.WorkThread.Stop">
            <summary>
            调用线程不必等到当前线程结束就可立即返回。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.WorkThread.Abort">
            <summary>
            立即强制终止当前线程。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.WorkThread.Join">
            <summary>
            阻塞调用线程直到当前线程结束
            </summary>
        </member>
        <member name="T:XMS.Core.Triplet`3">
            <summary>
            表示用于存储三个相关对象的基本结构。
            </summary>
        </member>
        <member name="M:XMS.Core.Triplet`3.#ctor">
            <summary>
            初始化 Triplet 类的新实例。
            </summary>
        </member>
        <member name="P:XMS.Core.Triplet`3.First">
            <summary>
            获取或设置三元结构的第一个对象。 
            </summary>
        </member>
        <member name="P:XMS.Core.Triplet`3.Second">
            <summary>
            获取或设置三元结构的第二个对象。 
            </summary>
        </member>
        <member name="P:XMS.Core.Triplet`3.Third">
            <summary>
            获取或设置三元结构的第三个对象。 
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.#ctor(System.Collections.Generic.List{XMS.Core.Dictionary.DictionaryItem})">
            <summary>
            用指定的列表初始化 DictionaryItemCollection 。
            </summary>
            <param name="items">用来初始化 DictionaryItemCollection 的列表。</param>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.Contains(XMS.Core.Dictionary.DictionaryItem)">
            <summary>
            确定当前字典项集合中是否包含特定编码的字典项。 
            </summary>
            <param name="item">要在字典项集合中定位的元素。</param>
            <returns>如果字典项集合中包含指定的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.ContainsCode(System.String)">
            <summary>
            确定当前字典项集合中是否包含特定编码的字典项。 
            </summary>
            <param name="code">要在字典项集合中定位的编码。</param>
            <returns>如果字典项集合中包含具有指定编码的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.ContainsValue(System.Int64)">
            <summary>
            确定当前字典项集合中是否包含特定值的字典项。 
            </summary>
            <param name="code">要在字典项集合中定位的值。</param>
            <returns>如果字典项集合中包含具有指定值的元素，则为 true；否则为 false。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.GetItemByValue(System.Int64)">
            <summary>
            获取指定字典项值关联的字典项。
            </summary>
            <param name="value">要获取的字典项的值。</param>
            <returns>与指定值关联的字典项，如果找不到关联的字典项，则返回 null。</returns>
        </member>
        <member name="M:XMS.Core.Dictionary.DictionaryItemCollection.GetItemByCode(System.String)">
            <summary>
            获取指定字典项编码关联的字典项。
            </summary>
            <param name="value">要获取的字典项的编码。</param>
            <returns>与指定编码关联的字典项，如果找不到关联的字典项，则返回 null。</returns>
        </member>
        <member name="P:XMS.Core.Dictionary.DictionaryItemCollection.Item(System.Int32)">
            <summary>
            获取指定索引处的字典项。
            </summary>
            <param name="index">要获得字典项从零开始的索引。</param>
            <returns>指定索引处的字典项。如果 index 超出范围，既小于0 或者大于等于集合的 Count 属性，则返回 null。</returns>
        </member>
        <member name="T:XMS.Core.Configuration.ServiceModel.IRemoteConfigService">
            <summary>
            定义一组可用于访问远程配置服务器提供的配置服务的接口。
            </summary>
        </member>
        <member name="M:XMS.Core.Configuration.ServiceModel.IRemoteConfigService.GetConfigFiles(System.String,System.String)">
            <summary>
            根据指定的应用程序名称和版本从远程配置服务器上获取适用于该应用程序的所有配置文件组成的数组。
            </summary>
            <param name="applicationName">应用程序的名称。</param>
            <param name="version">应用程序的版本。</param>
            <returns>存储在远程配置服务器上的配置文件对象组成的数组。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ServiceModel.IRemoteConfigService.GetChangedConfigFiles(System.String,System.String,System.String[],System.String[])">
            <summary>
            获取自上次获取时间以来配置服务器上指定名称和版本的应用程序的已发生变化的配置文件组成的数组。
            </summary>
            <param name="applicationName">应用程序的名称。</param>
            <param name="version">应用程序的版本。</param>
            <param name="configFileNames">当前已获取的配置文件的名称组成的数组。</param>
            <param name="configFileHashs">客户端配置文件的 Hash 值组成的数组。</param>
            <returns>存储在远程配置服务器上的配置文件对象组成的数组。</returns>
        </member>
        <member name="M:XMS.Core.Configuration.ServiceModel.IRemoteConfigService.GetConfigFile(System.String,System.String,System.String)">
            <summary>
            根据指定的应用程序名称、版本和配置文件名称从远程配置服务器上获取配置文件对象。
            </summary>
            <param name="applicationName">应用程序的名称。</param>
            <param name="version">应用程序的版本。</param>
            <param name="configFileName">配置文件名称。</param>
            <returns>存储在远程配置服务器上的配置文件对象。</returns>
        </member>
        <member name="T:XMS.Core.InvokeStatistics">
            <summary>
            关于调用时长的统计类，nAbnormalInvokeTimeLength，异常调用的时长，可为空，将使用系统默认值，目前为10MS，超过该时长，将打印log，统计用的默认门限值为10，50，100，200,使用本类请使用Using,或者在使用结束后调用Dispose接口
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sKey">统计的主键，一般取方法名</param>
            <param name="sInvokeParas">调用的参数</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Int32[])">
             <summary>
            
             </summary>
             <param name="sKey">统计的主键，一般取方法名</param>
             <param name="sInvokeParas">调用的参数</param>
             <param name="nAbnormalInvokeTimeLength">异常调用的时长，超过该时长，将打印log</param>
             <param name="aThreshold">统计用的门限值，必须升序排列</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.String,System.Int32)">
            <summary>
            XMS.Core cache专用
            </summary>
            <param name="sKey"></param>
            <param name="sInvokeParas"></param>
            <param name="NotNeedPara">没用的参数，主要为了跟外部的构造函数区别，写的elegant太麻烦了</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.#ctor(System.String,System.Nullable{System.Int32},System.Int32[],System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            接口专用
            </summary>
            <param name="sKey"></param>
            <param name="nAbnormalInvokeTimeLength"></param>
            <param name="aThreshold"></param>
            <param name="parameters"></param>
            <param name="inputs"></param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.CreateInvokeStep(System.String)">
            <summary>
            建立统计单步的对象
            </summary>
            <param name="sStepName">方法内每个单独的步骤名字</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.InvokeStatistics.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:XMS.Core.InvokeStep">
            <summary>
            使用本类，请使用using，或者在使用结束后调用Dispose接口，才能保证统计的准确性
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStep.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:XMS.Core.InvokeStep.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.InvokeStep.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:XMS.Core.Business.AppSettingHelper.sStaticUploadUrl">
            <summary>
            图片站点Url
            </summary>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Alert(System.String)">
            <summary>
            提交返回信息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Success(System.String)">
            <summary>
            提交返回成功
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Fail(System.String)">
            <summary>
            提交返回成功
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.SendGoto(System.String,System.String)">
            <summary>
            提交返回信息,跳转到指定页
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Reload(System.String)">
            <summary>
            提交返回信息,刷新本页
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XMS.Core.Web.AjaxHelper.Write(System.String)">
            <summary>
            直接输出json字符窜
            </summary>
            <param name="sJson"></param>
        </member>
        <member name="T:XMS.Core.WCF.ManageableServiceHostManager">
            <summary>
            表示 ManageableServiceHost 的管理器，用于对服务宿主实例进行管理，可响应配置文件变化事件。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.GetServiceNetTcpUri(System.Type)">
            <summary>
            为指定类型的服务获取一个支持 nettcp 绑定的终端点地址。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.RegisterService(System.Type)">
            <summary>
            向 ManageableServiceHostFactory 中注册服务类型。
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.Start">
            <summary>
            启动服务管理器。
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.ManageableServiceHostManager.Stop">
            <summary>
            停止服务管理器。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.ManageableServiceHostManager.Instance">
            <summary>
            ManageableServiceHostManager 类的单例访问入口。
            </summary>
        </member>
        <member name="T:XMS.Core.Pipes.PipeServiceClientChannel">
            <summary>
            管道服务器端通道，该通道内部维护一个监听线程，用于接收管道客户端发送的数据。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.FireClosed(XMS.Core.Pipes.ClientChannelEventArgs)">
            <summary>
            引发 ClientClosed 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.ClientChannelEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.FireDataReceived(XMS.Core.Pipes.DataReceivedEventArgs)">
            <summary>
            引发 DataReceived 事件。 
            </summary>
            <param name="e">包含事件数据的 <see cref="T:XMS.Core.Pipes.DataReceivedEventArgs"/>。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Reply(System.Object,XMS.Core.Pipes.CallbackState)">
            <summary>
            在处理接收数据的事件中，调用此方法以通知调用方请求执行成功，该返回值应该是可序列化的。
            </summary>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Pipes.PipeServiceClientChannel.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="E:XMS.Core.Pipes.PipeServiceClientChannel.Closed">
            <summary>
            表示客户端断开连接时引发事件。
            </summary>
        </member>
        <member name="E:XMS.Core.Pipes.PipeServiceClientChannel.DataReceived">
            <summary>
            表示接收到客户端发送的数据时引发的事件。
            </summary>
        </member>
        <member name="P:XMS.Core.Pipes.PipeServiceClientChannel.Client">
            <summary>
            通道相关的客户端。
            </summary>
        </member>
        <member name="T:XMS.Core.ObjectHelper">
            <summary>
            常用的 Object 类的扩展方法
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.MemberwiseCopy``1(System.Object,System.Object,System.Boolean)">
            <summary>
            浅表复制，将源对象中与目标对象同名的公共非静态字段或属性的值复制到目标对象。
            如果字段是值类型的，则对该字段执行逐位复制。 如果字段是引用类型，则复制引用但不复制引用的对象；因此，源对象及当前对象引用同一对象。
            此方法要求 source 类型必须为 TSource 或从其继承，但仅复制源对象中由 TSource 限定的部分字段或属性。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.MemberwiseCopy(System.Object,System.Object,System.Boolean)">
            <summary>
            浅表复制，将源对象中与目标对象同名的公共非静态字段或属性的值复制到目标对象。
            如果字段是值类型的，则对该字段执行逐位复制。 如果字段是引用类型，则复制引用但不复制引用的对象；因此，源对象及当前对象引用同一对象。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.CreateMemberwiseCopyDelegate(System.Type,System.Type,System.Boolean)">
            <summary>
            动态创建一个委托并返回
            </summary>
            <param name="sourceType"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ObjectHelper.MemberwiseClone``1(``0)">
            <summary>
            浅表复制，将源对象中与目标对象同名的公共非静态字段或属性的值复制到目标对象。
            如果字段是值类型的，则对该字段执行逐位复制。 如果字段是引用类型，则复制引用但不复制引用的对象；因此，源对象及当前对象引用同一对象。
            </summary>
        </member>
        <member name="M:XMS.Core.ObjectHelper.CreateMemberwiseCloneDelegate(System.Type)">
            <summary>
            动态创建一个委托并返回
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.ObjectHelper.ConvertTo``1(System.Object,``0)">
            <summary>
            调用 Convert.ToXXX(object) 方法将指定对象转换为具有等效值的公共语言运行时类型, 如：Boolean、 SByte、 Byte、 Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 Single、 Double、 Decimal、 DateTime、 Char 和 String等，
            如果对象为 null 或转换过程中发生异常，则返回 defaultValue 参数指定的默认值。
            </summary>
            <typeparam name="T">目标类型。</typeparam>
            <param name="value">指定的对象。</param>
            <param name="defaultValue">默认值，如果不指定，则为目标类型的默认值。</param>
            <returns>对象转换后的值。</returns>
        </member>
        <member name="T:XMS.Core.Caching.ILocalCache">
            <summary>
            本地缓存接口
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object,XMS.Core.Caching.CacheDependency)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.SetItemWithNoExpiration(System.String,System.String,System.Object,XMS.Core.Caching.CacheDependency)">
            <summary>
            将指定项添加到缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.SetItem(System.String,System.String,System.Object,XMS.Core.Caching.CacheDependency,System.TimeSpan)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.SetItem(System.String,System.String,System.Object,XMS.Core.Caching.CacheDependency,System.Int32)">
            <summary>
            将指定项添加到缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="dependency">所插入对象的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。 </param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.ILocalCache.RemoveRegion(System.String)">
            <summary>
            移除当前缓存对象中的缓存分区。
            </summary>
            <param name="regionName">要移除的缓存分区的名称。</param>
            <returns>如果缓存分区被删除，则返回 true。如果缓存分区不存在，则返回 false。</returns>
        </member>
        <member name="T:XMS.Core.Logging.DefaultLogService">
            <summary>
            日志服务的默认实现。
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.DefaultLogService.#ctor">
            <summary>
            初始化 DefaultLogService 类的新实例。
            </summary>
        </member>
        <member name="F:XMS.Core.Logging.Log4net.CustomLogManager.wrapperMap">
            <summary>
            The wrapper map to use to hold the <see cref="T:XMS.Core.Logging.Log4net.DefaultCustomLog"/> objects
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.#ctor">
            <summary>
            Private constructor to prevent object creation
            </summary>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.Exists(System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the specified domain) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="domain">the domain to lookup in</param>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the specified assembly's domain) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the default domain.
            </summary>
            <remarks>
            <para>The root logger is <b>not</b> included in the returned array.</para>
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified domain.
            </summary>
            <param name="domain">the domain to lookup in</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's domain.
            </summary>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.String)">
             <summary>
             Retrieve or create a named logger.
             </summary>
             <remarks>
             <para>Retrieve a logger named as the <paramref name="name"/>
             parameter. If the named logger already exists, then the
             existing instance will be returned. Otherwise, a new instance is
             created.</para>
            
             <para>By default, loggers do not have a set level but inherit
             it from the hierarchy. This is one of the central features of
             log4net.</para>
             </remarks>
             <param name="name">The name of the logger to retrieve.</param>
             <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.String,System.String)">
             <summary>
             Retrieve or create a named logger.
             </summary>
             <remarks>
             <para>Retrieve a logger named as the <paramref name="name"/>
             parameter. If the named logger already exists, then the
             existing instance will be returned. Otherwise, a new instance is
             created.</para>
            
             <para>By default, loggers do not have a set level but inherit
             it from the hierarchy. This is one of the central features of
             log4net.</para>
             </remarks>
             <param name="repository">the repository to lookup in</param>
             <param name="name">The name of the logger to retrieve.</param>
             <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.Reflection.Assembly,System.String)">
             <summary>
             Retrieve or create a named logger.
             </summary>
             <remarks>
             <para>Retrieve a logger named as the <paramref name="name"/>
             parameter. If the named logger already exists, then the
             existing instance will be returned. Otherwise, a new instance is
             created.</para>
            
             <para>By default, loggers do not have a set level but inherit
             it from the hierarchy. This is one of the central features of
             log4net.</para>
             </remarks>
             <param name="repositoryAssembly">the assembly to use to lookup the domain</param>
             <param name="name">The name of the logger to retrieve.</param>
             <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="type">The full name of <paramref name="type"/> will
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repository">the repository to lookup in</param>
            <param name="type">The full name of <paramref name="type"/> will
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="repositoryAssembly">the assembly to use to lookup the domain</param>
            <param name="type">The full name of <paramref name="type"/> will
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.WrapLogger(log4net.Core.ILogger)">
            <summary>
            Lookup the wrapper object for the logger specified
            </summary>
            <param name="logger">the logger to get the wrapper for</param>
            <returns>the wrapper for the logger specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.WrapLoggers(log4net.Core.ILogger[])">
            <summary>
            Lookup the wrapper objects for the loggers specified
            </summary>
            <param name="loggers">the loggers to get the wrappers for</param>
            <returns>Lookup the wrapper objects for the loggers specified</returns>
        </member>
        <member name="M:XMS.Core.Logging.Log4net.CustomLogManager.WrapperCreationHandler(log4net.Core.ILogger)">
            <summary>
            Method to create the <see cref="T:log4net.Core.ILoggerWrapper"/> objects used by
            this manager.
            </summary>
            <param name="logger">The logger to wrap</param>
            <returns>The wrapper for the logger specified</returns>
        </member>
        <member name="T:XMS.Core.Logging.IntervalLogger">
            <summary>
            间隔性日志记录器，在指定的时间段内，如果出现连续 n 次相同的日志，则仅记录一次日志，其它的忽略，该类适用于以下场景：
            	1.间隔时间很短的循环性任务中记录日志；
            	2.高并发访问的函数中；
            使用此类，可有效减少相同类型日志的数量，方便监控和调试。
            </summary>
        </member>
        <member name="M:XMS.Core.Dictionary.DataModel.DictionaryDataItem.#ctor(XMS.Core.Dictionary.DictionaryItem)">
            <summary>
            初始化 DictionaryDataItem 的新实例。
            </summary>
            <param name="dictionaryItem"></param>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.DictionaryItem">
            <summary>
            获取当前字典数据项对应的字典项。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Selected">
            <summary>
            获取或者设置当前字典数据项的选中状态。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Description">
            <summary>
            获取或设置当前字典数据的备注信息。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Parent">
            <summary>
            获取当前字典项所属的父级字典数据项。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.Children">
            <summary>
            获取当前字典项中包含的子级字典数据项集合。
            </summary>
        </member>
        <member name="P:XMS.Core.Dictionary.DataModel.DictionaryDataItem.ExtendProperties">
            <summary>
            获取当前字典数据项的扩展属性。
            </summary>
            <remarks>
            只有当字典数据项是由绑定实体模型对象生成的情况下， ExtendProperties 中才包含有该实体模型对象的扩展属性数据，其它情况下，该属性集合总是为空（即集合数量为0）。
            因此，在使用 ExtendProperties 时，首先要使用其 Contains 方法判断要取值的扩展属性是否存在。
            </remarks>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceProxyWrapper`1.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="P:XMS.Core.WCF.Client.ServiceProxyWrapper`1.EndPointTrace">
            <summary>
            获取当前服务代理包装对象相关的终端点。
            </summary>
        </member>
        <member name="P:XMS.Core.WCF.Client.ServiceProxyWrapper`1.ServiceClient">
            <summary>
            服务客户端对象，通过它可以访问底层通道，服务代理对象通过该客户端访问远程服务。
            </summary>
        </member>
        <member name="T:XMS.Core.WCF.Client.ServiceFactory`1">
            <summary>
            服务工厂基类
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.GetServiceChannelFactory(XMS.Core.WCF.Client.EndPointTrace{`0})">
            <summary>
            获取有效的通道工厂。
            </summary>
            <param name="retryCount">指示当前的请求的重试次数。</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.#ctor(XMS.Core.WCF.Client.ClientChannelCacheMode)">
            <summary>
            
            </summary>
            <param name="cacheModel">要注册的服务在客户端的缓存模式。</param>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.CreateService">
            <summary>
            创建可用来访问服务的代理对象。
            </summary>
            <returns>可用来访问服务的代理对象。</returns>
        </member>
        <member name="T:XMS.Core.WCF.Client.ServiceFactory`1.ServiceInterceptor">
            <summary>
            服务拦截器
            </summary>
        </member>
        <member name="M:XMS.Core.WCF.Client.ServiceFactory`1.ServiceInterceptor.InterceptInner(Castle.DynamicProxy.IInvocation,XMS.Core.WCF.Client.ServiceProxyWrapper{`0}@,XMS.Core.WCF.Client.EndPointTrace{`0},XMS.Core.InvokeStatistics,System.Collections.Generic.List{XMS.Core.Pair{System.DateTime,System.String}},System.Boolean,System.Int32)">
            <summary>
            /
            </summary>
            <param name="invocation"></param>
            <param name="serviceProxyWrapper"></param>
            <param name="errorEndpoint"></param>
            <param name="objInvoke"></param>
            <param name="invokeStack"></param>
            <param name="bIsStillUseErrorEndpoint">true，表明是递归调用</param>
            <param name="nRetryCount"></param>
        </member>
        <member name="T:XMS.Core.Caching.Memcached.MemcachedDistributeCache">
            <summary>
            表示一个可用来访问和存储缓存数据的对象。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.SetItem(System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到 Cache 对象，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.SetItem(System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到 Cache 对象，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.SetItemWithNoExpiration(System.String,System.Object)">
            <summary>
            将指定项添加到 Cache 对象，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.GetItem(System.String)">
            <summary>
            从 Cache 对象中获取指定的缓存项。
            </summary>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.RemoveItem(System.String)">
            <summary>
            从 Cache 对象中移除指定的缓存项。
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>
            移除成功，返回 <c>true</c>；移除失败，返回 <c>false</c>。
            </returns>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.Clear">
            <summary>
            清空当前缓存对象中缓存的全部缓存项。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.CheckAndDispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="M:XMS.Core.Caching.Memcached.MemcachedDistributeCache.Dispose(System.Boolean)">
            <summary>
            释放非托管资源。
            </summary>
            <param name="disposing"><b>true</b> 同时释放托管和非托管资源; <b>false</b> 只释放非托管资源。</param>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.MemcachedDistributeCache.CacheName">
            <summary>
            获取当前缓存对象所属的命名缓存的名称。
            </summary>
        </member>
        <member name="P:XMS.Core.Caching.Memcached.MemcachedDistributeCache.RegionName">
            <summary>
            获取当前缓存对象所属的分区。
            </summary>
            <remarks>
            对当前缓存对象执行的所有操作都是针对 <see cref="P:XMS.Core.Caching.Memcached.MemcachedDistributeCache.RegionName"/> 限定的分区进行的。
            </remarks>
        </member>
        <member name="T:XMS.Core.Caching.DefaultCacheService">
            <summary>
            为缓存系统提供一个简明一致的访问界面（接口），隐藏缓存系统的复杂性，使缓存系统更加容易使用。
            注意：XMS.Core 中所有以 Facade 模式暴露的接口内部都对异常做了处理，不会抛出任何异常。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.#ctor">
            <summary>
            初始化 DefaultCacheService 类的新实例。
            </summary>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetAndSetItem(System.String,System.String,System.String,System.Func{System.Object,System.Object},System.Object,System.Int32)">
            <summary>
            获取并设置缓存项，当缓存中不存在目标键值的有效缓存项时，同步调用 callback 函数初始化缓存项，否则当存在有效的缓存项时，每隔一段时间（该时间段可在配置文件中定义）异步调用一次 callback 函数重新给缓存项赋值。
            该接口是大部分场景下获取缓存对象的首选方法，支持高并发访问并且不会因阻塞造成性能问题，也不存在短时间内重复初始化缓存项的问题。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">缓存对象所属的分区。</param>
            <param name="key">要获取的缓存项的键。</param>
            <param name="callback">用来初始化或者更新缓存项的回调函数。</param>
            <param name="callBackState">调用回调函数时传入其中的参数。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定的缓存分区，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLive 参数限定的时间间隔（从添加时间算起）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLive">添加对象时与该对象到期时之间的时间间隔。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItem(System.String,System.String,System.String,System.Object,System.Int32)">
            <summary>
            将指定项添加到指定缓存，该项具有绝对到期策略，将在 timeToLiveInSeconds 参数限定的时间间隔（从添加时间算起，以秒为单位）后过期。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="timeToLiveInSeconds">添加对象时与该对象到期时之间的时间间隔，以秒为单位。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItemWithNoExpiration(System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定的缓存分区，该缓存项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.SetItemWithNoExpiration(System.String,System.String,System.String,System.Object)">
            <summary>
            将指定项添加到指定缓存，该项将永不自动过期（除非被手动移除）。 
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">用于引用该项的缓存键。</param>
            <param name="value">要添加到缓存的项。</param>
            <param name="tags">可用来对缓存项进行说明和检索的标签数组。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.RemoveItem(System.String,System.String)">
            <summary>
            从指定的缓存分区中移除指定的缓存项。
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.RemoveItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中移除指定的缓存项。
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            </summary>
            <param name="key">要移除的缓存项的键。</param>
            <returns>如果移除成功，则返回 <c>true</c>，否则返回 <c>false</c>。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetItem(System.String,System.String)">
            <summary>
            从指定缓存分区中获取指定的缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.GetItem(System.String,System.String,System.String)">
            <summary>
            从指定缓存中获取指定的缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
            <param name="key">要获取的缓存项的键。</param>
            <returns>要获取的缓存项对象。</returns>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.Clear(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.Clear(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.ClearRegion(System.String)">
            <summary>
            清空默认缓存对象中缓存的全部缓存项。
            </summary>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="M:XMS.Core.Caching.DefaultCacheService.ClearRegion(System.String,System.String)">
            <summary>
            清空指定缓存对象中缓存的全部缓存项。
            </summary>
            <param name="cacheName">要从中获取缓存对象的命名缓存的名称。</param>
            <param name="regionName">要获取的缓存对象所属的分区的名称。</param>
        </member>
        <member name="P:XMS.Core.Caching.DefaultCacheService.LocalCache">
            <summary>
            获取名称为 local 的本地缓存对象，该缓存对象永远不可能为 null，其存储位置为本地内存，永远不可能被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="P:XMS.Core.Caching.DefaultCacheService.RemoteCache">
            <summary>
            获取远程缓存对象，该缓存对象永远不可能为 null，其存储位置为分布式缓存，永远被配置到分布式缓存服务器中。
            </summary>
            <returns>名称为 local 的本地缓存对象。</returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.Prepare(System.DateTime,System.Boolean)">
            <summary>
            If AlwaysUseUtc is set to true then convert all DateTime to UTC.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.RepairXsdTimeSeparator(System.String)">
            <summary>
            Repairs an out-of-spec XML date/time string which incorrectly uses a space instead of a 'T' to separate the date from the time.
            These string are occasionally generated by SQLite and can cause errors in OrmLite when reading these columns from the DB.
            </summary>
            <param name="dateTimeStr">The XML date/time string to repair</param>
            <returns>The repaired string. If no repairs were made, the original string is returned.</returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.ParseWcfJsonDateOffset(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DateTimeSerializer.ParseWcfJsonDate(System.String)">
            <summary>
            WCF Json format: /Date(unixts+0000)/
            </summary>
            <param name="wcfJsonDate"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.DeserializeTypeUtils.GetTypeStringConstructor(System.Type)">
            <summary>
            Get the type(string) constructor if exists
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Common.JsWriter.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.JsonTypeSerializer.WriteRawString(System.IO.TextWriter,System.String)">
            <summary>
            Shortcut escape when we're sure value doesn't contain any escaped chars
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
        </member>
        <member name="M:XMS.Core.JsonFast.JsonTypeSerializer.ConvertFromUtf32(System.Int32)">
            <summary>
            Given a character as utf32, returns the equivalent string provided that the character
            is legal json.
            </summary>
            <param name="utf32"></param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.JsonUtils.HasAnyEscapeChars(System.String)">
            <summary>
            micro optimizations: using flags instead of value.IndexOfAny(EscapeChars)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XMS.Core.JsonFast.JsonWriter`1">
            <summary>
            Implement the serializer using a more static approach
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AutoMappingUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj"></param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns></returns>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sTimeSpanHandler">
            <summary>
            Sets which format to use when serializing TimeSpans
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sEmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:XMS.Core.JsonFast.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sEmitLowercaseUnderscoreNames">
            <summary>
            <see langword="true"/> if the <see cref="T:XMS.Core.JsonFast.Common.ITypeSerializer"/> is configured
            to support web-friendly serialized formats, ie emitting lowercase_underscore_casing for JSON
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sPropertyConvention">
            <summary>
            Define how property names are mapped during deserialization
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sThrowOnDeserializationError">
            <summary>
            Gets or sets a value indicating if the framework should throw serialization exceptions
            or continue regardless of deserialization errors. If <see langword="true"/>  the framework
            will throw; otherwise, it will parse as many fields as possible. The default is <see langword="false"/>.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sAlwaysUseUtc">
            <summary>
            Gets or sets a value indicating if the framework should always convert <see cref="T:System.DateTime"/> to UTC format instead of local time. 
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sAssumeUtc">
            <summary>
            Gets or sets a value indicating if the framework should always assume <see cref="T:System.DateTime"/> is in UTC format if Kind is Unspecified. 
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sAppendUtcOffset">
            <summary>
            Gets or sets whether we should append the Utc offset when we serialize Utc dates. Defaults to no.
            Only supported for when the JsConfig.DateHandler == JsonDateHandler.TimestampOffset
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sEscapeUnicode">
            <summary>
            Gets or sets a value indicating if unicode symbols should be serialized as "\uXXXX".
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sIncludePublicFields">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sReuseStringBuffer">
            <summary>
            For extra serialization performance you can re-use a ThreadStatic StringBuilder
            when serializing to a JSON String.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sMaxDepth">
            <summary>
            Sets the maximum depth to avoid circular dependencies
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig.sModelFactory">
            <summary>
            Set this to enable your own type construction provider.
            This is helpful for integration with IoC containers where you need to call the container constructor.
            Return null if you don't know how to construct the type and the parameterless constructor will be used.
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsConfig.PreferInterfaces">
            <summary>
            If set to true, Interface types will be prefered over concrete types when serializing.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.IncludeTypeInfo">
            <summary>
            Always emit type info for this type.  Takes precedence over ExcludeTypeInfo
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.ExcludeTypeInfo">
            <summary>
            Never emit type info for this type
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.EmitCamelCaseNames">
            <summary>
            <see langword="true"/> if the <see cref="T:XMS.Core.JsonFast.Common.ITypeSerializer"/> is configured
            to take advantage of <see cref="T:System.CLSCompliantAttribute"/> specification,
            to support user-friendly serialized formats, ie emitting camelCasing for JSON
            and parsing member names and enum values in a case-insensitive manner.
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.serializeFn">
            <summary>
            Define custom serialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.rawSerializeFn">
            <summary>
            Define custom raw serialization fn
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.onSerializingFn">
            <summary>
            Define custom serialization hook
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.onSerializedFn">
            <summary>
            Define custom after serialization hook
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.DeSerializeFn">
            <summary>
            Define custom deserialization fn for BCL Structs
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.RawDeserializeFn">
            <summary>
            Define custom raw deserialization fn for objects
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.JsConfig`1.ExcludePropertyNames">
            <summary>
            Exclude specific properties of this type from being serialized
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsConfig`1.TreatValueAsRefType">
            <summary>
            Opt-in flag to set some Value Types to be treated as a Ref Type
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsConfig`1.HasSerializeFn">
            <summary>
            Whether there is a fn (raw or otherwise)
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.PropertyConvention.Strict">
            <summary>
            The property names on target types must match property names in the JSON source
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.PropertyConvention.Lenient">
            <summary>
            The property names on target types may not match the property names in the JSON source
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.TimeSpanHandler.DurationFormat">
            <summary>
            Uses the xsd format like PT15H10M20S
            </summary>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.TimeSpanHandler.StandardFormat">
            <summary>
            Uses the standard .net ToString method of the TimeSpan class
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonExtensions.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value converted to T
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonExtensions.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get JSON string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonObject.GetUnescaped(System.String)">
            <summary>
            Get unescaped string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonObject.Child(System.String)">
            <summary>
            Get unescaped string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.JsonObject.WriteValue(System.IO.TextWriter,System.Object)">
            <summary>
            Write JSON Array, Object, bool or number values as raw string
            </summary>
        </member>
        <member name="P:XMS.Core.JsonFast.Utils.JsonObject.Item(System.String)">
            <summary>
            Get JSON string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ITypeSerializer`1.CanCreateFromString(System.Type)">
            <summary>
            Determines whether this serializer can create the specified type from a string.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if this instance [can create from string] the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ITypeSerializer`1.DeserializeFromString(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ITypeSerializer`1.DeserializeFromReader(System.IO.TextReader)">
            <summary>
            Deserializes from reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ITypeSerializer`1.SerializeToString(`0)">
            <summary>
            Serializes to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ITypeSerializer`1.SerializeToWriter(`0,System.IO.TextWriter)">
            <summary>
            Serializes to writer.
            </summary>
            <param name="value">The value.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:XMS.Core.JsonFast.Utils.AssemblyUtils">
            <summary>
            Utils to load types
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AssemblyUtils.FindType(System.String)">
            <summary>
            Find the type from the name supplied
            </summary>
            <param name="typeName">[typeName] or [typeName, assemblyName]</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AssemblyUtils.MainInterface``1">
            <summary>
            The top-most interface of the given type, if any.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.AssemblyUtils.FindType(System.String,System.String)">
            <summary>
            Find type if it exists
            </summary>
            <param name="typeName"></param>
            <param name="assemblyName"></param>
            <returns>The type if it exists</returns>
        </member>
        <member name="T:XMS.Core.JsonFast.Utils.TypeSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.TypeSerializer.DeserializeFromString``1(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.TypeSerializer.DeserializeFromString(System.String,System.Type)">
            <summary>
            Parses the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.TypeSerializer.ToStringDictionary``1(``0)">
            <summary>
            Useful extension method to get the Dictionary[string,string] representation of any POCO type.
            </summary>
            <returns></returns>
        </member>
        <member name="F:XMS.Core.JsonFast.Utils.StreamExtensions.DefaultBufferSize">
            <summary>
            @jonskeet: Collection of utility methods which operate on streams.
            r285, February 26th 2009: http://www.yoda.arachsys.com/csharp/miscutil/
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadFully(System.IO.Stream)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer size.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Reads the given stream up to the end, returning the data as a byte
            array, using the given buffer for transferring data. Note that the
            current contents of the buffer is ignored, so the buffer needn't
            be cleared beforehand.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all the data from one stream into another.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies all the data from one stream into another, using a buffer
            of the given size.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copies all the data from one stream into another, using the given 
            buffer for transferring data. Note that the current contents of 
            the buffer is ignored, so the buffer needn't be cleared beforehand.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadExactly(System.IO.Stream,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream.
            If the end of the stream is reached before the specified amount
            of data is read, an exception is thrown.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[])">
            <summary>
            Reads into a buffer, filling it completely.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads exactly the given number of bytes from the specified stream,
            into the given buffer, starting at position 0 of the array.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.StreamExtensions.ReadExactlyFast(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Same as ReadExactly, but without the argument checks.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ReflectionExtensions.New``1(System.Type)">
            <summary>
            Creates a new instance of type. 
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ReflectionExtensions.New(System.Type)">
            <summary>
            Creates a new instance of type. 
            First looks at JsConfig.ModelFactory before falling back to CreateInstance
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.ReflectionExtensions.CreateInstance(System.Type)">
            <summary>
            Creates a new instance from the default constructor of type
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.PlatformExtensions.AddAttributes(System.Reflection.PropertyInfo,System.Attribute[])">
            <summary>
            Add a Property attribute at runtime. 
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Utils.PlatformExtensions.ReplaceAttribute(System.Reflection.PropertyInfo,System.Attribute)">
            <summary>
            Add a Property attribute at runtime. 
            <para>Not threadsafe, should only add attributes on Startup.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XMS.Core.JsonFast.Support.DoubleConverter.ToExactString(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "T:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal" -->
        <!-- Badly formed XML comment ignored for member "F:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.digits" -->
        <member name="F:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:XMS.Core.JsonFast.Support.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:ServiceStack.Text.FastMember.ObjectAccessor">
            <summary>
            Represents an individual object, allowing access to members by-name
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.Equals(System.Object)">
            <summary>
            Use the target types definition of equality
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.GetHashCode">
            <summary>
            Obtain the hash of the target object
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.ToString">
            <summary>
            Use the target's definition of a string representation
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.ObjectAccessor.Create(System.Object)">
            <summary>
            Wraps an individual object, allowing by-name access to that instance
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.ObjectAccessor.Item(System.String)">
            <summary>
            Get or Set the value of a named member for the underlying object
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.ObjectAccessor.Target">
            <summary>
            The object represented by this instance
            </summary>
        </member>
        <member name="T:ServiceStack.Text.FastMember.TypeAccessor">
            <summary>
            Provides by-name member-access to objects of a given type
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.TypeAccessor.CreateNew">
            <summary>
            Create a new instance of this type
            </summary>
        </member>
        <member name="M:ServiceStack.Text.FastMember.TypeAccessor.Create(System.Type)">
            <summary>
            Provides a type-specific accessor, allowing by-name access for all objects of that type
            </summary>
            <remarks>The accessor is cached internally; a pre-existing accessor may be returned</remarks>
        </member>
        <member name="P:ServiceStack.Text.FastMember.TypeAccessor.CreateNewSupported">
            <summary>
            Does this type support new instances via a parameterless constructor?
            </summary>
        </member>
        <member name="P:ServiceStack.Text.FastMember.TypeAccessor.Item(System.Object,System.String)">
            <summary>
            Get or set the value of a named member on the target instance
            </summary>
        </member>
        <member name="T:XMS.Core.JsonFast.JsonSerializer">
            <summary>
            Creates an instance of a Type from a string value
            </summary>
        </member>
    </members>
</doc>
